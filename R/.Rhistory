temp <- avail[avail$Sys.Name %in% lethal_385$Sys.Name,]
lethal <- rbind(lethal, temp) %>%
dplyr::distinct(Sys.Name, .keep_all = T)
# Join this to the previously selected strains
lethal <- lethal %>%
dplyr::select(-c(SB.notes, Well_ID_non_unique)) %>%
dplyr::mutate(Status = "Lethal")
status_for_pilot_final <- status_for_pilot_final %>%
dplyr::mutate(Status = case_when(Synthetase == "Yes" ~ "Synthetase",
Synthetase == "No" & Lab.ID == "Y12395" ~ "BY4741",
Synthetase == "No" & Lab.ID != "Y12395" ~ "Control"))
knitr::opts_chunk$set(echo = TRUE)
library(xlsx)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggrepel)
library(stringr)
library(glue)
library(viridis)
library(platetools)
set.seed(2025)
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Synthetases dataframes
synthetases <- as.data.frame(fread(paste(base_dir, "TSSC/Data/synthetases/trna_synthetases.csv", sep="")))
# Agar growth data
growth_agar <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Boone_lab/Growth/Mine/Processed_by_them/growth_agar.tsv", sep="")))
# Master tRNA dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
# Amino acid information dataset
amino_acids <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Other/GtRNAdb/amino_acids.csv", sep="")))
# Layout of samples in the 384-well plates we got from the Boone lab
sample_layout <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Boone_lab/sample_layout.csv", sep="")))
# Grab the tRNA-synthetases that are in the library
trna_synths_in_library <- synthetases[synthetases$Gene.secondaryIdentifier %in% growth_agar$Sys.Name,]
trna_synths_in_library <- trna_synths_in_library[order(trna_synths_in_library$Gene.name),]
# Check, out of the tRNA genes that couldn't be KOd in the tRNA KO library, how many correspond to which amino acids - what defines this? I EXPLORE THIS FURTHER IN 1.11. IN THE MAIN TRNA .RMD FILE
sort(table(master_dataset$Isotype_from_anticodon[master_dataset$KOd == "No"]))
# For each 384-well plate I need to come up with a separate dataframe, with only the column with the appropriate well IDs, and another column I want to color the wells by
for (i in 1:4) {
# Isolate strains in this plate and code how we want to color them
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(Strain_type = case_when(Synthetase == "Yes" & !grepl("exclude", SB.notes, ignore.case = T) & Available == "Yes" ~ "Synthetase",
grepl("exclude", SB.notes, ignore.case = T) ~ "Exclude this well",
Synthetase == "Yes" & !grepl("exclude", SB.notes, ignore.case = T) & Available == "No" ~ "Synthetase - didn't grow",
#grepl("Wild type", Notes, ignore.case = T) ~ "BY4741",
#grepl("control added by Fang", Notes, ignore.case = T) ~ "BY4741 + p13623",
TRUE ~ "Other")) %>%
dplyr::select(Strain_type, Well_ID_non_unique)
# Create coloring scheme
coloring_levels <- c("Other", "Synthetase", "Exclude this well", "Synthetase - didn't grow")    # CHANGE IT HERE IF I WANT TO COLOR CONTROL STRAINS OR SOMETHING ELSE!
fixed_colors <- viridis(length(coloring_levels))
names(fixed_colors) <- coloring_levels
temp$Strain_type <- factor(temp$Strain_type, levels = coloring_levels)
# Plot this plate
raw_map(data = temp$Strain_type,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA synthetases TS alleles")) +
theme_dark() +
scale_fill_manual(values = fixed_colors) +
theme(axis.text=element_text(size=6)) +
labs(fill = "Strain type")
ggsave(paste(base_dir, "TSSC/Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
growth_agar <- growth_agar %>%
mutate(possible_selection = case_when(Plate384 == 4 & (Row384 == which(letters == "f")|Row384 == which(letters == "g")) ~ TRUE,
TRUE ~ FALSE))
ggplot(data = growth_agar, aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(possible_selection))) +
geom_point() +
geom_abline() +
labs(col = "Ratio 26ºC/22ºC") +
theme_light() +
xlab("AUC at 22ºC") +
ylab("AUC at 26ºC")
# We have 10 tRNA synthetase KOs, 1 WT, and we can add let's say 3 WTs+plasmid = 13 strains
strains_for_pilot <- sample_layout %>%
filter(Sys.Name %in% synthetases$Gene.secondaryIdentifier | grepl("Wild type", Notes, ignore.case = T) | grepl("control added by Fang", Notes, ignore.case = T),
Available == "Yes",
!grepl("exclude", SB.notes, ignore.case = T)) %>%
dplyr::select(-c(SB.notes))
# Actually let me make sure I only have 4 rows for the controls, one coming from each plate
strains_for_pilot_1 <- strains_for_pilot %>%
filter(!grepl("control added", Notes, ignore.case = T))
strains_for_pilot_2 <- strains_for_pilot %>%
filter(grepl("control added", Notes, ignore.case = T)) %>%
distinct(Plate384, .keep_all = T) %>%
filter(Plate384 == 1 | Plate384 == 2 | Plate384 == 3)
strains_for_pilot_final <- rbind(strains_for_pilot_1, strains_for_pilot_2)
# Are there any other ts alleles that are related to tRNAs?
check <- sample_layout %>%
filter(grepl("trna", Gene.name, ignore.case = T) & Available == "Yes")
# Add 3 more strains at random, just to make it 16, because 96 is a multiple of 16
rownames(strains_for_pilot_final) <- NULL
# Remove last column before sending it to Wenxi, I don't think it's useful at all and it could be confusing
strains_for_pilot_final <- strains_for_pilot_final %>%
dplyr::select(-Well_ID_non_unique)
# Load data
li_2011 <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Articles/Li_et_al_2011/Li_et_al_S1.csv", sep = "")))
# Get available strains in our library for reference
avail <- sample_layout %>%
filter(Available == "Yes")
# Check the distribution of lethal temperature
ggplot(data = li_2011, aes(x = lethal_temp_lower)) +
geom_histogram() +
theme_light()
sort(unique(li_2011$lethal_temp_lower))
# There are 5 (lower) lethal temperatures - I'll pick 2 strains from each to put in our experiment
lethal_26 <- li_2011 %>%
filter(lethal_temp_lower == 26,
Sys.Name %in% avail$Sys.Name)
lethal_26 <- lethal_26[sample(nrow(lethal_26), 2),]
lethal <- avail[avail$Sys.Name %in% lethal_26$Sys.Name,] %>%
dplyr::distinct(Sys.Name, .keep_all = T)
lethal_30 <- li_2011 %>%
filter(lethal_temp_lower == 30,
Sys.Name %in% avail$Sys.Name)
lethal_30 <- lethal_30[sample(nrow(lethal_30), 2),]
temp <- avail[avail$Sys.Name %in% lethal_30$Sys.Name,]
lethal <- rbind(lethal, temp) %>%
dplyr::distinct(Sys.Name, .keep_all = T)
lethal_35 <- li_2011 %>%
filter(lethal_temp_lower == 35,
Sys.Name %in% avail$Sys.Name)
lethal_35 <- lethal_35[sample(nrow(lethal_35), 2),]
temp <- avail[avail$Sys.Name %in% lethal_35$Sys.Name,]
lethal <- rbind(lethal, temp) %>%
dplyr::distinct(Sys.Name, .keep_all = T)
lethal_37 <- li_2011 %>%
filter(lethal_temp_lower == 37,
Sys.Name %in% avail$Sys.Name)
lethal_37 <- lethal_37[sample(nrow(lethal_37), 2),]
temp <- avail[avail$Sys.Name %in% lethal_37$Sys.Name,]
lethal <- rbind(lethal, temp) %>%
dplyr::distinct(Sys.Name, .keep_all = T)
lethal_385 <- li_2011 %>%
filter(lethal_temp_lower == 38.5,
Sys.Name %in% avail$Sys.Name)
lethal_385 <- lethal_385[sample(nrow(lethal_385), 2),]
temp <- avail[avail$Sys.Name %in% lethal_385$Sys.Name,]
lethal <- rbind(lethal, temp) %>%
dplyr::distinct(Sys.Name, .keep_all = T)
# Join this to the previously selected strains
lethal <- lethal %>%
dplyr::select(-c(SB.notes, Well_ID_non_unique)) %>%
dplyr::mutate(Status = "Lethal")
strains_for_pilot_final <- strains_for_pilot_final %>%
dplyr::mutate(Status = case_when(Synthetase == "Yes" ~ "Synthetase",
Synthetase == "No" & Lab.ID == "Y12395" ~ "BY4741",
Synthetase == "No" & Lab.ID != "Y12395" ~ "Control"))
strains_for_pilot_final_and_lethal <- rbind(strains_for_pilot_final, lethal)
# Save as .xlsx to send it to Wenxi
write.xlsx(x = strains_for_pilot_final_and_lethal,
file = paste(base_dir, "TSSC/Data/Pilot/setup/strains_for_pilot.xlsx", sep=""),
row.names = F)
knitr::opts_chunk$set(echo = TRUE)
library(xlsx)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggrepel)
library(stringr)
library(glue)
library(viridis)
library(platetools)
set.seed(2025)
growth_26 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250530-26C.xlsx"), sheetIndex = 1)
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
growth_26 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250530-26C.xlsx"), sheetIndex = 1)
growth_26 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250530-26C.xlsx", sep=""), sheetIndex = 1)
View(growth_26)
growth_26 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250530-26C.xlsx", sep=""), sheetIndex = 1)
View(growth_26)
900/60
growth_30 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250530-30C.xlsx", sep=""), sheetIndex = 1)
growth_30 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250529-30C.xlsx", sep=""), sheetIndex = 1)
View(growth_30)
growth_30 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250529-30C.xlsx", sep=""), sheetIndex = 1)
View(growth_30)
growth_30 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250529-30C.xlsx", sep=""), sheetIndex = 1)
View(growth_30)
growth_34 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250602-34C.xlsx", sep=""), sheetIndex = 1)
View(growth_34)
growth_34 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250602-34C.xlsx", sep=""), sheetIndex = 1)
growth_37 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250602-37C.xlsx", sep=""), sheetIndex = 1)
View(growth_37)
ggplot() +
geom_line(data = growth_26, aes(x = Time, y = T..600), col = "darkgreen") +
geom_line(data = growth_30, aes(x = Time, y = T..600), col = "darkgreen") +
geom_line(data = growth_34, aes(x = Time..s., y = Temp....C.), col = "darkgreen") +
geom_line(data = growth_37, aes(x = Time..s., y = Temp....C.), col = "darkgreen") +
geom_hline(yintercept = 26, col = "black") +
geom_hline(yintercept = 30, col = "black") +
geom_hline(yintercept = 34, col = "black") +
geom_hline(yintercept = 37, col = "black")
growth_37 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250602-37C.xlsx", sep=""), sheetIndex = 1)
ggplot() +
geom_line(data = growth_26, aes(x = Time, y = T..600), col = "darkgreen") +
geom_line(data = growth_30, aes(x = Time, y = T..600), col = "darkgreen") +
geom_line(data = growth_34, aes(x = Time..s., y = Temp....C.), col = "darkgreen") +
geom_line(data = growth_37, aes(x = Time..s., y = Temp....C.), col = "darkgreen") +
geom_hline(yintercept = 26, col = "black") +
geom_hline(yintercept = 30, col = "black") +
geom_hline(yintercept = 34, col = "black") +
geom_hline(yintercept = 37, col = "black")
ggplot() +
geom_line(data = growth_26, aes(x = Time, y = T..600), col = "darkgreen", linewidth = 1) +
geom_line(data = growth_30, aes(x = Time, y = T..600), col = "darkgreen") +
geom_line(data = growth_34, aes(x = Time..s., y = Temp....C.), col = "darkgreen") +
geom_line(data = growth_37, aes(x = Time..s., y = Temp....C.), col = "darkgreen") +
geom_hline(yintercept = 26, col = "black") +
geom_hline(yintercept = 30, col = "black") +
geom_hline(yintercept = 34, col = "black") +
geom_hline(yintercept = 37, col = "black") +
theme_light()
ggplot() +
geom_line(data = growth_26, aes(x = Time, y = T..600), col = "darkgreen", linewidth = 1) +
geom_line(data = growth_30, aes(x = Time, y = T..600), col = "darkgreen", linewidth = 1) +
geom_line(data = growth_34, aes(x = Time..s., y = Temp....C.), col = "darkgreen", linewidth = 1) +
geom_line(data = growth_37, aes(x = Time..s., y = Temp....C.), col = "darkgreen", linewidth = 1) +
geom_hline(yintercept = 26, col = "black") +
geom_hline(yintercept = 30, col = "black") +
geom_hline(yintercept = 34, col = "black") +
geom_hline(yintercept = 37, col = "black") +
theme_light()
ggplot() +
geom_line(data = growth_26, aes(x = Time, y = T..600), col = "darkgreen", linewidth = 1) +
geom_line(data = growth_30, aes(x = Time, y = T..600), col = "blue", linewidth = 1) +
geom_line(data = growth_34, aes(x = Time..s., y = Temp....C.), col = "purple", linewidth = 1) +
geom_line(data = growth_37, aes(x = Time..s., y = Temp....C.), col = "orange", linewidth = 1) +
geom_hline(yintercept = 26, col = "black") +
geom_hline(yintercept = 30, col = "black") +
geom_hline(yintercept = 34, col = "black") +
geom_hline(yintercept = 37, col = "black") +
theme_light()
75000/60
1250/60
# Growth data at the different temperatures
growth_26 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250530-26C.xlsx", sep=""), sheetIndex = 1)
growth_30 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250529-30C.xlsx", sep=""), sheetIndex = 1)
growth_34 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250602-34C.xlsx", sep=""), sheetIndex = 1)
growth_37 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250602-37C.xlsx", sep=""), sheetIndex = 1)
# Sample layout
ggplot() +
geom_line(data = growth_26, aes(x = Time, y = T..600), col = "darkgreen", linewidth = 1) +
geom_line(data = growth_30, aes(x = Time, y = T..600), col = "blue", linewidth = 1) +
geom_line(data = growth_34, aes(x = Time..s., y = Temp....C.), col = "purple", linewidth = 1) +
geom_line(data = growth_37, aes(x = Time..s., y = Temp....C.), col = "orange", linewidth = 1) +
geom_hline(yintercept = 26, col = "black") +
geom_hline(yintercept = 30, col = "black") +
geom_hline(yintercept = 34, col = "black") +
geom_hline(yintercept = 37, col = "black") +
theme_light() +
xlab("Time") +
ylab("Temperature")
View(growth_37)
ggplot() +
geom_line(data = growth_26, aes(x = Time, y = T..600), col = "darkgreen", linewidth = 1) +
geom_line(data = growth_30, aes(x = Time, y = T..600), col = "blue", linewidth = 1) +
geom_line(data = growth_34, aes(x = Time..s., y = Temp....C.), col = "purple", linewidth = 1) +
geom_line(data = growth_37, aes(x = Time..s., y = Temp....C.), col = "orange", linewidth = 1) +
geom_hline(yintercept = 26, col = "black") +
geom_hline(yintercept = 30, col = "black") +
geom_hline(yintercept = 34, col = "black") +
geom_hline(yintercept = 37, col = "black") +
theme_light() +
xlab("Time") +
ylab("Temperature") +
labs(title = "How well did the incubators match their assigned temperature?")
# Sample IDs
sample_ids <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/strains_for_pilot.xlsx", sep=""), sheetIndex = 1)
View(sample_ids)
# Sample IDs
sample_ids <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/strains_for_pilot.xlsx", sep=""), sheetIndex = 1)
View(sample_ids)
paste("A", seq(1, 12, 1))
paste("A", seq(1, 12, 1), sep = "")
# In the 30ºC dataset, row D in the plate was not left emtpy, so I'm going to change the IDs so that:
#   - row D in the plate is now row E in my dataset
#   - row E in the plate is now row F in my dataset
#   - row F in the plate is now row G in my dataset
#   - row G in the plate (empty) is now row D in my dataset
# SO REMEMBER THAT LABELS IN THE ANALYSIS FOR ROWS FROM D ARE CHANGED HERE!
new_colnames <- c(paste("A", seq(1, 12, 1), sep = ""),
paste("B", seq(1, 12, 1), sep = ""),
paste("C", seq(1, 12, 1), sep = ""),
paste("E", seq(1, 12, 1), sep = ""),
paste("F", seq(1, 12, 1), sep = ""),
paste("G", seq(1, 12, 1), sep = ""),
paste("D", seq(1, 12, 1), sep = ""),
paste("H", seq(1, 12, 1), sep = ""))
# In the 30ºC dataset, row D in the plate was not left emtpy, so I'm going to change the IDs so that:
#   - row D in the plate is now row E in my dataset
#   - row E in the plate is now row F in my dataset
#   - row F in the plate is now row G in my dataset
#   - row G in the plate (empty) is now row D in my dataset
# SO REMEMBER THAT LABELS IN THE ANALYSIS FOR ROWS FROM D ARE CHANGED HERE!
new_colnames <- c("Time", "Temperature",
paste("A", seq(1, 12, 1), sep = ""),
paste("B", seq(1, 12, 1), sep = ""),
paste("C", seq(1, 12, 1), sep = ""),
paste("E", seq(1, 12, 1), sep = ""),
paste("F", seq(1, 12, 1), sep = ""),
paste("G", seq(1, 12, 1), sep = ""),
paste("D", seq(1, 12, 1), sep = ""),
paste("H", seq(1, 12, 1), sep = ""))
# Growth data at the different temperatures
growth_26 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250530-26C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Temperature = T..600)
growth_30 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250529-30C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Temperature = T..600)
growth_34 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250602-34C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Time = Time..s.,
Temperature = Temp....C.)
growth_37 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250602-37C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Time = Time..s.,
Temperature = Temp....C.)
# In the 30ºC dataset, row D in the plate was not left emtpy, so I'm going to change the IDs so that:
#   - row D in the plate is now row E in my dataset
#   - row E in the plate is now row F in my dataset
#   - row F in the plate is now row G in my dataset
#   - row G in the plate (empty) is now row D in my dataset
# SO REMEMBER THAT LABELS IN THE ANALYSIS FOR ROWS FROM D ARE CHANGED HERE!
new_colnames <- c("Time", "Temperature",
paste("A", seq(1, 12, 1), sep = ""),
paste("B", seq(1, 12, 1), sep = ""),
paste("C", seq(1, 12, 1), sep = ""),
paste("E", seq(1, 12, 1), sep = ""),
paste("F", seq(1, 12, 1), sep = ""),
paste("G", seq(1, 12, 1), sep = ""),
paste("D", seq(1, 12, 1), sep = ""),
paste("H", seq(1, 12, 1), sep = ""))
colnames(growth_30) <- new_colnames
# Sample IDs - replicate it a couple times changing IDs, since the samples in wells A, B and C are triplicates of the same sample, and the same for E, F, G
sample_ids <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/strains_for_pilot.xlsx", sep=""), sheetIndex = 1)
sample_ids_2 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl("A", GC96) ~ str_replace(GC96, "A", "B"),
grepl("E", GC96) ~ str_replace(GC96, "E", "F")))
sample_ids_3 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl("A", GC96) ~ str_replace(GC96, "A", "C"),
grepl("E", GC96) ~ str_replace(GC96, "E", "G")))
View(sample_ids_2)
colnames(sample_ids)
sample_ids <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/strains_for_pilot.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::select(GC96, Sys.Name, Std.Name, TS.allele, Lab.ID, Synthetase, Gene.name, Status)
sample_ids_2 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl("A", GC96) ~ str_replace(GC96, "A", "B"),
grepl("E", GC96) ~ str_replace(GC96, "E", "F")))
sample_ids_3 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl("A", GC96) ~ str_replace(GC96, "A", "C"),
grepl("E", GC96) ~ str_replace(GC96, "E", "G")))
sample_ids <- rbind(rbind(sample_ids, sample_ids_2), sample_ids_3)
sample_ids <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/strains_for_pilot.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::select(GC96, Sys.Name, Std.Name, TS.allele, Lab.ID, Synthetase, Gene.name, Status) %>%
dplyr::mutate(Sample.ID = paste(Sys.Name, "_1", sep=""))
sample_ids_2 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl("A", GC96) ~ str_replace(GC96, "A", "B"),
grepl("E", GC96) ~ str_replace(GC96, "E", "F")),
Sample.ID = paste(Sys.Name, "_2", sep=""))
sample_ids_3 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl("A", GC96) ~ str_replace(GC96, "A", "C"),
grepl("E", GC96) ~ str_replace(GC96, "E", "G")),
Sample.ID = paste(Sys.Name, "_3", sep=""))
sample_ids <- rbind(rbind(sample_ids, sample_ids_2), sample_ids_3)
df <- growth_26
old_colnames <- data.frame(colnames(df)[3:nrow(df)])
old_colnames <- data.frame(colnames(df))
temp_ids <- sample_ids %>%
dplyr::select(GC96, Sample.ID)
old_colnames <- left_join(old_colnames, temp_ids, by = "GC96")
colnames(old_colnames) <- c("GC96")
old_colnames <- left_join(old_colnames, temp_ids, by = "GC96")
View(old_colnames)
# Growth data at the different temperatures
growth_26 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250530-26C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Temperature = T..600)
growth_30 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250529-30C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Temperature = T..600)
growth_34 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250602-34C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Time = Time..s.,
Temperature = Temp....C.) %>%
dplyr::select(-Cycle.Nr.)
growth_37 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250602-37C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Time = Time..s.,
Temperature = Temp....C.) %>%
dplyr::select(-Cycle.Nr.)
# In the 30ºC dataset, row D in the plate was not left emtpy, so I'm going to change the IDs so that:
#   - row D in the plate is now row E in my dataset
#   - row E in the plate is now row F in my dataset
#   - row F in the plate is now row G in my dataset
#   - row G in the plate (empty) is now row D in my dataset
# SO REMEMBER THAT LABELS IN THE ANALYSIS FOR ROWS FROM D ARE CHANGED HERE!
new_colnames <- c("Time", "Temperature",
paste("A", seq(1, 12, 1), sep = ""),
paste("B", seq(1, 12, 1), sep = ""),
paste("C", seq(1, 12, 1), sep = ""),
paste("E", seq(1, 12, 1), sep = ""),
paste("F", seq(1, 12, 1), sep = ""),
paste("G", seq(1, 12, 1), sep = ""),
paste("D", seq(1, 12, 1), sep = ""),
paste("H", seq(1, 12, 1), sep = ""))
colnames(growth_30) <- new_colnames
# Sample IDs - replicate it a couple times changing IDs, since the samples in wells A, B and C are triplicates of the same sample, and the same for E, F, G
sample_ids <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/strains_for_pilot.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::select(GC96, Sys.Name, Std.Name, TS.allele, Lab.ID, Synthetase, Gene.name, Status) %>%
dplyr::mutate(Sample.ID = paste(Sys.Name, "_1", sep=""))
sample_ids_2 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl("A", GC96) ~ str_replace(GC96, "A", "B"),
grepl("E", GC96) ~ str_replace(GC96, "E", "F")),
Sample.ID = paste(Sys.Name, "_2", sep=""))
sample_ids_3 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl("A", GC96) ~ str_replace(GC96, "A", "C"),
grepl("E", GC96) ~ str_replace(GC96, "E", "G")),
Sample.ID = paste(Sys.Name, "_3", sep=""))
sample_ids <- rbind(rbind(sample_ids, sample_ids_2), sample_ids_3)
# Set new column names, take averages of the 3 replicates, set to long format and put all temperatures together --> ready to plot!
function_to_set_new_colnames <- function(df) {
old_colnames <- data.frame(colnames(df)[3:nrow(df)])
colnames(old_colnames) <- c("GC96")
temp_ids <- sample_ids %>%
dplyr::select(GC96, Sample.ID)
old_colnames <- left_join(old_colnames, temp_ids, by = "GC96")
new_colnames <- c("Time", "Temperature", as.character(old_colnames$Sample.ID))
colnames(df) <- new_colnames
return(df)
}
growth_26 <- function_to_set_new_colnames(growth_26)
growth_30 <- function_to_set_new_colnames(growth_30)
growth_34 <- function_to_set_new_colnames(growth_34)
growth_37 <- function_to_set_new_colnames(growth_37)
df <- growth_37
old_colnames <- data.frame(colnames(df)[3:nrow(df)])
colnames(old_colnames) <- c("GC96")
temp_ids <- sample_ids %>%
dplyr::select(GC96, Sample.ID)
old_colnames <- left_join(old_colnames, temp_ids, by = "GC96")
new_colnames <- c("Time", "Temperature", as.character(old_colnames$Sample.ID))
colnames(df) <- new_colnames
View(df)
# Growth data at the different temperatures
growth_26 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250530-26C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Temperature = T..600)
growth_30 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250529-30C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Temperature = T..600)
growth_34 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250602-34C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Time = Time..s.,
Temperature = Temp....C.) %>%
dplyr::select(-Cycle.Nr.)
growth_37 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250602-37C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Time = Time..s.,
Temperature = Temp....C.) %>%
dplyr::select(-Cycle.Nr.)
growth_37 <- na.omit(growth_37)
# In the 30ºC dataset, row D in the plate was not left emtpy, so I'm going to change the IDs so that:
#   - row D in the plate is now row E in my dataset
#   - row E in the plate is now row F in my dataset
#   - row F in the plate is now row G in my dataset
#   - row G in the plate (empty) is now row D in my dataset
# SO REMEMBER THAT LABELS IN THE ANALYSIS FOR ROWS FROM D ARE CHANGED HERE!
new_colnames <- c("Time", "Temperature",
paste("A", seq(1, 12, 1), sep = ""),
paste("B", seq(1, 12, 1), sep = ""),
paste("C", seq(1, 12, 1), sep = ""),
paste("E", seq(1, 12, 1), sep = ""),
paste("F", seq(1, 12, 1), sep = ""),
paste("G", seq(1, 12, 1), sep = ""),
paste("D", seq(1, 12, 1), sep = ""),
paste("H", seq(1, 12, 1), sep = ""))
colnames(growth_30) <- new_colnames
# Sample IDs - replicate it a couple times changing IDs, since the samples in wells A, B and C are triplicates of the same sample, and the same for E, F, G
sample_ids <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/strains_for_pilot.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::select(GC96, Sys.Name, Std.Name, TS.allele, Lab.ID, Synthetase, Gene.name, Status) %>%
dplyr::mutate(Sample.ID = paste(Sys.Name, "_1", sep=""))
sample_ids_2 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl("A", GC96) ~ str_replace(GC96, "A", "B"),
grepl("E", GC96) ~ str_replace(GC96, "E", "F")),
Sample.ID = paste(Sys.Name, "_2", sep=""))
sample_ids_3 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl("A", GC96) ~ str_replace(GC96, "A", "C"),
grepl("E", GC96) ~ str_replace(GC96, "E", "G")),
Sample.ID = paste(Sys.Name, "_3", sep=""))
sample_ids <- rbind(rbind(sample_ids, sample_ids_2), sample_ids_3)
# Set new column names, take averages of the 3 replicates, set to long format and put all temperatures together --> ready to plot!
function_to_set_new_colnames <- function(df) {
old_colnames <- data.frame(colnames(df)[3:nrow(df)])
colnames(old_colnames) <- c("GC96")
temp_ids <- sample_ids %>%
dplyr::select(GC96, Sample.ID)
old_colnames <- left_join(old_colnames, temp_ids, by = "GC96")
new_colnames <- c("Time", "Temperature", as.character(old_colnames$Sample.ID))
colnames(df) <- new_colnames
return(df)
}
growth_26 <- function_to_set_new_colnames(growth_26)
growth_30 <- function_to_set_new_colnames(growth_30)
growth_34 <- function_to_set_new_colnames(growth_34)
growth_37 <- function_to_set_new_colnames(growth_37)
