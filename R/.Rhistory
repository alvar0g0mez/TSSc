Temperature = Temp....C.) %>%
dplyr::select(-Cycle.Nr.)
growth_37 <- na.omit(growth_37)                     # IDK WHY THIS ONE COMES WITH A FEW NA ROWS AT THE BOTTOM :(
# In the 30ºC dataset, row D in the plate was not left emtpy, so I'm going to change the IDs so that:
#   - row D in the plate is now row E in my dataset
#   - row E in the plate is now row F in my dataset
#   - row F in the plate is now row G in my dataset
#   - row G in the plate (empty) is now row D in my dataset
# SO REMEMBER THAT LABELS IN THE ANALYSIS FOR ROWS FROM D ARE CHANGED HERE!
new_colnames <- c("Time", "Temperature",
paste("A", seq(1, 12, 1), sep = ""),
paste("B", seq(1, 12, 1), sep = ""),
paste("C", seq(1, 12, 1), sep = ""),
paste("E", seq(1, 12, 1), sep = ""),
paste("F", seq(1, 12, 1), sep = ""),
paste("G", seq(1, 12, 1), sep = ""),
paste("D", seq(1, 12, 1), sep = ""),
paste("H", seq(1, 12, 1), sep = ""))
colnames(growth_30) <- new_colnames
# Sample IDs - replicate it a couple times changing IDs, since the samples in wells A, B and C are triplicates of the same sample, and the same for E, F, G
sample_ids <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/strains_for_pilot.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::select(GC96, Sys.Name, Std.Name, TS.allele, Lab.ID, Synthetase, Gene.name, Status, Lethal_temp) %>%
dplyr::mutate(Sample.ID = paste(Sys.Name, "_1", sep=""))
sample_ids_2 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl("A", GC96) ~ str_replace(GC96, "A", "B"),
grepl("E", GC96) ~ str_replace(GC96, "E", "F")),
Sample.ID = paste(Sys.Name, "_2", sep=""))
sample_ids_3 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl("A", GC96) ~ str_replace(GC96, "A", "C"),
grepl("E", GC96) ~ str_replace(GC96, "E", "G")),
Sample.ID = paste(Sys.Name, "_3", sep=""))
sample_ids <- rbind(rbind(sample_ids, sample_ids_2), sample_ids_3)
# Need to add rows for the empty wells, otherwise I get an error later...
d_sample_ids <- data.frame(c(paste("D", seq(1, 12, 1), sep="")),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
paste("Empty_", seq(1, 12, 1), sep=""))
colnames(d_sample_ids) <- colnames(sample_ids)
knitr::opts_chunk$set(echo = TRUE)
library(xlsx)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggrepel)
library(stringr)
library(glue)
library(viridis)
library(platetools)
library(gridExtra)
set.seed(2025)
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Growth data at the different temperatures
growth_26 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250530-26C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Temperature = T..600)
growth_30 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250529-30C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Temperature = T..600)
growth_34 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250602-34C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Time = Time..s.,
Temperature = Temp....C.) %>%
dplyr::select(-Cycle.Nr.)
growth_34 <- na.omit(growth_34)                    # IDK WHY THIS ONE COMES WITH A FEW NA ROWS AT THE BOTTOM :(
growth_37 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250602-37C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Time = Time..s.,
Temperature = Temp....C.) %>%
dplyr::select(-Cycle.Nr.)
growth_37 <- na.omit(growth_37)                     # IDK WHY THIS ONE COMES WITH A FEW NA ROWS AT THE BOTTOM :(
# In the 30ºC dataset, row D in the plate was not left emtpy, so I'm going to change the IDs so that:
#   - row D in the plate is now row E in my dataset
#   - row E in the plate is now row F in my dataset
#   - row F in the plate is now row G in my dataset
#   - row G in the plate (empty) is now row D in my dataset
# SO REMEMBER THAT LABELS IN THE ANALYSIS FOR ROWS FROM D ARE CHANGED HERE!
new_colnames <- c("Time", "Temperature",
paste("A", seq(1, 12, 1), sep = ""),
paste("B", seq(1, 12, 1), sep = ""),
paste("C", seq(1, 12, 1), sep = ""),
paste("E", seq(1, 12, 1), sep = ""),
paste("F", seq(1, 12, 1), sep = ""),
paste("G", seq(1, 12, 1), sep = ""),
paste("D", seq(1, 12, 1), sep = ""),
paste("H", seq(1, 12, 1), sep = ""))
colnames(growth_30) <- new_colnames
# Sample IDs - replicate it a couple times changing IDs, since the samples in wells A, B and C are triplicates of the same sample, and the same for E, F, G
sample_ids <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/strains_for_pilot.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::select(GC96, Sys.Name, Std.Name, TS.allele, Lab.ID, Synthetase, Gene.name, Status, Lethal_temp) %>%
dplyr::mutate(Sample.ID = paste(Sys.Name, "_1", sep=""))
sample_ids_2 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl("A", GC96) ~ str_replace(GC96, "A", "B"),
grepl("E", GC96) ~ str_replace(GC96, "E", "F")),
Sample.ID = paste(Sys.Name, "_2", sep=""))
sample_ids_3 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl("A", GC96) ~ str_replace(GC96, "A", "C"),
grepl("E", GC96) ~ str_replace(GC96, "E", "G")),
Sample.ID = paste(Sys.Name, "_3", sep=""))
sample_ids <- rbind(rbind(sample_ids, sample_ids_2), sample_ids_3)
# Need to add rows for the empty wells, otherwise I get an error later...
d_sample_ids <- data.frame(c(paste("D", seq(1, 12, 1), sep="")),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
paste("Empty_", seq(1, 12, 1), sep=""),
rep("Empty", 12))
colnames(d_sample_ids) <- colnames(sample_ids)
h_sample_ids <- data.frame(c(paste("H", seq(1, 12, 1), sep="")),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
paste("Empty_", seq(13, 24, 1), sep=""),
rep("Empty", 12))
colnames(h_sample_ids) <- colnames(sample_ids)
sample_ids <- rbind(rbind(sample_ids, d_sample_ids), h_sample_ids)
rm(sample_ids_2, sample_ids_3, d_sample_ids, h_sample_ids)
# Set new column names, take averages of the 3 replicates, set to long format and put all temperatures together --> ready to plot!
## Set new colnames
function_to_set_new_colnames <- function(df) {
old_colnames <- data.frame(colnames(df)[3:ncol(df)])
colnames(old_colnames) <- c("GC96")
temp_ids <- sample_ids %>%
dplyr::select(GC96, Sample.ID)
old_colnames <- left_join(old_colnames, temp_ids, by = "GC96")
new_colnames <- c("Time", "Temperature", as.character(old_colnames$Sample.ID))
colnames(df) <- new_colnames
return(df)
}
growth_26 <- function_to_set_new_colnames(growth_26)
growth_30 <- function_to_set_new_colnames(growth_30)
growth_34 <- function_to_set_new_colnames(growth_34)
growth_37 <- function_to_set_new_colnames(growth_37)
## Normalize to time = 0 - NOT DOING THIS FOR NOW, PROBABLY IMPLEMENT IT LATER, REMOVE THE FIRST 2 COLS AND THEN USE APPLY?
normalize_to_time_0 <- function(df) {
keep_first_columns <- df %>%
dplyr::select(Time, Temperature)
only_data <- df %>%
dplyr::select(-c(Time, Temperature))
only_data <- as.data.frame(t(apply(as.matrix(only_data), 1, function(x) x/as.matrix(only_data)[1,])))
out <- cbind(keep_first_columns, only_data)
return(out)
}
growth_26_norm <- normalize_to_time_0(growth_26)
growth_26 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250530-26C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Temperature = T..600)
growth_30 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250529-30C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Temperature = T..600)
growth_34 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250602-34C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Time = Time..s.,
Temperature = Temp....C.) %>%
dplyr::select(-Cycle.Nr.)
growth_34 <- na.omit(growth_34)                    # IDK WHY THIS ONE COMES WITH A FEW NA ROWS AT THE BOTTOM :(
growth_37 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250602-37C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Time = Time..s.,
Temperature = Temp....C.) %>%
dplyr::select(-Cycle.Nr.)
growth_37 <- na.omit(growth_37)                     # IDK WHY THIS ONE COMES WITH A FEW NA ROWS AT THE BOTTOM :(
# In the 30ºC dataset, row D in the plate was not left emtpy, so I'm going to change the IDs so that:
#   - row D in the plate is now row E in my dataset
#   - row E in the plate is now row F in my dataset
#   - row F in the plate is now row G in my dataset
#   - row G in the plate (empty) is now row D in my dataset
# SO REMEMBER THAT LABELS IN THE ANALYSIS FOR ROWS FROM D ARE CHANGED HERE!
new_colnames <- c("Time", "Temperature",
paste("A", seq(1, 12, 1), sep = ""),
paste("B", seq(1, 12, 1), sep = ""),
paste("C", seq(1, 12, 1), sep = ""),
paste("E", seq(1, 12, 1), sep = ""),
paste("F", seq(1, 12, 1), sep = ""),
paste("G", seq(1, 12, 1), sep = ""),
paste("D", seq(1, 12, 1), sep = ""),
paste("H", seq(1, 12, 1), sep = ""))
colnames(growth_30) <- new_colnames
# Sample IDs - replicate it a couple times changing IDs, since the samples in wells A, B and C are triplicates of the same sample, and the same for E, F, G
sample_ids <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/strains_for_pilot.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::select(GC96, Sys.Name, Std.Name, TS.allele, Lab.ID, Synthetase, Gene.name, Status, Lethal_temp) %>%
dplyr::mutate(Sample.ID = paste(Sys.Name, "_1", sep=""))
sample_ids_2 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl("A", GC96) ~ str_replace(GC96, "A", "B"),
grepl("E", GC96) ~ str_replace(GC96, "E", "F")),
Sample.ID = paste(Sys.Name, "_2", sep=""))
sample_ids_3 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl("A", GC96) ~ str_replace(GC96, "A", "C"),
grepl("E", GC96) ~ str_replace(GC96, "E", "G")),
Sample.ID = paste(Sys.Name, "_3", sep=""))
sample_ids <- rbind(rbind(sample_ids, sample_ids_2), sample_ids_3)
# Need to add rows for the empty wells, otherwise I get an error later...
d_sample_ids <- data.frame(c(paste("D", seq(1, 12, 1), sep="")),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
paste("Empty_", seq(1, 12, 1), sep=""),
rep("Empty", 12))
colnames(d_sample_ids) <- colnames(sample_ids)
h_sample_ids <- data.frame(c(paste("H", seq(1, 12, 1), sep="")),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
paste("Empty_", seq(13, 24, 1), sep=""),
rep("Empty", 12))
colnames(h_sample_ids) <- colnames(sample_ids)
View(h_sample_ids)
knitr::opts_chunk$set(echo = TRUE)
library(xlsx)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggrepel)
library(stringr)
library(glue)
library(viridis)
library(platetools)
library(gridExtra)
set.seed(2025)
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Growth data at the different temperatures
growth_26 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250530-26C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Temperature = T..600)
growth_30 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250529-30C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Temperature = T..600)
growth_34 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250602-34C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Time = Time..s.,
Temperature = Temp....C.) %>%
dplyr::select(-Cycle.Nr.)
growth_34 <- na.omit(growth_34)                    # IDK WHY THIS ONE COMES WITH A FEW NA ROWS AT THE BOTTOM :(
growth_37 <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/20250602-37C.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::rename(Time = Time..s.,
Temperature = Temp....C.) %>%
dplyr::select(-Cycle.Nr.)
growth_37 <- na.omit(growth_37)                     # IDK WHY THIS ONE COMES WITH A FEW NA ROWS AT THE BOTTOM :(
# In the 30ºC dataset, row D in the plate was not left emtpy, so I'm going to change the IDs so that:
#   - row D in the plate is now row E in my dataset
#   - row E in the plate is now row F in my dataset
#   - row F in the plate is now row G in my dataset
#   - row G in the plate (empty) is now row D in my dataset
# SO REMEMBER THAT LABELS IN THE ANALYSIS FOR ROWS FROM D ARE CHANGED HERE!
new_colnames <- c("Time", "Temperature",
paste("A", seq(1, 12, 1), sep = ""),
paste("B", seq(1, 12, 1), sep = ""),
paste("C", seq(1, 12, 1), sep = ""),
paste("E", seq(1, 12, 1), sep = ""),
paste("F", seq(1, 12, 1), sep = ""),
paste("G", seq(1, 12, 1), sep = ""),
paste("D", seq(1, 12, 1), sep = ""),
paste("H", seq(1, 12, 1), sep = ""))
colnames(growth_30) <- new_colnames
# Sample IDs - replicate it a couple times changing IDs, since the samples in wells A, B and C are triplicates of the same sample, and the same for E, F, G
sample_ids <- read.xlsx(file = paste(base_dir, "/TSSC/Data/pilot/pre_test_growth_curves/strains_for_pilot.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::select(GC96, Sys.Name, Std.Name, TS.allele, Lab.ID, Synthetase, Gene.name, Status, Lethal_temp) %>%
dplyr::mutate(Sample.ID = paste(Sys.Name, "_1", sep=""))
sample_ids_2 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl("A", GC96) ~ str_replace(GC96, "A", "B"),
grepl("E", GC96) ~ str_replace(GC96, "E", "F")),
Sample.ID = paste(Sys.Name, "_2", sep=""))
sample_ids_3 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl("A", GC96) ~ str_replace(GC96, "A", "C"),
grepl("E", GC96) ~ str_replace(GC96, "E", "G")),
Sample.ID = paste(Sys.Name, "_3", sep=""))
sample_ids <- rbind(rbind(sample_ids, sample_ids_2), sample_ids_3)
# Need to add rows for the empty wells, otherwise I get an error later...
d_sample_ids <- data.frame(c(paste("D", seq(1, 12, 1), sep="")),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
paste("Empty_", seq(1, 12, 1), sep=""))
colnames(d_sample_ids) <- colnames(sample_ids)
h_sample_ids <- data.frame(c(paste("H", seq(1, 12, 1), sep="")),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
paste("Empty_", seq(13, 24, 1), sep=""))
colnames(h_sample_ids) <- colnames(sample_ids)
sample_ids <- rbind(rbind(sample_ids, d_sample_ids), h_sample_ids)
rm(sample_ids_2, sample_ids_3, d_sample_ids, h_sample_ids)
# Set new column names, take averages of the 3 replicates, set to long format and put all temperatures together --> ready to plot!
## Set new colnames
function_to_set_new_colnames <- function(df) {
old_colnames <- data.frame(colnames(df)[3:ncol(df)])
colnames(old_colnames) <- c("GC96")
temp_ids <- sample_ids %>%
dplyr::select(GC96, Sample.ID)
old_colnames <- left_join(old_colnames, temp_ids, by = "GC96")
new_colnames <- c("Time", "Temperature", as.character(old_colnames$Sample.ID))
colnames(df) <- new_colnames
return(df)
}
growth_26 <- function_to_set_new_colnames(growth_26)
growth_30 <- function_to_set_new_colnames(growth_30)
growth_34 <- function_to_set_new_colnames(growth_34)
growth_37 <- function_to_set_new_colnames(growth_37)
## Normalize to time = 0 - NOT DOING THIS FOR NOW, PROBABLY IMPLEMENT IT LATER, REMOVE THE FIRST 2 COLS AND THEN USE APPLY?
normalize_to_time_0 <- function(df) {
keep_first_columns <- df %>%
dplyr::select(Time, Temperature)
only_data <- df %>%
dplyr::select(-c(Time, Temperature))
only_data <- as.data.frame(t(apply(as.matrix(only_data), 1, function(x) x/as.matrix(only_data)[1,])))
out <- cbind(keep_first_columns, only_data)
return(out)
}
growth_26_norm <- normalize_to_time_0(growth_26)
growth_30_norm <- normalize_to_time_0(growth_30)
growth_34_norm <- normalize_to_time_0(growth_34)
growth_37_norm <- normalize_to_time_0(growth_37)
## Take averages
# Iterate over datasets
# For each of them, iterate over the strains, getting their averages and creating a new column for each of them
# Probably as indicated here: https://www.statology.org/dplyr-mean-for-multiple-columns/
strains <- unique(sample_ids$Sys.Name)
function_to_get_means_across_replicates <- function(df) {
# Come up with the average columns
for (i in 1:length(strains)) {
strain <- strains[i]
df <- df %>%
rowwise() %>%
dplyr::mutate("{paste0(strain)}" := mean(c_across(contains(strain))), .after = Temperature)
}
# Remove all other columns
df <- df %>%
dplyr::select(Time, Temperature, any_of(strains))
# Return the finished dataframe
return(df)
}
growth_26_avg <- function_to_get_means_across_replicates(growth_26)
growth_30_avg <- function_to_get_means_across_replicates(growth_30)
growth_34_avg <- function_to_get_means_across_replicates(growth_34)
growth_37_avg <- function_to_get_means_across_replicates(growth_37)
growth_26_avg_norm <- function_to_get_means_across_replicates(growth_26_norm)
growth_30_avg_norm <- function_to_get_means_across_replicates(growth_30_norm)
growth_34_avg_norm <- function_to_get_means_across_replicates(growth_34_norm)
growth_37_avg_norm <- function_to_get_means_across_replicates(growth_37_norm)
## Add a column to each of these with the temperature that they were supposed to have, then I can pivot them to long version
make_long_and_add_fixed_temp <- function(df, fixed_temp) {
df <- df %>%
dplyr::mutate(Temp_set = fixed_temp, .after = Temperature) %>%
dplyr::rename(Temp_observed = Temperature) %>%
pivot_longer(!c(Time, Temp_set, Temp_observed), names_to = "Strain", values_to = "OD_raw")
return(df)
}
growth_26_avg <- make_long_and_add_fixed_temp(growth_26_avg, 26)
growth_30_avg <- make_long_and_add_fixed_temp(growth_30_avg, 30)
growth_34_avg <- make_long_and_add_fixed_temp(growth_34_avg, 34)
growth_37_avg <- make_long_and_add_fixed_temp(growth_37_avg, 37)
growth_26_avg_norm <- make_long_and_add_fixed_temp(growth_26_avg_norm, 26)
growth_30_avg_norm <- make_long_and_add_fixed_temp(growth_30_avg_norm, 30)
growth_34_avg_norm <- make_long_and_add_fixed_temp(growth_34_avg_norm, 34)
growth_37_avg_norm <- make_long_and_add_fixed_temp(growth_37_avg_norm, 37)
## Get them all together into the final dataset I'll use for plotting
growth_long_full_raw <- rbind(growth_37_avg, rbind(growth_34_avg, rbind(growth_30_avg, growth_26_avg)))
growth_long_full_norm <- rbind(growth_37_avg_norm, rbind(growth_34_avg_norm, rbind(growth_30_avg_norm, growth_26_avg_norm)))
# First two temperatures were in one incubator, next two in another one, should check the names and put them somewhere in the graph
# They should be in the second sheet of each of these Excel files
ggplot() +
geom_line(data = growth_26, aes(x = Time, y = Temperature), col = "darkgreen", linewidth = 1) +
geom_line(data = growth_30, aes(x = Time, y = Temperature), col = "blue", linewidth = 1) +
geom_line(data = growth_34, aes(x = Time, y = Temperature), col = "purple", linewidth = 1) +
geom_line(data = growth_37, aes(x = Time, y = Temperature), col = "orange", linewidth = 1) +
geom_hline(yintercept = 26, col = "black") +
geom_hline(yintercept = 30, col = "black") +
geom_hline(yintercept = 34, col = "black") +
geom_hline(yintercept = 37, col = "black") +
theme_light() +
xlab("Time (s)") +
ylab("Temperature") +
labs(title = "How well did the incubators maintain their assigned temperature?")
plot_list <- list()
strains <- sort(unique(sample_ids$Sys.Name))
for (i in 1:length(strains)) {
strain <- strains[i]
strain_type <- sample_ids$Status[sample_ids$Sys.Name == strain][1]
gene_name <- sample_ids$Gene.name[sample_ids$Sys.Name == strain][1]
temp <- growth_long_full_raw %>%
dplyr::filter(Strain == strain)
if (strain_type == "Synthetase") {
plot_list[[i]] <- ggplot(data = temp, aes(x = Time, y = OD_raw, group = as.factor(Temp_set), col = as.factor(Temp_set))) +
geom_line(linewidth = 1) +
theme_light() +
xlab("Time (s)") +
ylab("OD 600") +
labs(title = glue("Growth curves for strain {strain} - {strain_type}"),
subtitle = glue("{gene_name}"),
col = "Temperature (ºC)") +
coord_cartesian(ylim = c(0, 1.25))
} else
if (strain_type == "Lethal") {
lethal_temp <- sample_ids$Lethal_temp[sample_ids$Sys.Name == strain][1]
plot_list[[i]] <- ggplot(data = temp, aes(x = Time, y = OD_raw, group = as.factor(Temp_set), col = as.factor(Temp_set))) +
geom_line(linewidth = 1) +
theme_light() +
xlab("Time (s)") +
ylab("OD 600") +
labs(title = glue("Growth curves for strain {strain} - {strain_type}"),
subtitle = glue("{lethal_temp}"),
col = "Temperature (ºC)") +
coord_cartesian(ylim = c(0, 1.25))
}
else
{
plot_list[[i]] <- ggplot(data = temp, aes(x = Time, y = OD_raw, group = as.factor(Temp_set), col = as.factor(Temp_set))) +
geom_line(linewidth = 1) +
theme_light() +
xlab("Time (s)") +
ylab("OD 600") +
labs(title = glue("Growth curves for strain {strain} - {strain_type}"),
col = "Temperature (ºC)") +
coord_cartesian(ylim = c(0, 1.25))
}
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file = paste(base_dir, "TSSC/Output/Plots/growth_curves/gcs_trna_synthetases_raw.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=3, ncol=3),
width = 15, height = 9
)
plot_list <- list()
temp <- sample_ids %>%
dplyr::arrange(Status)
strains <- unique(temp$Sys.Name)
for (i in 1:length(strains)) {
strain <- strains[i]
strain_type <- sample_ids$Status[sample_ids$Sys.Name == strain][1]
gene_name <- sample_ids$Gene.name[sample_ids$Sys.Name == strain][1]
temp <- growth_long_full_norm %>%
dplyr::filter(Strain == strain)
if (strain_type == "Synthetase") {
plot_list[[i]] <- ggplot(data = temp, aes(x = Time, y = OD_raw, group = as.factor(Temp_set), col = as.factor(Temp_set))) +
geom_line(linewidth = 1) +
theme_light() +
xlab("Time (s)") +
ylab("Ratio to OD at T0") +
labs(title = glue("Growth curves for strain {strain} - {strain_type}"),
subtitle = glue("{gene_name}"),
col = "Temperature (ºC)") +
coord_cartesian(ylim = c(0, 12.5))
} else
if (strain_type == "Lethal") {
lethal_temp <- sample_ids$Lethal_temp[sample_ids$Sys.Name == strain][1]
plot_list[[i]] <- ggplot(data = temp, aes(x = Time, y = OD_raw, group = as.factor(Temp_set), col = as.factor(Temp_set))) +
geom_line(linewidth = 1) +
theme_light() +
xlab("Time (s)") +
ylab("OD 600") +
labs(title = glue("Growth curves for strain {strain} - {strain_type}"),
subtitle = glue("{lethal_temp}"),
col = "Temperature (ºC)") +
coord_cartesian(ylim = c(0, 12.5))
}
else
{
plot_list[[i]] <- ggplot(data = temp, aes(x = Time, y = OD_raw, group = as.factor(Temp_set), col = as.factor(Temp_set))) +
geom_line(linewidth = 1) +
theme_light() +
xlab("Time (s)") +
ylab("Ratio to OD at T0") +
labs(title = glue("Growth curves for strain {strain} - {strain_type}"),
col = "Temperature (ºC)") +
coord_cartesian(ylim = c(0, 12.5))
}
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file = paste(base_dir, "TSSC/Output/Plots/growth_curves/gcs_trna_synthetases_norm_to_t0.pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=3, ncol=3),
width = 15, height = 9
)
