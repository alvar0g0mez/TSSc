TRUE ~ paste(LETTERS[Row384], Col384, sep="")))
# 4. Save this dataframe
fwrite(sample_layout, paste(base_dir, "Data/Boone_lab/sample_layout.csv", sep=""))
View(sample_layout)
knitr::opts_chunk$set(echo = TRUE)
library(xlsx)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggrepel)
library(stringr)
library(glue)
library(viridis)
library(platetools)
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Synthetases dataframe
synthetases <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/trna_synthetases.csv", sep="")))
# Agar growth data
growth_agar <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Boone_lab/Growth/Mine/Processed_by_them/growth_agar.tsv", sep="")))
# Master tRNA dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
# Amino acid information dataset
amino_acids <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Other/GtRNAdb/amino_acids.csv", sep="")))
# Layout of samples in the 384-well plates we got from the Boone lab
sample_layout <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Boone_lab/sample_layout.csv", sep="")))
# Grab the tRNA-synthetases that are in the library
trna_synths_in_library <- synthetases[synthetases$Gene.secondaryIdentifier %in% growth_agar$Sys.Name,]
trna_synths_in_library <- trna_synths_in_library[order(trna_synths_in_library$Gene.name),]
# Check, out of the tRNA genes that couldn't be KOd in the tRNA KO library, how many correspond to which amino acids - what defines this? I EXPLORE THIS FURTHER IN 1.11. IN THE MAIN TRNA .RMD FILE
sort(table(master_dataset$Isotype_from_anticodon[master_dataset$KOd == "No"]))
# For each 384-well plate I need to come up with a separate dataframe, with only the column with the appropriate well IDs, and another column I want to color the wells by
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(values = as.numeric(Synthetase == "Yes")) %>%
dplyr::select(values, Well_ID_non_unique)
raw_map(data = temp$values,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA synthetases TS alleles")) +
theme_dark() +
scale_fill_viridis() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "TSSC/Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
# Set up
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/TSSc/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/TSSC/"
}
# Libraries
library(dplyr)
library(tidyr)
library(xlsx)
library(data.table)
##################################################################################
# 0. Load data
growth_agar <- as.data.frame(fread(paste(base_dir, "Data/Boone_lab/Growth/Mine/Processed_by_them/growth_agar.tsv", sep="")))
sick_strains_when_sent <- as.data.frame(read.xlsx(paste(base_dir, "Data/Boone_lab/Sick_strains/20250131_TSV8-coordinates_very_sick_strains.xlsx", sep=""), 2))
no_growth_after_pinning <- as.data.frame(read.xlsx(paste(base_dir, "Data/Boone_lab/Sick_strains/20250131_TSV8-coordinates_very_sick_strains.xlsx", sep=""), 3))
synthetases <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/trna_synthetases.csv"))
# Growth agar is just as I got it from them
# Sick strains I think it also comes from them, the strains that had barely grown when they sent them
# "no growth after pinning" are the ones that were not supposed to be sick, but which didn't grow after Wenxi pinned them - Wenxi made this Excel
# Synthetases - this dataframe is from the tRNA_KOs project, but I want to add a column here saying which TS alleles are for a tRNA synthetase
# 1. Put all this information together into a single dataframe
sick_strains_when_sent <- sick_strains_when_sent %>%
filter(actually_healthy_after_pinning == "No") %>%
mutate(Well_ID = paste(plate, row, column, sep="_"))
no_growth_after_pinning <- no_growth_after_pinning %>%
mutate(Well_ID = paste(plate, row, column, sep="_"))
sample_layout <- growth_agar %>%
dplyr::select(Plate384, Row384, Col384, Sys.Name, Std.Name, TS.allele, Lab.ID, Notes, SB.notes) %>%
mutate(Well_ID = paste(Plate384, Row384, Col384, sep="_"),
sick_when_sent = case_when(Well_ID %in% sick_strains_when_sent$Well_ID ~ "Yes",
TRUE ~ "No"),
no_growth_after_pinning = case_when(Well_ID %in% no_growth_after_pinning$Well_ID ~ "Yes",    # These are non-sick strains which didn't grow for Wenxi
TRUE ~ "No"),
Available = case_when((sick_when_sent == "No" & no_growth_after_pinning == "No") ~ "Yes",
TRUE ~ "No"),
Synthetase = case_when(Sys.Name %in% synthetases$Gene.secondaryIdentifier ~ "Yes",
TRUE ~ "No"))
# 2. Add a column with with well IDs in the "traditional" manner - for platetools
sample_layout <- sample_layout %>%
mutate(Well_ID_non_unique = case_when(nchar(as.character(Col384)) == 1 ~ paste(LETTERS[Row384], 0, Col384, sep=""),
TRUE ~ paste(LETTERS[Row384], Col384, sep="")))
# 3. Save this dataframe
fwrite(sample_layout, paste(base_dir, "Data/Boone_lab/sample_layout.csv", sep=""))
knitr::opts_chunk$set(echo = TRUE)
library(xlsx)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggrepel)
library(stringr)
library(glue)
library(viridis)
library(platetools)
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Synthetases dataframe
synthetases <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/trna_synthetases.csv", sep="")))
# Agar growth data
growth_agar <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Boone_lab/Growth/Mine/Processed_by_them/growth_agar.tsv", sep="")))
# Master tRNA dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
# Amino acid information dataset
amino_acids <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Other/GtRNAdb/amino_acids.csv", sep="")))
# Layout of samples in the 384-well plates we got from the Boone lab
sample_layout <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Boone_lab/sample_layout.csv", sep="")))
# Grab the tRNA-synthetases that are in the library
trna_synths_in_library <- synthetases[synthetases$Gene.secondaryIdentifier %in% growth_agar$Sys.Name,]
trna_synths_in_library <- trna_synths_in_library[order(trna_synths_in_library$Gene.name),]
# Check, out of the tRNA genes that couldn't be KOd in the tRNA KO library, how many correspond to which amino acids - what defines this? I EXPLORE THIS FURTHER IN 1.11. IN THE MAIN TRNA .RMD FILE
sort(table(master_dataset$Isotype_from_anticodon[master_dataset$KOd == "No"]))
# For each 384-well plate I need to come up with a separate dataframe, with only the column with the appropriate well IDs, and another column I want to color the wells by
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(Strain_type = case_when(Synthetase == "Yes" & !grepl("exclude", SB.notes, ignore.case = T) ~ "Synthetase",
grepl("exclude", SB.notes, ignore.case = T) ~ "Exclude this well",
TRUE ~ "Other")) %>%
dplyr::select(Strain_type, Well_ID_non_unique)
raw_map(data = temp$Strain_type,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA synthetases TS alleles")) +
theme_dark() +
scale_fill_viridis_c() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "TSSC/Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
# For each 384-well plate I need to come up with a separate dataframe, with only the column with the appropriate well IDs, and another column I want to color the wells by
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(Strain_type = case_when(Synthetase == "Yes" & !grepl("exclude", SB.notes, ignore.case = T) ~ "Synthetase",
grepl("exclude", SB.notes, ignore.case = T) ~ "Exclude this well",
TRUE ~ "Other")) %>%
dplyr::select(Strain_type, Well_ID_non_unique)
raw_map(data = as.factor(temp$Strain_type),
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA synthetases TS alleles")) +
theme_dark() +
scale_fill_viridis_c() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "TSSC/Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
# For each 384-well plate I need to come up with a separate dataframe, with only the column with the appropriate well IDs, and another column I want to color the wells by
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(Strain_type = case_when(Synthetase == "Yes" & !grepl("exclude", SB.notes, ignore.case = T) ~ "Synthetase",
grepl("exclude", SB.notes, ignore.case = T) ~ "Exclude this well",
TRUE ~ "Other")) %>%
dplyr::select(Strain_type, Well_ID_non_unique)
raw_map(data = temp$Strain_type,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA synthetases TS alleles")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "TSSC/Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
# For each 384-well plate I need to come up with a separate dataframe, with only the column with the appropriate well IDs, and another column I want to color the wells by
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(Strain_type = case_when(Synthetase == "Yes" & !grepl("exclude", SB.notes, ignore.case = T) ~ "Synthetase",
grepl("exclude", SB.notes, ignore.case = T) ~ "Exclude this well",
TRUE ~ "Other")) %>%
dplyr::select(Strain_type, Well_ID_non_unique)
raw_map(data = temp$Strain_type,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA synthetases TS alleles")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6)) +
labs(fill = "Strain type")
ggsave(paste(base_dir, "TSSC/Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
# For each 384-well plate I need to come up with a separate dataframe, with only the column with the appropriate well IDs, and another column I want to color the wells by
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(Strain_type = case_when(Synthetase == "Yes" & !grepl("exclude", SB.notes, ignore.case = T) ~ "Synthetase",
grepl("exclude", SB.notes, ignore.case = T) ~ "Exclude this well",
grepl("Wild type", Notes, ignore.case = T) ~ "BY4741",
grepl("BY4741 + p13623", Notes, ignore.case = T) ~ "BY4741 + p13623"
TRUE ~ "Other")) %>%
# For each 384-well plate I need to come up with a separate dataframe, with only the column with the appropriate well IDs, and another column I want to color the wells by
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(Strain_type = case_when(Synthetase == "Yes" & !grepl("exclude", SB.notes, ignore.case = T) ~ "Synthetase",
grepl("exclude", SB.notes, ignore.case = T) ~ "Exclude this well",
grepl("Wild type", Notes, ignore.case = T) ~ "BY4741",
grepl("BY4741 + p13623", Notes, ignore.case = T) ~ "BY4741 + p13623",
TRUE ~ "Other")) %>%
dplyr::select(Strain_type, Well_ID_non_unique)
raw_map(data = temp$Strain_type,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA synthetases TS alleles")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6)) +
labs(fill = "Strain type")
ggsave(paste(base_dir, "TSSC/Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
# For each 384-well plate I need to come up with a separate dataframe, with only the column with the appropriate well IDs, and another column I want to color the wells by
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(Strain_type = case_when(Synthetase == "Yes" & !grepl("exclude", SB.notes, ignore.case = T) ~ "Synthetase",
grepl("exclude", SB.notes, ignore.case = T) ~ "Exclude this well",
grepl("Wild type", Notes, ignore.case = T) ~ "BY4741",
grepl("BY4741 + p13623", Notes, ignore.case = T) ~ "BY4741 + p13623",
TRUE ~ "Other")) %>%
dplyr::select(Strain_type, Well_ID_non_unique)
raw_map(data = temp$Strain_type,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA synthetases TS alleles")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6)) +
labs(fill = "Strain type")
ggsave(paste(base_dir, "TSSC/Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
# For each 384-well plate I need to come up with a separate dataframe, with only the column with the appropriate well IDs, and another column I want to color the wells by
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(Strain_type = case_when(Synthetase == "Yes" & !grepl("exclude", SB.notes, ignore.case = T) ~ "Synthetase",
grepl("exclude", SB.notes, ignore.case = T) ~ "Exclude this well",
grepl("Wild type", Notes, ignore.case = T) ~ "BY4741",
grepl("control added by Fang", Notes, ignore.case = T) ~ "BY4741 + p13623",
TRUE ~ "Other")) %>%
dplyr::select(Strain_type, Well_ID_non_unique)
raw_map(data = temp$Strain_type,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA synthetases TS alleles")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6)) +
labs(fill = "Strain type")
ggsave(paste(base_dir, "TSSC/Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
# For each 384-well plate I need to come up with a separate dataframe, with only the column with the appropriate well IDs, and another column I want to color the wells by
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(Strain_type = case_when(Synthetase == "Yes" & !grepl("exclude", SB.notes, ignore.case = T) ~ "Synthetase",
grepl("exclude", SB.notes, ignore.case = T) ~ "Exclude this well",
#grepl("Wild type", Notes, ignore.case = T) ~ "BY4741",
#grepl("control added by Fang", Notes, ignore.case = T) ~ "BY4741 + p13623",
TRUE ~ "Other")) %>%
dplyr::select(Strain_type, Well_ID_non_unique)
raw_map(data = temp$Strain_type,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA synthetases TS alleles")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6)) +
labs(fill = "Strain type")
ggsave(paste(base_dir, "TSSC/Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
growth_agar <- growth_agar %>%
mutate(possible_selection = case_when(Plate384 == 4 & (Row384 == which(letters == "f")|Row384 == which(letters == "g")) ~ TRUE,
TRUE ~ FALSE))
ggplot(data = growth_agar, aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(possible_selection))) +
geom_point() +
geom_abline() +
labs(col = "Ratio 26ºC/22ºC") +
theme_light() +
xlab("AUC at 22ºC") +
ylab("AUC at 26ºC")
strains_for_pilot <- sample_layout %>%
filter(Sys.Name %in% synthetases$Gene.secondaryIdentifier | grepl("Wild type", Notes, ignore.case = T) | grepl("control added by Fang"))
strains_for_pilot <- sample_layout %>%
filter(Sys.Name %in% synthetases$Gene.secondaryIdentifier | grepl("Wild type", Notes, ignore.case = T) | grepl("control added by Fang", Notes, ignore.case = T))
View(strains_for_pilot)
strains_for_pilot <- sample_layout %>%
filter(Sys.Name %in% synthetases$Gene.secondaryIdentifier | grepl("Wild type", Notes, ignore.case = T) | grepl("control added by Fang", Notes, ignore.case = T),
Available == "Yes")
strains_for_pilot <- sample_layout %>%
filter(Sys.Name %in% synthetases$Gene.secondaryIdentifier | grepl("Wild type", Notes, ignore.case = T) | grepl("control added by Fang", Notes, ignore.case = T),
Available == "Yes",
!grepl("exclude", SB.notes, ignore.case = T))
strains_for_pilot <- sample_layout %>%
filter(Sys.Name %in% synthetases$Gene.secondaryIdentifier | grepl("Wild type", Notes, ignore.case = T) | grepl("control added by Fang", Notes, ignore.case = T),
Available == "Yes",
!grepl("exclude", SB.notes, ignore.case = T)) %>%
dplyr::select(-c(Notes, SB.notes))
strains_for_pilot <- sample_layout %>%
filter(Sys.Name %in% synthetases$Gene.secondaryIdentifier | grepl("Wild type", Notes, ignore.case = T) | grepl("control added by Fang", Notes, ignore.case = T),
Available == "Yes",
!grepl("exclude", SB.notes, ignore.case = T))
strains_for_pilot <- sample_layout %>%
filter(Sys.Name %in% synthetases$Gene.secondaryIdentifier | grepl("Wild type", Notes, ignore.case = T) | grepl("control added by Fang", Notes, ignore.case = T),
Available == "Yes",
!grepl("exclude", SB.notes, ignore.case = T)) %>%
dplyr::select(-c(Notes))
strains_for_pilot <- sample_layout %>%
filter(Sys.Name %in% synthetases$Gene.secondaryIdentifier | grepl("Wild type", Notes, ignore.case = T) | grepl("control added by Fang", Notes, ignore.case = T),
Available == "Yes",
!grepl("exclude", SB.notes, ignore.case = T)) %>%
dplyr::select(-c(SB.notes))
# Actually let me make sure I only have 4 rows for the controls, one coming from each plate
strains_for_pilot_1 <- strains_for_pilot %>%
filter(Notes == "")
# Actually let me make sure I only have 4 rows for the controls, one coming from each plate
strains_for_pilot_1 <- strains_for_pilot %>%
filter(!grepl("control added", Notes, ignore.case = T))
strains_for_pilot_2 <- strains_for_pilot %>%
filter(grepl("control added", Notes, ignore.case = T))
strains_for_pilot_2 <- strains_for_pilot %>%
filter(grepl("control added", Notes, ignore.case = T)) %>%
distinct(Plate384, .keep_all = T)
View(strains_for_pilot_2)
strains_for_pilot <- rbind(strains_for_pilot_1, strains_for_pilot_2)
96/16
strains_for_pilot <- sample_layout %>%
filter(Sys.Name %in% synthetases$Gene.secondaryIdentifier | grepl("Wild type", Notes, ignore.case = T) | grepl("control added by Fang", Notes, ignore.case = T),
Available == "Yes",
!grepl("exclude", SB.notes, ignore.case = T)) %>%
dplyr::select(-c(SB.notes))
# Actually let me make sure I only have 4 rows for the controls, one coming from each plate
strains_for_pilot_1 <- strains_for_pilot %>%
filter(!grepl("control added", Notes, ignore.case = T))
strains_for_pilot_2 <- strains_for_pilot %>%
filter(grepl("control added", Notes, ignore.case = T)) %>%
distinct(Plate384, .keep_all = T)
strains_for_pilot_final <- rbind(strains_for_pilot_1, strains_for_pilot_2)
# Add manually 2 more WT strains so as to make it a total of 16, just because 96 is a multiple of 16
strains_for_pilot_final[nrow(strains_for_pilot_final)+1,] <-
View(strains_for_pilot_final)
# Add manually 2 more WT strains so as to make it a total of 16, just because 96 is a multiple of 16
strains_for_pilot_final[nrow(strains_for_pilot_final)+1,] <- strains_for_pilot[7,]
strains_for_pilot_final[nrow(strains_for_pilot_final)+1,] <- strains_for_pilot[36,]
rownames(strains_for_pilot_final) <- NULL
# Remove last column before sending it to Wenxi, I don't think it's useful at all and it could be confusing
strains_for_pilot_final <- strains_for_pilot_final %>%
dplyr::select(-Well_ID_non_unique)
write.xlsx(x = strains_for_pilot_final,
file = "C:/MyStuff/strains_for_pilot.xlsx",
row.names = F)
write.xlsx(x = strains_for_pilot_final,
file = paste(base_dir, "TSSC/Data/Pilot/setup/strains_for_pilot.xlsx", sep=""),
row.names = F)
knitr::opts_chunk$set(echo = TRUE)
library(xlsx)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggrepel)
library(stringr)
library(glue)
library(viridis)
library(platetools)
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Synthetases dataframe
synthetases <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/trna_synthetases.csv", sep="")))
# Agar growth data
growth_agar <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Boone_lab/Growth/Mine/Processed_by_them/growth_agar.tsv", sep="")))
# Master tRNA dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
# Amino acid information dataset
amino_acids <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Other/GtRNAdb/amino_acids.csv", sep="")))
# Layout of samples in the 384-well plates we got from the Boone lab
sample_layout <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Boone_lab/sample_layout.csv", sep="")))
# Grab the tRNA-synthetases that are in the library
trna_synths_in_library <- synthetases[synthetases$Gene.secondaryIdentifier %in% growth_agar$Sys.Name,]
trna_synths_in_library <- trna_synths_in_library[order(trna_synths_in_library$Gene.name),]
# Check, out of the tRNA genes that couldn't be KOd in the tRNA KO library, how many correspond to which amino acids - what defines this? I EXPLORE THIS FURTHER IN 1.11. IN THE MAIN TRNA .RMD FILE
sort(table(master_dataset$Isotype_from_anticodon[master_dataset$KOd == "No"]))
# For each 384-well plate I need to come up with a separate dataframe, with only the column with the appropriate well IDs, and another column I want to color the wells by
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(Strain_type = case_when(Synthetase == "Yes" & !grepl("exclude", SB.notes, ignore.case = T) ~ "Synthetase",
grepl("exclude", SB.notes, ignore.case = T) ~ "Exclude this well",
#grepl("Wild type", Notes, ignore.case = T) ~ "BY4741",
#grepl("control added by Fang", Notes, ignore.case = T) ~ "BY4741 + p13623",
TRUE ~ "Other")) %>%
dplyr::select(Strain_type, Well_ID_non_unique)
raw_map(data = temp$Strain_type,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA synthetases TS alleles")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6)) +
labs(fill = "Strain type")
ggsave(paste(base_dir, "TSSC/Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
yeastmine <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/alliancemine_results_2024-11-20T11-19-04.tsv")))
yeastmine <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep="")))
View(yeastmine)
# 3. Add a column from yeastmine with the gene definition
yeastmine <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep=""))) %>%
dplyr::select(Gene.name, Gene.secondaryIdentifier)
# 3. Add a column from yeastmine with the gene definition
yeastmine <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep=""))) %>%
dplyr::select(Gene.name, Gene.secondaryIdentifier) %>%
dplyr::rename(Sys.Name = Gene.secondaryIdentifier)
sample_layout <- left_join(sample_layout, yeastmine, by = "Sys.Name")
# 4. Save this dataframe
fwrite(sample_layout, paste(base_dir, "TSSC/Data/Boone_lab/sample_layout.csv", sep=""))
# Set up
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Libraries
library(dplyr)
library(tidyr)
library(xlsx)
library(data.table)
##################################################################################
# 0. Load data
growth_agar <- as.data.frame(fread(paste(base_dir, "Data/Boone_lab/Growth/Mine/Processed_by_them/growth_agar.tsv", sep="")))
# Set up
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Libraries
library(dplyr)
library(tidyr)
library(xlsx)
library(data.table)
##################################################################################
# 0. Load data
growth_agar <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Boone_lab/Growth/Mine/Processed_by_them/growth_agar.tsv", sep="")))
sick_strains_when_sent <- as.data.frame(read.xlsx(paste(base_dir, "TSSC/Data/Boone_lab/Sick_strains/20250131_TSV8-coordinates_very_sick_strains.xlsx", sep=""), 2))
no_growth_after_pinning <- as.data.frame(read.xlsx(paste(base_dir, "TSSC/Data/Boone_lab/Sick_strains/20250131_TSV8-coordinates_very_sick_strains.xlsx", sep=""), 3))
synthetases <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/trna_synthetases.csv"))
# Growth agar is just as I got it from them
# Sick strains I think it also comes from them, the strains that had barely grown when they sent them
# "no growth after pinning" are the ones that were not supposed to be sick, but which didn't grow after Wenxi pinned them - Wenxi made this Excel
# Synthetases - this dataframe is from the tRNA_KOs project, but I want to add a column here saying which TS alleles are for a tRNA synthetase
# 1. Put all this information together into a single dataframe
sick_strains_when_sent <- sick_strains_when_sent %>%
filter(actually_healthy_after_pinning == "No") %>%
mutate(Well_ID = paste(plate, row, column, sep="_"))
no_growth_after_pinning <- no_growth_after_pinning %>%
mutate(Well_ID = paste(plate, row, column, sep="_"))
sample_layout <- growth_agar %>%
dplyr::select(Plate384, Row384, Col384, Sys.Name, Std.Name, TS.allele, Lab.ID, Notes, SB.notes) %>%
mutate(Well_ID = paste(Plate384, Row384, Col384, sep="_"),
sick_when_sent = case_when(Well_ID %in% sick_strains_when_sent$Well_ID ~ "Yes",
TRUE ~ "No"),
no_growth_after_pinning = case_when(Well_ID %in% no_growth_after_pinning$Well_ID ~ "Yes",    # These are non-sick strains which didn't grow for Wenxi
TRUE ~ "No"),
Available = case_when((sick_when_sent == "No" & no_growth_after_pinning == "No") ~ "Yes",
TRUE ~ "No"),
Synthetase = case_when(Sys.Name %in% synthetases$Gene.secondaryIdentifier ~ "Yes",
TRUE ~ "No"))
# 2. Add a column with with well IDs in the "traditional" manner - for platetools
sample_layout <- sample_layout %>%
mutate(Well_ID_non_unique = case_when(nchar(as.character(Col384)) == 1 ~ paste(LETTERS[Row384], 0, Col384, sep=""),
TRUE ~ paste(LETTERS[Row384], Col384, sep="")))
# 3. Add a column from yeastmine with the gene definition
yeastmine <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep=""))) %>%
dplyr::select(Gene.name, Gene.secondaryIdentifier) %>%
dplyr::rename(Sys.Name = Gene.secondaryIdentifier)
sample_layout <- left_join(sample_layout, yeastmine, by = "Sys.Name")
# 4. Save this dataframe
fwrite(sample_layout, paste(base_dir, "TSSC/Data/Boone_lab/sample_layout.csv", sep=""))
# Are there any other ts alleles that are related to tRNAs?
check <- sample_layout %>%
filter(grepl("trna", Gene.name, ignore.case = T))
View(check)
# Are there any other ts alleles that are related to tRNAs?
check <- sample_layout %>%
filter(grepl("trna", Gene.name, ignore.case = T) & Available == "Yes")
