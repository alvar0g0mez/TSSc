if (which_try == "first_try") {
ggplot() +
geom_line(data = subset(growth_long_full_norm, Temp_set == 26), aes(x = Time, y = Temp_observed), col = "darkgreen", linewidth = 1) +
geom_line(data = subset(growth_long_full_norm, Temp_set == 30), aes(x = Time, y = Temp_observed), col = "blue", linewidth = 1) +
geom_line(data = subset(growth_long_full_norm, Temp_set == 34), aes(x = Time, y = Temp_observed), col = "purple", linewidth = 1) +
geom_line(data = subset(growth_long_full_norm, Temp_set == 37), aes(x = Time, y = Temp_observed), col = "orange", linewidth = 1) +
geom_hline(yintercept = 26, col = "black") +
geom_hline(yintercept = 30, col = "black") +
geom_hline(yintercept = 34, col = "black") +
geom_hline(yintercept = 37, col = "black") +
theme_light() +
xlab("Time (h)") +
ylab("Temperature") +
labs(title = "How well did the incubators maintain their assigned temperature?",
subtitle = try_for_plots)
} else
if (which_try == "second_try") {
ggplot() +
geom_line(data = subset(growth_long_full_norm, Temp_set == 22), aes(x = Time, y = Temp_observed), col = "orange", linewidth = 1) +
geom_line(data = subset(growth_long_full_norm, Temp_set == 26), aes(x = Time, y = Temp_observed), col = "darkgreen", linewidth = 1) +
geom_line(data = subset(growth_long_full_norm, Temp_set == 30), aes(x = Time, y = Temp_observed), col = "blue", linewidth = 1) +
geom_line(data = subset(growth_long_full_norm, Temp_set == 34), aes(x = Time, y = Temp_observed), col = "purple", linewidth = 1) +
geom_hline(yintercept = 22, col = "black") +
geom_hline(yintercept = 26, col = "black") +
geom_hline(yintercept = 30, col = "black") +
geom_hline(yintercept = 34, col = "black") +
theme_light() +
xlab("Time (h)") +
ylab("Temperature") +
labs(title = "How well did the incubators maintain their assigned temperature?",
subtitle = try_for_plots)
}
ggplot(data = subset(growth_long_full_raw, Time == 0),
aes(x = Strain, y = OD_raw, col = as.factor(Temp_set))) +
geom_point() +
theme_light() +
labs(title = "ODs at time = 0, for each strain at each temperature",
subtitle = try_for_plots,
col = "Temperature") +
ylab("OD") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
#t_26_just_data <- growth_26_avg %>%
#  dplyr::select(-c(Time, Temperature))
#t_30_just_data <- growth_30_avg %>%
#  dplyr::select(-c(Time, Temperature))
#t_34_just_data <- growth_34_avg %>%
#  dplyr::select(-c(Time, Temperature))
#
#
#hist(as.matrix(t_26_just_data))
#hist(as.matrix(t_30_just_data))
#hist(as.matrix(t_34_just_data))
plot_list <- list()
strains <- sort(unique(sample_ids$Sys.Name))
for (i in 1:length(strains)) {
strain <- strains[i]
strain_type <- sample_ids$Status[sample_ids$Sys.Name == strain][1]
gene_name <- sample_ids$Gene.name[sample_ids$Sys.Name == strain][1]
temp <- growth_long_full_raw %>%
dplyr::filter(Strain == strain)
if (strain_type == "Synthetase") {
lethal_temp <- sample_ids$Lethal_temp[sample_ids$Sys.Name == strain][1]
plot_list[[i]] <- ggplot(data = temp, aes(x = Time, y = OD_raw, group = as.factor(Temp_set), col = as.factor(Temp_set))) +
geom_line(linewidth = 1) +
theme_light() +
xlab("Time (h)") +
ylab("OD 600") +
labs(title = glue("{strain} - {strain_type}"),
subtitle = glue("{gene_name} - {lethal_temp}"),
col = "Temperature (ºC)") +
coord_cartesian(ylim = c(0, 1.25))
} else
if (strain_type == "Lethal") {
lethal_temp <- sample_ids$Lethal_temp[sample_ids$Sys.Name == strain][1]
plot_list[[i]] <- ggplot(data = temp, aes(x = Time, y = OD_raw, group = as.factor(Temp_set), col = as.factor(Temp_set))) +
geom_line(linewidth = 1) +
theme_light() +
xlab("Time (h)") +
ylab("OD 600") +
labs(title = glue("{strain} - {strain_type}"),
subtitle = glue("{lethal_temp}"),
col = "Temperature (ºC)") +
coord_cartesian(ylim = c(0, 1.25))
}
else
{
plot_list[[i]] <- ggplot(data = temp, aes(x = Time, y = OD_raw, group = as.factor(Temp_set), col = as.factor(Temp_set))) +
geom_line(linewidth = 1) +
theme_light() +
xlab("Time (h)") +
ylab("OD 600") +
labs(title = glue("{strain} - {strain_type}"),
col = "Temperature (ºC)") +
coord_cartesian(ylim = c(0, 1.25))
}
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file = paste(base_dir, "TSSC/Output/Plots/pilot/growth_curves/gcs_trna_synthetases_raw_", which_try, ".pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=3, ncol=3),
width = 15, height = 9
)
for (i in 1:length(plot_list)) {
print(plot_list[[i]])
}
plot_list <- list()
temp <- sample_ids %>%
dplyr::arrange(Status)
strains <- unique(temp$Sys.Name)
for (i in 1:length(strains)) {
strain <- strains[i]
strain_type <- sample_ids$Status[sample_ids$Sys.Name == strain][1]
gene_name <- sample_ids$Gene.name[sample_ids$Sys.Name == strain][1]
temp <- growth_long_full_norm %>%
dplyr::filter(Strain == strain)
if (strain_type == "Synthetase") {
lethal_temp <- sample_ids$Lethal_temp[sample_ids$Sys.Name == strain][1]
plot_list[[i]] <- ggplot(data = temp, aes(x = Time, y = OD_norm, group = as.factor(Temp_set), col = as.factor(Temp_set))) +
geom_line(linewidth = 1) +
theme_light() +
xlab("Time (h)") +
ylab("Ratio to OD at T0") +
labs(title = glue("{strain} - {strain_type}"),
subtitle = glue("{gene_name} - {lethal_temp}"),
col = "Temperature (ºC)") +
coord_cartesian(ylim = c(0, 12.5))
} else
if (strain_type == "Lethal") {
lethal_temp <- sample_ids$Lethal_temp[sample_ids$Sys.Name == strain][1]
plot_list[[i]] <- ggplot(data = temp, aes(x = Time, y = OD_norm, group = as.factor(Temp_set), col = as.factor(Temp_set))) +
geom_line(linewidth = 1) +
theme_light() +
xlab("Time (h)") +
ylab("OD 600") +
labs(title = glue("{strain} - {strain_type}"),
subtitle = glue("{lethal_temp}"),
col = "Temperature (ºC)") +
coord_cartesian(ylim = c(0, 12.5))
}
else
{
plot_list[[i]] <- ggplot(data = temp, aes(x = Time, y = OD_norm, group = as.factor(Temp_set), col = as.factor(Temp_set))) +
geom_line(linewidth = 1) +
theme_light() +
xlab("Time (h)") +
ylab("Ratio to OD at T0") +
labs(title = glue("{strain} - {strain_type}"),
col = "Temperature (ºC)") +
coord_cartesian(ylim = c(0, 12.5))
}
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file = paste(base_dir, "TSSC/Output/Plots/pilot/growth_curves/gcs_trna_synthetases_norm_to_t0_", which_try, ".pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=3, ncol=3),
width = 15, height = 9
)
for (i in 1:length(plot_list)) {
print(plot_list[[i]])
}
growth_long_full_raw_OD_05 <- growth_long_full_raw %>%
dplyr::filter(OD_raw > 0.45 & OD_raw < 0.55)
plot_list <- list()
strains <- sort(sample_ids$Sys.Name[sample_ids$Status == "Synthetase"|sample_ids$Status == "Control"|sample_ids$Status == "BY4741"])
for (i in 1:length(strains)) {
strain <- strains[[i]]
temp <- growth_long_full_raw_OD_05 %>%
dplyr::filter(Strain == strain)
temp$Temp_set <- as.factor(temp$Temp_set)
plot_list[[i]] <- ggplot(data = temp, aes(x = Temp_set, y = Time, group = Temp_set)) +
geom_boxplot(aes(fill = Temp_set)) +
theme_light() +
labs(title = glue("{strain}"),
fill = "Temperature") +
xlab("Temperature") +
ylab("Time (h)")
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file = paste(base_dir, "TSSC/Output/Plots/pilot/growth_curves/gcs_trna_synthetases_raw_OD_05_boxplots_", which_try, ".pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=3, ncol=3),
width = 15, height = 9
)
for (i in 1:length(plot_list)) {
print(plot_list[[i]])
}
# Synthetases
synthetases <- fread(paste(base_dir, "tRNA_KOs/Data/basic/trna_synthetases.csv", sep=""))
# Supplementary table from Li et al., 2011 (contains the information of the references)
li_et_al <- fread(paste(base_dir, "TSSC/Data/Articles/Li_et_al_2011/Li_et_al_S1.csv", sep="")) %>%
dplyr::select(Sys.Name, Reference.or.Source, ts.on.SC) %>%
dplyr::rename(Gene.secondaryIdentifier = Sys.Name) %>%
dplyr::filter(Gene.secondaryIdentifier %in% synthetases$Gene.secondaryIdentifier)
print(li_et_al$Reference.or.Source)
# Grab the strains we want to use for the proteomics experiment: the tRNA synthetase ts strains, and 2 of the replicates of the control strain
strains_for_proteomics <- sample_ids %>%
dplyr::filter(Status == "Synthetase"|Sys.Name == "Control_1"|Sys.Name == "Control_2")
# Add columns with the average OD of each strain at each temperature
temperatures <- unique(growth_long_full_raw$Temp_set)
strains <- strains_for_proteomics$Sys.Name
# Iterate over temperatures
for (i in 1:length(temperatures)) {
temperature <- temperatures[i]
avg_ods_this_temp_20 <- c()
avg_ods_this_temp_48 <- c()
# For each temperature, iterates over strains, and get the average OD for each of them (at this temperature - at 20h and 48h)
for (j in 1:length(strains)) {
strain <- strains[j]
temp_20 <- growth_long_full_raw %>%
dplyr::filter(Strain == strain & Temp_set == temperature & Time > 19.5 & Time < 20.5)     # Time is not always exactly 20h
temp_48 <- growth_long_full_raw %>%
dplyr::filter(Strain == strain & Temp_set == temperature & Time > 47.5 & Time < 48.5)     # Time is not always exactly 48h
avg_ods_this_temp_20 <- c(avg_ods_this_temp_20, mean(temp_20$OD_raw))
avg_ods_this_temp_48 <- c(avg_ods_this_temp_48, mean(temp_48$OD_raw))
}
# Add the vectors containing the collected average ODs at 20h and 48h at this temperature to the output dataframe
strains_for_proteomics[[paste("OD_at_", temperature, "_20h", sep="")]] <- avg_ods_this_temp_20
strains_for_proteomics[[paste("OD_at_", temperature, "_48h", sep="")]] <- avg_ods_this_temp_48
}
# Add two columns which summarize whether this strain is viable (OD > 0.2) at 48h - at 30ºC and 34ºC
strains_for_proteomics <- strains_for_proteomics %>%
dplyr::mutate(Viable_at_30 = case_when(OD_at_30_48h > 0.2 ~ "Yes",
TRUE ~ "No"),
Viable_at_34 = case_when(OD_at_34_48h > 0.2 ~ "Yes",
TRUE ~ "No"))
# Get 2 versions of this dataframe: one for the first 3 rows (to be harvested at ~20h), another one for the last 3 rows (to be harvested at ~48h)
# Each of these is first triplicated (since each row in the dataframe represents a strain, and we'll have 3 replicates of each), then each of the dataframes is randomized separately, so the sample layout will not be the same across the first 3 rows and across the last 3 - I hope this is feasible with the Rotor or Pixl or whatever it is?? If I give it the location of each of them in the old plate?? So that we can randomize the samples, which I think is good practice, but obviously so that Wenxi doesn't have to do it manually
# Anyway, after randomizing the rows in each dataframe, I replicate this three times
strains_for_proteomics_randomized_1 <- slice(strains_for_proteomics, rep(1:nrow(strains_for_proteomics), 3))                            # Get triplicates of the rows
strains_for_proteomics_randomized_1 <- strains_for_proteomics_randomized_1[sample(nrow(strains_for_proteomics_randomized_1)),] %>%      # Randomize row order
dplyr::mutate(Column = rep(seq(from = 1, to = 12, by = 1), 3),                                                                        # Assign columns
Row = c(rep("A", 12), rep("B", 12), rep("C", 12))) %>%                                                                  # Assign rows
add_well_IDs(column_numbers_col = "Column",
row_letters_col = "Row")
strains_for_proteomics_randomized_2 <- slice(strains_for_proteomics, rep(1:nrow(strains_for_proteomics), 3))                            # Get triplicates of the rows
strains_for_proteomics_randomized_2 <- strains_for_proteomics_randomized_2[sample(nrow(strains_for_proteomics_randomized_2)),] %>%      # Randomize row order
dplyr::mutate(Column = rep(seq(from = 1, to = 12, by = 1), 3),                                                                        # Assign columns
Row = c(rep("E", 12), rep("F", 12), rep("G", 12))) %>%                                                                  # Assign rows
add_well_IDs(column_numbers_col = "Column",
row_letters_col = "Row")
# Join the 2 so we get the whole layout for the plate
strains_for_proteomics_final <- rbind(strains_for_proteomics_randomized_1, strains_for_proteomics_randomized_2)
# Color by strain
raw_map(data = strains_for_proteomics_final$Sys.Name,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
ggtitle("Sample layout for proteomics experiment") +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width
guides(fill = guide_legend(ncol = 2)) +
labs(fill = "Strain")
# Color by strain type
raw_map(data = strains_for_proteomics_final$Status,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(title = "Sample layout for proteomics experiment",
fill = "Strain type")
# Color by viable at 30ºC
raw_map(data = strains_for_proteomics_final$Viable_at_30,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(title = "Sample layout for proteomics experiment",
fill = "Viable at 30ºC")
# Color by viable at 34ºC
raw_map(data = strains_for_proteomics_final$Viable_at_34,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(title = "Sample layout for proteomics experiment",
fill = "Viable at 34ºC")
# Fix well IDs
sample_ids_new_2 <- fix_well_ids_with_no_0s(sample_ids_new_2, "GC96")
create_full_sample_ids_for_a_plate <- function(df,
sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp,
normalized_to_t0,
long_version,
wrong_plate) {
# First of all we make sure we have the timepoints on the rows and the wells on the columns,
# since one of the machines produces a dataframe in the opposite orientation
if (sum(grepl("Cycle.Nr.", colnames(df))) == 1) {
new_colnames <- df$Cycle.Nr.
df <- df %>%
dplyr::select(-Cycle.Nr.)
df <- as.data.frame(t(df))
colnames(df) <- new_colnames
}
# Set the first two colnames to be "Time" and "Temperature", also get rid of rownames
colnames(df)[1] <- "Time"
colnames(df)[2] <- "Temperature"
rownames(df) <- NULL
# Remove NAs in case full NA rows were introduced by Excel
df <- na.omit(df)
# There was a plate in which D row was not left empty (30ºC, first try) - need to do this horrible thing to take care of that
if (wrong_plate == T) {
##   - row D in the plate is now row E in my dataset
##   - row E in the plate is now row F in my dataset
##   - row F in the plate is now row G in my dataset
##   - row G in the plate (empty) is now row D in my dataset
## SO REMEMBER THAT LABELS IN THE ANALYSIS FOR ROWS FROM D ARE CHANGED HERE!
new_colnames <- c("Time", "Temperature",
paste("A", seq(1, 12, 1), sep = ""),
paste("B", seq(1, 12, 1), sep = ""),
paste("C", seq(1, 12, 1), sep = ""),
paste("E", seq(1, 12, 1), sep = ""),
paste("F", seq(1, 12, 1), sep = ""),
paste("G", seq(1, 12, 1), sep = ""),
paste("D", seq(1, 12, 1), sep = ""),
paste("H", seq(1, 12, 1), sep = ""))
colnames(df) <- new_colnames
}
# Extract the names of the rows that contain the replicates
r1 <- replicates[[1]][1]
r2 <- replicates[[1]][2]
r3 <- replicates[[1]][3]
r4 <- replicates[[2]][1]
r5 <- replicates[[2]][2]
r6 <- replicates[[2]][3]
empty_1 <- empty_rows[1]
empty_2 <- empty_rows[2]
# Sample IDs - replicate it a couple times changing IDs, since the samples in wells A, B and C are triplicates of the same sample, and the same for E, F, G
sample_ids_2 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl(r1, GC96) ~ str_replace(GC96, r1, r2),
grepl(r4, GC96) ~ str_replace(GC96, r4, r5)),
Sample.ID = paste(Sys.Name, "_2", sep=""))
sample_ids_3 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl(r1, GC96) ~ str_replace(GC96, r1, r3),
grepl(r4, GC96) ~ str_replace(GC96, r4, r6)),
Sample.ID = paste(Sys.Name, "_3", sep=""))
sample_ids_new <- rbind(rbind(sample_ids, sample_ids_2), sample_ids_3)
# Need to add rows for the empty wells, otherwise I get an error later...
d_sample_ids <- create_empty_df(prefix = empty_1,
n_cols = ncol(sample_ids_new),
well_ID_numbers = seq(1, 12, 1))
colnames(d_sample_ids) <- colnames(sample_ids_new)
h_sample_ids <- create_empty_df(prefix = empty_2,
n_cols = ncol(sample_ids_new),
well_ID_numbers = seq(13, 24, 1))
colnames(h_sample_ids) <- colnames(sample_ids_new)
sample_ids_new_2 <- rbind(rbind(sample_ids_new, d_sample_ids), h_sample_ids)
return(sample_ids_new_2)
}
create_full_sample_ids_for_a_plate <- function(df,
sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp,
normalized_to_t0,
long_version,
wrong_plate) {
# First of all we make sure we have the timepoints on the rows and the wells on the columns,
# since one of the machines produces a dataframe in the opposite orientation
if (sum(grepl("Cycle.Nr.", colnames(df))) == 1) {
new_colnames <- df$Cycle.Nr.
df <- df %>%
dplyr::select(-Cycle.Nr.)
df <- as.data.frame(t(df))
colnames(df) <- new_colnames
}
# Set the first two colnames to be "Time" and "Temperature", also get rid of rownames
colnames(df)[1] <- "Time"
colnames(df)[2] <- "Temperature"
rownames(df) <- NULL
# Remove NAs in case full NA rows were introduced by Excel
df <- na.omit(df)
# There was a plate in which D row was not left empty (30ºC, first try) - need to do this horrible thing to take care of that
if (wrong_plate == T) {
##   - row D in the plate is now row E in my dataset
##   - row E in the plate is now row F in my dataset
##   - row F in the plate is now row G in my dataset
##   - row G in the plate (empty) is now row D in my dataset
## SO REMEMBER THAT LABELS IN THE ANALYSIS FOR ROWS FROM D ARE CHANGED HERE!
new_colnames <- c("Time", "Temperature",
paste("A", seq(1, 12, 1), sep = ""),
paste("B", seq(1, 12, 1), sep = ""),
paste("C", seq(1, 12, 1), sep = ""),
paste("E", seq(1, 12, 1), sep = ""),
paste("F", seq(1, 12, 1), sep = ""),
paste("G", seq(1, 12, 1), sep = ""),
paste("D", seq(1, 12, 1), sep = ""),
paste("H", seq(1, 12, 1), sep = ""))
colnames(df) <- new_colnames
}
# Extract the names of the rows that contain the replicates
r1 <- replicates[[1]][1]
r2 <- replicates[[1]][2]
r3 <- replicates[[1]][3]
r4 <- replicates[[2]][1]
r5 <- replicates[[2]][2]
r6 <- replicates[[2]][3]
empty_1 <- empty_rows[1]
empty_2 <- empty_rows[2]
# Sample IDs - replicate it a couple times changing IDs, since the samples in wells A, B and C are triplicates of the same sample, and the same for E, F, G
sample_ids_2 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl(r1, GC96) ~ str_replace(GC96, r1, r2),
grepl(r4, GC96) ~ str_replace(GC96, r4, r5)),
Sample.ID = paste(Sys.Name, "_2", sep=""))
sample_ids_3 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl(r1, GC96) ~ str_replace(GC96, r1, r3),
grepl(r4, GC96) ~ str_replace(GC96, r4, r6)),
Sample.ID = paste(Sys.Name, "_3", sep=""))
sample_ids_new <- rbind(rbind(sample_ids, sample_ids_2), sample_ids_3)
# Need to add rows for the empty wells, otherwise I get an error later...
d_sample_ids <- create_empty_df(prefix = empty_1,
n_cols = ncol(sample_ids_new),
well_ID_numbers = seq(1, 12, 1))
colnames(d_sample_ids) <- colnames(sample_ids_new)
h_sample_ids <- create_empty_df(prefix = empty_2,
n_cols = ncol(sample_ids_new),
well_ID_numbers = seq(13, 24, 1))
colnames(h_sample_ids) <- colnames(sample_ids_new)
sample_ids_new_2 <- rbind(rbind(sample_ids_new, d_sample_ids), h_sample_ids)
return(sample_ids_new_2)
}
# Come up with the full sample IDs of the plate
sample_ids_new_2 <- create_full_sample_ids_for_a_plate(df = growth_26,
sample_ids = sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp = 26,
normalized_to_t0 = F,
long_version = T,
wrong_plate = F)
# Fix well IDs
sample_ids_new_2 <- fix_well_ids_with_no_0s(sample_ids_new_2, "GC96")
View(sample_ids_new_2)
# Color by viable at 34ºC
raw_map(data = sample_ids_new_2$Sys.Name,
well = sample_ids_new_2$GC96_new,
plate = 96) +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(title = "Sample layout for proteomics experiment",
fill = "Viable at 34ºC")
# Color by viable at 34ºC
raw_map(data = sample_ids_new_2$Sys.Name,
well = sample_ids_new_2$GC96,
plate = 96) +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(title = "Sample layout for proteomics experiment",
fill = "Viable at 34ºC")
# Color by viable at 34ºC
raw_map(data = sample_ids_new_2$Sys.Name,
well = sample_ids_new_2$GC96,
plate = 96) +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm'),         # change legend key width
legend.text = element_text(size = 6),
legend.title = element_text(size = 7)) +
labs(title = "Sample layout for proteomics experiment",
fill = "Viable at 34ºC")
# Color by viable at 34ºC
raw_map(data = sample_ids_new_2$Sys.Name,
well = sample_ids_new_2$GC96,
plate = 96) +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(title = "Sample layout for proteomics experiment",
fill = "Viable at 34ºC")
# Color by viable at 34ºC
raw_map(data = sample_ids_new_2$Sys.Name,
well = sample_ids_new_2$GC96,
plate = 96) +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(title = "Sample layout for growth curves",
fill = "Strains")
View(sample_ids)
