geom_point() +
theme_light() +
geom_text_repel(data = subset(master_by_anticodon, Perc_KOd_genes_per_anticodon < 0.8), aes(x = Anticodon, y = Perc_KOd_genes_per_anticodon, label = Anticodon))
# Plots by anticodon
master_by_anticodon <- master_dataset %>%
distinct(Anticodon, .keep_all = T)
## Just the percentage of KOd genes per anticodon
ggplot(data = master_by_anticodon, aes(x = Anticodon, y = Perc_KOd_genes_per_anticodon)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(master_by_anticodon, Perc_KOd_genes_per_anticodon < 0.8), aes(x = Anticodon, y = Perc_KOd_genes_per_anticodon, label = Anticodon))
## Just the percentage of KOd genes per anticodon
ggplot(data = master_by_anticodon, aes(x = Anticodon, y = Perc_KOd_genes_per_anticodon)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(master_by_anticodon, Perc_KOd_genes_per_anticodon < 0.7), aes(x = Anticodon, y = Perc_KOd_genes_per_anticodon, label = Anticodon))
## Just the percentage of KOd genes per amino acid
ggplot(data = master_by_amino_acid, aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(master_by_amino_acid, Perc_KOd_genes_per_amino_acid < 0.8), aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid, label = Isotype_from_anticodon)) +
theme(axis.text.x = element_blank())
## Just the percentage of KOd genes per anticodon
ggplot(data = master_by_anticodon, aes(x = Anticodon, y = Perc_KOd_genes_per_anticodon)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(master_by_anticodon, Perc_KOd_genes_per_anticodon < 0.7), aes(x = Anticodon, y = Perc_KOd_genes_per_anticodon, label = Anticodon)) +
theme(axis.text.x = element_blank())
View(master_dataset)
## Just the percentage of KOd genes per amino acid
ggplot(data = master_by_amino_acid, aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(master_by_amino_acid, Perc_KOd_genes_per_amino_acid < 0.8), aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid, label = Isotype_from_anticodon)) +
theme(axis.text.x = element_blank()) +
xlab("Amino acid") +
ylab("% of KOd genes")
## Just the percentage of KOd genes per amino acid
ggplot(data = master_by_amino_acid, aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(master_by_amino_acid, Perc_KOd_genes_per_amino_acid < 0.8), aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid, label = Isotype_from_anticodon)) +
theme(axis.text.x = element_blank()) +
xlab("Amino acid") +
ylab("% of tRNA-genes carrying this amino acid that were KOd")
## Just the percentage of KOd genes per amino acid
ggplot(data = master_by_amino_acid, aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(master_by_amino_acid, Perc_KOd_genes_per_amino_acid < 0.8), aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid, label = Isotype_from_anticodon)) +
theme(axis.text.x = element_blank()) +
xlab("Amino acid") +
ylab("% of genes KOd") +
labs(title = "% of tRNA-genes carrying each amino acid that were KOd")
## Just the percentage of KOd genes per anticodon
ggplot(data = master_by_anticodon, aes(x = Anticodon, y = Perc_KOd_genes_per_anticodon)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(master_by_anticodon, Perc_KOd_genes_per_anticodon < 0.7), aes(x = Anticodon, y = Perc_KOd_genes_per_anticodon, label = Anticodon)) +
theme(axis.text.x = element_blank()) +
labs(title = "% of tRNA-genes carrying each amino acid that were KOd") +
ylab("% of genes KOd")
## Just the percentage of KOd genes per anticodon
ggplot(data = master_by_anticodon, aes(x = Anticodon, y = Perc_KOd_genes_per_anticodon)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(master_by_anticodon, Perc_KOd_genes_per_anticodon < 0.7), aes(x = Anticodon, y = Perc_KOd_genes_per_anticodon, label = Anticodon)) +
theme(axis.text.x = element_blank()) +
labs(title = "% of tRNA-genes with each anticodon that were KOd") +
ylab("% of genes KOd")
# How many tRNA genes are there for each amino acid?
ggplot(data = master_by_amino_acid, aes(x = Isotype_from_anticodon, y = Number_of_tRNAs_loading_this_aa)) +
geom_point() +
theme_light() +
theme(axis.text.x = element_blank()) +
xlab("Amino acid") +
ylab("% of genes KOd")
# How many tRNA genes are there for each amino acid?
ggplot(data = master_by_amino_acid, aes(x = Isotype_from_anticodon, y = Number_of_tRNAs_loading_this_aa)) +
geom_point() +
theme_light() +
theme(axis.text.x = element_blank()) +
xlab("Amino acid")
# How many tRNA genes are there for each amino acid?
ggplot(data = master_by_amino_acid, aes(x = Isotype_from_anticodon, y = Number_of_tRNAs_loading_this_aa)) +
geom_point() +
theme_light() +
theme(axis.text.x = element_blank()) +
labs(title = "Number of tRNA genes carrying each amino acid") +
xlab("Amino acid") +
ylab("Number of genes")
# How many tRNA genes are there for each amino acid?
ggplot(data = master_by_amino_acid, aes(x = Isotype_from_anticodon, y = Number_of_tRNAs_loading_this_aa)) +
geom_point() +
theme_light() +
theme(axis.text.x = element_blank()) +
labs(title = "Number of tRNA genes carrying each amino acid") +
xlab("Amino acid") +
ylab("Number of genes") +
geom_text_repel(data = subset(master_by_amino_acid, Number_of_tRNAs_loading_this_aa < 6 | Number_of_tRNAs_loading_this_aa > 20), aes(x = Isotype_from_anticodon, y = Number_of_tRNAs_loading_this_aa, label = Isotype_from_anticodon))
# Yeastmine dataset
yeastmine <- as.data.frame(fread("C:/MyStuff/tRNAs/Data/alliancemine_results_2024-11-20T11-19-04.tsv"))
# Agar growth data
growth_agar <- as.data.frame(fread("C:/MyStuff/TSSC/Data/Growth/My versions/Processed_by_them/growth_agar.tsv"))
# Master tRNA dataset
master_dataset <- as.data.frame(fread("C:/MyStuff/tRNAs/Data/GtRNAdb/master_tRNA_dataset.csv"))
# Amino acid information dataset
amino_acids <- as.data.frame(fread("C:/MyStuff/tRNAs/Data/GtRNAdb/amino_acids.csv"))
# Subset yeastmine dataset to only tRNA-synthetases
trna_synthase_genes <- yeastmine %>%
filter(grepl("trna synthase", yeastmine$Gene.name, ignore.case = T) | grepl("trna synthetase", yeastmine$Gene.name, ignore.case = T))
# Grab the tRNA-synthetases that are in the library
trna_synths_in_library <- trna_synthase_genes[trna_synthase_genes$Gene.secondaryIdentifier %in% growth_agar$Sys.Name,]
trna_synths_in_library <- trna_synths_in_library[order(trna_synths_in_library$Gene.name),]
# Add a column with the amino acid they load, need to do this manually bc nomenclature of the genes in Yeastmine is a mess lol
trna_synths_in_library$Gene.name
trna_synths_in_library$amino_acid_loaded <- c("Alanine", "Cysteine", "Glutamine or glutamic acid", "Glycine", "Histidine", "Isoleucine", "Methionine", "Phenylalanine", "Phenylalanine", "Tyrosine", "Valine")
temp <- amino_acids %>%
select(-molecular_weight) %>%
rename(amino_acid_loaded = Name)
trna_synths_in_library <- left_join(trna_synths_in_library, temp, by = "amino_acid_loaded")
# Check, out of the tRNA genes that couldn't be KOd in the library, how many correspond to which amino acids - what defines this? Explore in next chunk
sort(table(master_dataset$Isotype_from_anticodon[master_dataset$KOd == "No"]))
# Remove unnecessary variables
rm(temp)
# Plots by amino acid - for some reason distinct() is not working???
master_by_amino_acid <- master_dataset[!duplicated(master_dataset$Isotype_from_anticodon),]
## Just the percentage of KOd genes per amino acid
ggplot(data = master_by_amino_acid, aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid, col = Number_of_tRNAs_loading_this_aa)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(master_by_amino_acid, Perc_KOd_genes_per_amino_acid < 0.8), aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid, label = Isotype_from_anticodon)) +
theme(axis.text.x = element_blank()) +
xlab("Amino acid") +
ylab("% of genes KOd") +
labs(title = "% of tRNA-genes carrying each amino acid that were KOd")
## Just the percentage of KOd genes per amino acid
ggplot(data = master_by_amino_acid, aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid, col = as.factor(Number_of_tRNAs_loading_this_aa))) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(master_by_amino_acid, Perc_KOd_genes_per_amino_acid < 0.8), aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid, label = Isotype_from_anticodon)) +
theme(axis.text.x = element_blank()) +
xlab("Amino acid") +
ylab("% of genes KOd") +
labs(title = "% of tRNA-genes carrying each amino acid that were KOd")
## Just the percentage of KOd genes per amino acid
ggplot(data = master_by_amino_acid, aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid, col = Number_of_tRNAs_loading_this_aa)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(master_by_amino_acid, Perc_KOd_genes_per_amino_acid < 0.8), aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid, label = Isotype_from_anticodon)) +
theme(axis.text.x = element_blank()) +
xlab("Amino acid") +
ylab("% of genes KOd") +
labs(title = "% of tRNA-genes carrying each amino acid that were KOd")
## Just the percentage of KOd genes per amino acid
ggplot(data = master_by_amino_acid, aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid, col = Number_of_tRNAs_loading_this_aa)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(master_by_amino_acid, Perc_KOd_genes_per_amino_acid < 0.8), aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid, label = Isotype_from_anticodon)) +
theme(axis.text.x = element_blank()) +
xlab("Amino acid") +
ylab("% of genes KOd") +
labs(title = "% of tRNA-genes carrying each amino acid that were KOd",
col = "what")
## Just the percentage of KOd genes per amino acid
ggplot(data = master_by_amino_acid, aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid, col = Number_of_tRNAs_loading_this_aa)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(master_by_amino_acid, Perc_KOd_genes_per_amino_acid < 0.8), aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid, label = Isotype_from_anticodon)) +
theme(axis.text.x = element_blank()) +
xlab("Amino acid") +
ylab("% of genes KOd") +
labs(title = "% of tRNA-genes carrying each amino acid that were KOd",
col = "Number of tRNAs/nloading this aa")
## Just the percentage of KOd genes per amino acid
ggplot(data = master_by_amino_acid, aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid, col = Number_of_tRNAs_loading_this_aa)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(master_by_amino_acid, Perc_KOd_genes_per_amino_acid < 0.8), aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid, label = Isotype_from_anticodon)) +
theme(axis.text.x = element_blank()) +
xlab("Amino acid") +
ylab("% of genes KOd") +
labs(title = "% of tRNA-genes carrying each amino acid that were KOd",
col = "Number of tRNAs\nloading this aa")
knitr::opts_chunk$set(echo = TRUE)
raw_agar <- as.data.frame(fread("C:/MyStuff/TSSC/Data/Growth/Original data/Raw/agar_raw_data.tsv"))
View(raw_agar)
gc()
knitr::opts_chunk$set(echo = TRUE)
library(xlsx)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggrepel)
library(stringr)
raw_agar <- as.data.frame(fread("C:/MyStuff/TSSC/Data/Growth/Original data/Raw/agar_raw_data.tsv"))
raw_agar <- as.data.frame(fread("C:/MyStuff/TSSC/Data/Growth/Original data/Raw/agar_raw_data.tsv"))
View(raw_agar)
# Create a unique ID column
raw_agar <- raw_agar %>%
mutate(Unique.ID = paste(Lab.ID, "Rep", replicate, "Positions", plate384, row384, col384, plate1536, row1536, col1536, sep = "_"))
# Remove rows that are tagged as "exclude"
raw_agar<- raw_agar[!(grepl("exclude", raw_agar$SB.notes, ignore.case = T)),]
raw_agar <- as.data.frame(fread("C:/MyStuff/TSSC/Data/Growth/Original data/Raw/agar_raw_data.tsv"))
raw_agar <- as.data.frame(fread("C:/MyStuff/TSSC/Data/Growth/Original data/Raw/agar_raw_data.tsv"))
# Remove rows that are tagged as "exclude"
raw_agar <- raw_agar[!(grepl("exclude", raw_agar$SB.notes, ignore.case = T)),]
# Remove rows that don't have neither a "Lab.ID" nor a "Notes" (the controls don't have the first but do have the second)
raw_agar <- raw_agar %>%
filter(Lab.ID != "" & Notes != "")
View(raw_agar)
raw_agar <- as.data.frame(fread("C:/MyStuff/TSSC/Data/Growth/Original data/Raw/agar_raw_data.tsv"))
# Remove rows that are tagged as "exclude"
raw_agar <- raw_agar[!(grepl("exclude", raw_agar$SB.notes, ignore.case = T)),]
# Remove rows that don't have neither a "Lab.ID" nor a "Notes" (the controls don't have the first but do have the second)
raw_agar <- raw_agar %>%
filter(!(Lab.ID == "" & Notes == ""))
View(raw_agar)
# Create a unique ID column
raw_agar <- raw_agar %>%
mutate(Unique.ID = case_when(Lab.ID != "" ~ paste(Lab.ID, "Rep", replicate, "Positions", plate384, row384, col384, plate1536, row1536, col1536, sep = "_"),
Lab.ID == "" ~ paste(Notes, "Rep", replicate, "Positions", plate384, row384, col384, plate1536, row1536, col1536, sep = "_")))
# Iterate over the unique wells and calculate the AUC for each of them
wells <- unique(raw_agar$Unique.ID)
i = 1
well <- wells[i]
temp <- raw_agar %>% filter(Unique.ID == well)
View(temp)
raw_agar <- raw_agar %>%
mutate(Unique.ID = case_when(Lab.ID != "" ~ paste(Lab.ID, "Rep", replicate, "Temp", temperature, "Positions", plate384, row384, col384, plate1536, row1536, col1536, sep = "_"),
Lab.ID == "" ~ paste(Notes, "Rep", replicate, "Temp", temperature, "Positions", plate384, row384, col384, plate1536, row1536, col1536, sep = "_")))
library(DescTools)
well <- wells[i]
temp_22 <- raw_agar %>% filter(Unique.ID == well & temperature == 22)
# Iterate over the unique wells and calculate the AUC for each of them
wells <- unique(raw_agar$Unique.ID)
well <- wells[i]
temp_22 <- raw_agar %>% filter(Unique.ID == well & temperature == 22)
temp_22 <- raw_agar %>% filter(Unique.ID == well)
View(temp_22)
raw_agar <- as.data.frame(fread("C:/MyStuff/TSSC/Data/Growth/Original data/Raw/agar_raw_data.tsv"))
# Remove rows that are tagged as "exclude"
raw_agar <- raw_agar[!(grepl("exclude", raw_agar$SB.notes, ignore.case = T)),]
# Remove rows that don't have neither a "Lab.ID" nor a "Notes" (the controls don't have the first but do have the second)
raw_agar <- raw_agar %>%
filter(!(Lab.ID == "" & Notes == ""))
# Create a unique ID column
raw_agar <- raw_agar %>%
mutate(Unique.ID = case_when(Lab.ID != "" ~ paste(Lab.ID, "Rep", replicate, "Positions", plate384, row384, col384, plate1536, row1536, col1536, sep = "_"),
Lab.ID == "" ~ paste(Notes, "Rep", replicate, "Positions", plate384, row384, col384, plate1536, row1536, col1536, sep = "_")))
# Iterate over the unique wells and calculate the AUC for each of them
wells <- unique(raw_agar$Unique.ID)
temp_22 <- raw_agar %>% filter(Unique.ID == well)
temp_22 <- raw_agar %>% filter(Unique.ID == well & temperature == 22)
View(temp_22)
View(temp)
temp_26 <- raw_agar %>% filter(Unique.ID == well & temperature == 26)
temp_22 <- raw_agar %>% filter(Unique.ID == well & temperature == "22")
class(raw_agar$temperature)
temp_22 <- raw_agar %>% filter(temperature == 22)
# Create a unique ID column
raw_agar <- raw_agar %>%
mutate(Unique.ID = case_when(Lab.ID != "" ~ paste(Lab.ID, "Rep", replicate, "Positions", plate384, row384, col384, plate1536, row1536, col1536, sep = "_"),
Lab.ID == "" ~ paste(Notes, "Rep", replicate, "Positions", plate384, row384, col384, plate1536, row1536, col1536, sep = "_")))
# Iterate over the unique wells and calculate the AUC for each of them
wells <- unique(raw_agar$Unique.ID)
i = 1
well <- wells[i]
temp_22 <- raw_agar %>% filter(Unique.ID == well & temperature == 22)
temp_26 <- raw_agar %>% filter(Unique.ID == well & temperature == 26)
as.numeric(as.POSIXct(temp_22$ts[1]))
as.numeric(as.POSIXct(temp_22$ts[2]))
ggplot(data = temp_22, aes(x = as.numeric(as.POSIXct(ts)), y = size)) +
geom_point()
ggplot(data = temp_22, aes(x = as.numeric(as.POSIXct(ts)), y = size)) +
geom_point() +
geom_line()
ggplot(data = temp_22, aes(x = as.numeric(as.POSIXct(ts)), y = size)) +
geom_point() +
geom_smooth()
ggplot(data = temp_26, aes(x = as.numeric(as.POSIXct(ts)), y = size)) +
geom_point() +
geom_smooth()
ggplot(data = temp_26, aes(x = as.numeric(as.POSIXct(ts)), y = circularity)) +
geom_point() +
geom_smooth()
AUC(x = as.numeric(as.POSIXct(temp_22$ts)), y = temp_22$size)
levels(as.factor(raw_agar$replicate))
wells <- unique(raw_agar$Unique.ID)
temperatures <- c()
AUCs <- c()
for (i in 1:length(wells)) {
well <- wells[i]
temp_22 <- raw_agar %>% filter(Unique.ID == well & temperature == 22)
temp_26 <- raw_agar %>% filter(Unique.ID == well & temperature == 26)
temperatures <- c(temperatures, 22, 26)
AUCs <- c(AUCs, AUC(x = as.numeric(as.POSIXct(temp_22$ts)), y = temp_22$size, na.rm = T), AUC(x = as.numeric(as.POSIXct(temp_26$ts)), y = temp_26$size), na.rm = T)
}
# Build a dataset from the obtained data, and make it look like theirs did
AUCs_temp <- data.frame(wells, temperatures, AUCs)
# Iterate over the unique wells and calculate the AUC for each of them
wells <- unique(raw_agar$Unique.ID)
samples <- c()
temperatures <- c()
AUCs <- c()
for (i in 1:length(wells)) {
well <- wells[i]
temp_22 <- raw_agar %>% filter(Unique.ID == well & temperature == 22)
temp_26 <- raw_agar %>% filter(Unique.ID == well & temperature == 26)
samples <- c(samples, well, well)
temperatures <- c(temperatures, 22, 26)
AUCs <- c(AUCs, AUC(x = as.numeric(as.POSIXct(temp_22$ts)), y = temp_22$size, na.rm = T), AUC(x = as.numeric(as.POSIXct(temp_26$ts)), y = temp_26$size, na.rm = T))
}
# Build a dataset from the obtained data, and make it look like theirs did
AUCs_temp <- data.frame(wells, temperatures, AUCs)
View(AUCs_temp)
AUCs <- left_join(AUCs_temp, raw_agar, by = "Unique.ID")
# Build a dataset from the obtained data, and make it look like theirs did
AUCs_temp <- data.frame(Unique.ID = wells, temperatures, AUCs)
AUCs <- left_join(AUCs_temp, raw_agar, by = "Unique.ID")
# Build a dataset from the obtained data, and make it look like theirs did
AUCs_temp <- data.frame(Unique.ID = wells, temperature = temperatures, AUCs)
# Build a dataset from the obtained data, and make it look like theirs did
AUCs_temp <- data.frame(Unique.ID = samples, temperature = temperatures, AUCs)
wells <- unique(raw_agar$Unique.ID)
samples <- c()
temperatures <- c()
AUCs <- c()
for (i in 1:length(wells)) {
well <- wells[i]
temp_22 <- raw_agar %>% filter(Unique.ID == well & temperature == 22)
temp_26 <- raw_agar %>% filter(Unique.ID == well & temperature == 26)
samples <- c(samples, well, well)
temperatures <- c(temperatures, 22, 26)
AUCs <- c(AUCs, AUC(x = as.numeric(as.POSIXct(temp_22$ts)), y = temp_22$size, na.rm = T), AUC(x = as.numeric(as.POSIXct(temp_26$ts)), y = temp_26$size, na.rm = T))
}
# Build a dataset from the obtained data, and make it look like theirs did
AUCs_temp <- data.frame(Unique.ID = samples, temperature = temperatures, AUCs)
AUCs_df <- left_join(AUCs_temp, raw_agar, by = c("Unique.ID", "temperature"))
View(AUCs_df)
AUCs_rep_1 <- AUCs_df %>% filter(replicate == 1)
AUCs_rep_2 <- AUCs_df %>% filter(replicate == 2)
View(AUCs_rep_1)
AUCs_df <- left_join(AUCs_temp, raw_agar, by = c("Unique.ID", "temperature")) %>%
select(-c(Unique.ID, size, circularity, ts, replicate))
raw_agar_temp <- raw_agar %>%
select(-c(Unique.ID, size, circularity, ts, replicate))
AUCs_df <- left_join(AUCs_temp, raw_agar_temp, by = c("Unique.ID", "temperature"))
raw_agar_temp <- raw_agar %>%
select(-c(size, circularity, ts, replicate))
AUCs_df <- left_join(AUCs_temp, raw_agar_temp, by = c("Unique.ID", "temperature"))
View(AUCs_temp)
View(raw_agar_temp)
colnames(raw_agar_temp)
raw_agar_temp <- raw_agar %>%
select(-c(size, circularity, ts, replicate)) %>%
distinct(Unique.ID, temperature)
AUCs_df <- left_join(AUCs_temp, raw_agar_temp, by = c("Unique.ID", "temperature"))
AUCs_rep_1 <- AUCs_df %>%
filter(replicate == 1)
AUCs_rep_1 <- AUCs_df %>%
filter(replicate = 1)
AUCs_rep_1 <- AUCs_df %>%
dplyr::filter(replicate == 1)
raw_agar_temp <- raw_agar %>%
select(-c(size, circularity, ts)) %>%
distinct(Unique.ID, temperature)
AUCs_df <- left_join(AUCs_temp, raw_agar_temp, by = c("Unique.ID", "temperature"))
AUCs_rep_1 <- AUCs_df %>%
dplyr::filter(replicate == 1)
raw_agar_temp <- raw_agar %>%
select(-c(size, circularity, ts)) %>%
distinct(Unique.ID, temperature, .keep_all = T)
AUCs_df <- left_join(AUCs_temp, raw_agar_temp, by = c("Unique.ID", "temperature"))
AUCs_rep_1 <- AUCs_df %>%
dplyr::filter(replicate == 1)
View(AUCs_rep_1)
AUCs_rep_2 <- AUCs_df %>%
filter(replicate == 2)
View(AUCs_rep_2)
wells <- unique(raw_agar$Unique.ID)
samples <- c()
replicate <- c()
temperatures <- c()
AUCs <- c()
for (i in 1:length(wells)) {
# Define which sample we are evaluating in this iteration
well <- wells[i]
# Divide the dataset for this sample into 4, based on temperature and replicate
temp_22_rep_1 <- raw_agar %>% filter(Unique.ID == well & temperature == 22 & replicate == 1)
temp_26_rep_1 <- raw_agar %>% filter(Unique.ID == well & temperature == 26 & replicate == 1)
temp_22_rep_2 <- raw_agar %>% filter(Unique.ID == well & temperature == 22 & replicate == 2)
temp_26_rep_2 <- raw_agar %>% filter(Unique.ID == well & temperature == 26 & replicate == 2)
# Calculate the AUC for each sub-dataset and save them to a vector
AUCs <- c(AUCs, AUC(x = as.numeric(as.POSIXct(temp_22_rep_1$ts)), y = temp_22_rep_1$size, na.rm = T),
AUC(x = as.numeric(as.POSIXct(temp_26_rep_1$ts)), y = temp_26_rep_1$size, na.rm = T),
AUC(x = as.numeric(as.POSIXct(temp_22_rep_2$ts)), y = temp_22_rep_2$size, na.rm = T),
AUC(x = as.numeric(as.POSIXct(temp_26_rep_2$ts)), y = temp_26_rep_2$size, na.rm = T))
# Save all other data (sample name, replicate, temperature) to other vectors so we can put them all together into a final dataset
samples <- c(samples, well, well, well, well)
temperatures <- c(temperatures, 22, 26, 22, 26)
replicate <- c(replicate, 1, 1, 2, 2)
}
# Build a dataset from the obtained data, and make it look like theirs did - colnames I want to end up with:
# Plate384, Row384, Col384, Sys.Name, Std.Name, TS.allele, Lab.ID, Notes, SB.notes, Rep_1_AUC_22, Rep_2_AUC_22, Avg_AUC_22, Relative_AUC_to_control_mean_22, Relative_AUC_to_plate_mean_22, Rep_1_AUC_26, Rep_2_AUC_26, Avg_AUC_26, Relative_AUC_to_control_mean_26, Relative_AUC_to_plate_mean_26
AUCs_temp <- data.frame(Unique.ID = samples, temperature = temperatures, AUCs, replicate)
raw_agar_temp <- raw_agar %>%
select(-c(size, circularity, ts)) %>%
distinct(Unique.ID, temperature, .keep_all = T)
AUCs_df <- left_join(AUCs_temp, raw_agar_temp, by = c("Unique.ID", "temperature", "replicate"))
View(AUCs_df)
raw_agar <- as.data.frame(fread("C:/MyStuff/TSSC/Data/Growth/Original data/Raw/agar_raw_data.tsv"))
# Remove rows that are tagged as "exclude"
raw_agar <- raw_agar[!(grepl("exclude", raw_agar$SB.notes, ignore.case = T)),]
# Remove rows that don't have neither a "Lab.ID" nor a "Notes" (the controls don't have the first but do have the second)
raw_agar <- raw_agar %>%
filter(!(Lab.ID == "" & Notes == "")) %>%
select(-`Sys Name`)
# Create a unique ID column
raw_agar <- raw_agar %>%
mutate(Unique.ID = case_when(Lab.ID != "" ~ paste(Lab.ID, "Positions", plate384, row384, col384, plate1536, row1536, col1536, sep = "_"),
Lab.ID == "" ~ paste(Notes, "Positions", plate384, row384, col384, plate1536, row1536, col1536, sep = "_")))
raw_agar_temp <- raw_agar %>%
select(-c(size, circularity, ts)) %>%
distinct(Unique.ID, temperature, .keep_all = T)
AUCs_df <- left_join(AUCs_temp, raw_agar_temp, by = c("Unique.ID", "temperature", "replicate"))
View(AUCs_temp)
i = 1
# Define which sample we are evaluating in this iteration
well <- wells[i]
# Divide the dataset for this sample into 4, based on temperature and replicate
temp_22_rep_1 <- raw_agar %>% filter(Unique.ID == well & temperature == 22 & replicate == 1)
temp_26_rep_1 <- raw_agar %>% filter(Unique.ID == well & temperature == 26 & replicate == 1)
temp_22_rep_2 <- raw_agar %>% filter(Unique.ID == well & temperature == 22 & replicate == 2)
temp_26_rep_2 <- raw_agar %>% filter(Unique.ID == well & temperature == 26 & replicate == 2)
rm(temp_22)
rm(temp)
rm(temp_26)
View(raw_agar)
well
View(raw_agar)
# Iterate over the unique wells and calculate the AUC for each of them
wells <- unique(raw_agar$Unique.ID)
# Define which sample we are evaluating in this iteration
well <- wells[i]
# Divide the dataset for this sample into 4, based on temperature and replicate
temp_22_rep_1 <- raw_agar %>% filter(Unique.ID == well & temperature == 22 & replicate == 1)
temp_26_rep_1 <- raw_agar %>% filter(Unique.ID == well & temperature == 26 & replicate == 1)
temp_22_rep_2 <- raw_agar %>% filter(Unique.ID == well & temperature == 22 & replicate == 2)
temp_26_rep_2 <- raw_agar %>% filter(Unique.ID == well & temperature == 26 & replicate == 2)
AUC(x = as.numeric(as.POSIXct(temp_22_rep_1$ts)), y = temp_22_rep_1$size, na.rm = T),
AUC(x = as.numeric(as.POSIXct(temp_22_rep_1$ts)), y = temp_22_rep_1$size, na.rm = T)
AUC(x = as.numeric(as.POSIXct(temp_26_rep_1$ts)), y = temp_26_rep_1$size, na.rm = T)
AUC(x = as.numeric(as.POSIXct(temp_22_rep_2$ts)), y = temp_22_rep_2$size, na.rm = T)
AUC(x = as.numeric(as.POSIXct(temp_26_rep_2$ts)), y = temp_26_rep_2$size, na.rm = T)
gc()
raw_agar <- as.data.frame(fread("C:/MyStuff/TSSC/Data/Growth/Original data/Raw/agar_raw_data.tsv"))
# Remove rows that are tagged as "exclude"
raw_agar <- raw_agar[!(grepl("exclude", raw_agar$SB.notes, ignore.case = T)),]
# Remove rows that don't have neither a "Lab.ID" nor a "Notes" (the controls don't have the first but do have the second)
raw_agar <- raw_agar %>%
filter(!(Lab.ID == "" & Notes == "")) %>%
select(-`Sys Name`)
# Create a unique ID column
raw_agar <- raw_agar %>%
mutate(Unique.ID = case_when(Lab.ID != "" ~ paste(Lab.ID, "Positions", plate384, row384, col384, plate1536, row1536, col1536, sep = "_"),
Lab.ID == "" ~ paste(Notes, "Positions", plate384, row384, col384, plate1536, row1536, col1536, sep = "_")))
wells <- unique(raw_agar$Unique.ID)
samples <- c()
replicate <- c()
temperatures <- c()
AUCs <- c()
for (i in 1:length(wells)) {
# Define which sample we are evaluating in this iteration
well <- wells[i]
# Divide the dataset for this sample into 4, based on temperature and replicate
temp_22_rep_1 <- raw_agar %>% filter(Unique.ID == well & temperature == 22 & replicate == 1)
temp_26_rep_1 <- raw_agar %>% filter(Unique.ID == well & temperature == 26 & replicate == 1)
temp_22_rep_2 <- raw_agar %>% filter(Unique.ID == well & temperature == 22 & replicate == 2)
temp_26_rep_2 <- raw_agar %>% filter(Unique.ID == well & temperature == 26 & replicate == 2)
# Calculate the AUC for each sub-dataset and save them to a vector
AUCs <- c(AUCs, AUC(x = as.numeric(as.POSIXct(temp_22_rep_1$ts)), y = temp_22_rep_1$size, na.rm = T),
AUC(x = as.numeric(as.POSIXct(temp_26_rep_1$ts)), y = temp_26_rep_1$size, na.rm = T),
AUC(x = as.numeric(as.POSIXct(temp_22_rep_2$ts)), y = temp_22_rep_2$size, na.rm = T),
AUC(x = as.numeric(as.POSIXct(temp_26_rep_2$ts)), y = temp_26_rep_2$size, na.rm = T))
# Save all other data (sample name, replicate, temperature) to other vectors so we can put them all together into a final dataset
samples <- c(samples, well, well, well, well)
temperatures <- c(temperatures, 22, 26, 22, 26)
replicate <- c(replicate, 1, 1, 2, 2)
}
# Build a dataset from the obtained data, and make it look like theirs did - colnames I want to end up with:
# Plate384, Row384, Col384, Sys.Name, Std.Name, TS.allele, Lab.ID, Notes, SB.notes, Rep_1_AUC_22, Rep_2_AUC_22, Avg_AUC_22, Relative_AUC_to_control_mean_22, Relative_AUC_to_plate_mean_22, Rep_1_AUC_26, Rep_2_AUC_26, Avg_AUC_26, Relative_AUC_to_control_mean_26, Relative_AUC_to_plate_mean_26
AUCs_temp <- data.frame(Unique.ID = samples, temperature = temperatures, AUCs, replicate)
raw_agar_temp <- raw_agar %>%
select(-c(size, circularity, ts)) %>%
distinct(Unique.ID, temperature, .keep_all = T)
AUCs_df <- left_join(AUCs_temp, raw_agar_temp, by = c("Unique.ID", "temperature", "replicate"))
AUCs_rep_1_22 <- AUCs_df %>%
filter(replicate == 1 & temperature == 22) %>%
rename(Rep_1_AUC_22 = AUCs)
AUCs_rep_2_22 <- AUCs_df %>%
filter(replicate == 2 & temperature == 22) %>%
rename(Rep_2_AUC_22 = AUCs)
AUCs_rep_1_26 <- AUCs_df %>%
filter(replicate == 1 & temperature == 26) %>%
rename(Rep_1_AUC_26 = AUCs)
AUCs_rep_2_26 <- AUCs_df %>%
filter(replicate == 2 & temperature == 26) %>%
rename(Rep_2_AUC_26 = AUCs)
View(AUCs_rep_1_22)
gc()
