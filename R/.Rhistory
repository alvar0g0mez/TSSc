normalize_to_time_0 <- function(df) {
keep_first_columns <- df %>%
dplyr::select(Time, Temperature)
only_data <- df %>%
dplyr::select(!c(Time, Temperature))
only_data <- as.data.frame(t(apply(as.matrix(only_data), 1, function(x) x/as.matrix(only_data)[1,])))
out <- cbind(keep_first_columns, only_data)
return(out)
}
#' Iterate over the strains, getting their averages and creating a new column for each of them
#'
function_to_get_means_across_replicates <- function(df, strains) {
# Come up with the average columns
for (i in 1:length(strains)) {
strain <- strains[i]
df <- df %>%
rowwise() %>%
dplyr::mutate("{paste0(strain)}" := mean(c_across(contains(strain))), .after = Temperature)
}
# Remove all other columns
df <- df %>%
dplyr::select(Time, Temperature, any_of(strains))
# Return the finished dataframe
return(df)
}
#' Add a column with the temperature that they were supposed to have, then pivot them to long version
make_long_and_add_fixed_temp <- function(df, fixed_temp) {
df <- df %>%
dplyr::mutate(Temp_set = fixed_temp, .after = Temperature) %>%
dplyr::rename(Temp_observed = Temperature) %>%
pivot_longer(!c(Time, Temp_set, Temp_observed), names_to = "Strain", values_to = "OD_raw")
return(df)
}
#' Wrapper function: takes the just imported data and returns the processed data, in either long or short format, normalized or not
#'
#' @param df The data should be provided as a dataframe where the information of the machine and method used
#' are not included, only the OD measurements and the respective time and temperature
#' @param sample_ids Metadata about the samples, containing ...
#' @param replicates
#' @param empty_rows
#' @param fixed_temp
#'
process_plate_reader_growth_curves <- function(df,
sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp,
normalized_to_t0,
long_version,
wrong_plate) {
# First of all we make sure we have the timepoints on the rows and the wells on the columns,
# since one of the machines produces a dataframe in the opposite orientation
if (sum(grepl("Cycle.Nr.", colnames(df))) == 1) {
new_colnames <- df$Cycle.Nr.
df <- df %>%
dplyr::select(-Cycle.Nr.)
df <- as.data.frame(t(df))
colnames(df) <- new_colnames
}
# Set the first two colnames to be "Time" and "Temperature", also get rid of rownames
colnames(df)[1] <- "Time"
colnames(df)[2] <- "Temperature"
rownames(df) <- NULL
# Remove NAs in case full NA rows were introduced by Excel
df <- na.omit(df)
# There was a plate in which D row was not left empty (30ÂºC, first try) - need to do this horrible thing to take care of that
if (wrong_plate == T) {
##   - row D in the plate is now row E in my dataset
##   - row E in the plate is now row F in my dataset
##   - row F in the plate is now row G in my dataset
##   - row G in the plate (empty) is now row D in my dataset
## SO REMEMBER THAT LABELS IN THE ANALYSIS FOR ROWS FROM D ARE CHANGED HERE!
new_colnames <- c("Time", "Temperature",
paste("A", seq(1, 12, 1), sep = ""),
paste("B", seq(1, 12, 1), sep = ""),
paste("C", seq(1, 12, 1), sep = ""),
paste("E", seq(1, 12, 1), sep = ""),
paste("F", seq(1, 12, 1), sep = ""),
paste("G", seq(1, 12, 1), sep = ""),
paste("D", seq(1, 12, 1), sep = ""),
paste("H", seq(1, 12, 1), sep = ""))
colnames(df) <- new_colnames
}
# Extract the names of the rows that contain the replicates
r1 <- replicates[[1]][1]
r2 <- replicates[[1]][2]
r3 <- replicates[[1]][3]
r4 <- replicates[[2]][1]
r5 <- replicates[[2]][2]
r6 <- replicates[[2]][3]
empty_1 <- empty_rows[1]
empty_2 <- empty_rows[2]
# Sample IDs - replicate it a couple times changing IDs, since the samples in wells A, B and C are triplicates of the same sample, and the same for E, F, G
sample_ids_2 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl(r1, GC96) ~ str_replace(GC96, r1, r2),
grepl(r4, GC96) ~ str_replace(GC96, r4, r5)),
Sample.ID = paste(Sys.Name, "_2", sep=""))
sample_ids_3 <- sample_ids %>%
dplyr::mutate(GC96 = case_when(grepl(r1, GC96) ~ str_replace(GC96, r1, r3),
grepl(r4, GC96) ~ str_replace(GC96, r4, r6)),
Sample.ID = paste(Sys.Name, "_3", sep=""))
sample_ids_new <- rbind(rbind(sample_ids, sample_ids_2), sample_ids_3)
# Need to add rows for the empty wells, otherwise I get an error later...
d_sample_ids <- data.frame(c(paste(empty_1, seq(1, 12, 1), sep="")),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
paste("Empty_", seq(1, 12, 1), sep=""))
colnames(d_sample_ids) <- colnames(sample_ids_new)
h_sample_ids <- data.frame(c(paste(empty_2, seq(1, 12, 1), sep="")),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
rep("Empty", 12),
paste("Empty_", seq(13, 24, 1), sep=""))
colnames(h_sample_ids) <- colnames(sample_ids_new)
sample_ids_new_2 <- rbind(rbind(sample_ids_new, d_sample_ids), h_sample_ids)
# Set new column names, take averages of the 3 replicates, set to long format and put all temperatures together --> ready to plot!
## Set new colnames
df <- function_to_set_new_colnames(df, sample_ids_new_2)
## Normalize to time 0
df_norm <- normalize_to_time_0(df)
## Get mean across replicates
strains <- unique(sample_ids_new_2$Sys.Name)
df_norm_avg <- function_to_get_means_across_replicates(df_norm, strains)
df_avg <- function_to_get_means_across_replicates(df, strains)
## Set to long format and add reference temperature column
df_norm_avg_long <- make_long_and_add_fixed_temp(df_norm_avg, fixed_temp)
df_avg_long <- make_long_and_add_fixed_temp(df_avg, fixed_temp)
# Figure out the required type of output, and return it
if (normalized_to_t0 == T & long_version == T) {
df_norm_avg_long <- df_norm_avg_long %>%
dplyr::rename(OD_norm = OD_raw)
return(df_norm_avg_long)
}
else if (normalized_to_t0 == T & long_version == F) {
df_norm_avg <- df_norm_avg %>%
dplyr::rename(OD_norm = OD_raw)
return(df_norm_avg)
}
else if (normalized_to_t0 == F & long_version == T) {
return(df_avg_long)
}
else if (normalized_to_t0 == F & long_version == F) {
return(df_avg)
}
}
# Those from the first set
if (which_try == "first_try") {
# Here we get:
# - Long version
# - Normalized to time 0
# - Averaged across replicates
growth_26_avg_norm_long <- process_plate_reader_growth_curves(df = growth_26,
sample_ids = sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp = 26,
normalized_to_t0 = T,
long_version = T,
wrong_plate = F)
growth_30_avg_norm_long <- process_plate_reader_growth_curves(df = growth_30,
sample_ids = sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp = 30,
normalized_to_t0 = T,
long_version = T,
wrong_plate = T)
growth_34_avg_norm_long <- process_plate_reader_growth_curves(df = growth_34,
sample_ids = sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp = 34,
normalized_to_t0 = T,
long_version = T,
wrong_plate = F)
growth_37_avg_norm_long <- process_plate_reader_growth_curves(df = growth_37,
sample_ids = sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp = 37,
normalized_to_t0 = T,
long_version = T,
wrong_plate = F)
# Join results from this into a single long dataframe with all temperatures, to plot from
growth_long_full_norm <- rbind(rbind(rbind(growth_26_avg_norm_long, growth_30_avg_norm_long), growth_34_avg_norm_long), growth_37_avg_norm_long)
# Here we get:
# - Long version
# - Not normalized
# - Averaged across replicates
growth_26_avg_long_raw <- process_plate_reader_growth_curves(df = growth_26,
sample_ids = sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp = 26,
normalized_to_t0 = F,
long_version = T,
wrong_plate = F)
growth_30_avg_long_raw <- process_plate_reader_growth_curves(df = growth_30,
sample_ids = sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp = 30,
normalized_to_t0 = F,
long_version = T,
wrong_plate = T)
growth_34_avg_long_raw <- process_plate_reader_growth_curves(df = growth_34,
sample_ids = sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp = 34,
normalized_to_t0 = F,
long_version = T,
wrong_plate = F)
growth_37_avg_long_raw <- process_plate_reader_growth_curves(df = growth_37,
sample_ids = sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp = 37,
normalized_to_t0 = F,
long_version = T,
wrong_plate = F)
# Join results from this into a single long dataframe with all temperatures, to plot from
growth_long_full_raw <- rbind(rbind(rbind(growth_26_avg_long_raw, growth_30_avg_long_raw), growth_34_avg_long_raw), growth_37_avg_long_raw)
}
# Those from the second set
if (which_try == "second_try") {
# Here we get:
# - Long version
# - Normalized to time 0
# - Averaged across replicates
growth_22_avg_norm_long <- process_plate_reader_growth_curves(df = growth_22,
sample_ids = sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp = 22,
normalized_to_t0 = T,
long_version = T,
wrong_plate = F)
growth_26_avg_norm_long <- process_plate_reader_growth_curves(df = growth_26,
sample_ids = sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp = 26,
normalized_to_t0 = T,
long_version = T,
wrong_plate = F)
growth_30_avg_norm_long <- process_plate_reader_growth_curves(df = growth_30,
sample_ids = sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp = 30,
normalized_to_t0 = T,
long_version = T,
wrong_plate = F)
growth_34_avg_norm_long <- process_plate_reader_growth_curves(df = growth_34,
sample_ids = sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp = 34,
normalized_to_t0 = T,
long_version = T,
wrong_plate = F)
# Join results from this into a single long dataframe with all temperatures, to plot from
growth_long_full_norm <- rbind(rbind(rbind(growth_22_avg_norm_long, growth_26_avg_norm_long), growth_30_avg_norm_long), growth_34_avg_norm_long)
# Here we get:
# - Wide version
# - No normalization
# - Averaged across replicates
# --> In order to check what was the issue at 30ÂºC!
growth_22_avg <- process_plate_reader_growth_curves(df = growth_22,
sample_ids = sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp = 22,
normalized_to_t0 = F,
long_version = F,
wrong_plate = F)
growth_26_avg <- process_plate_reader_growth_curves(df = growth_26,
sample_ids = sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp = 26,
normalized_to_t0 = F,
long_version = F,
wrong_plate = F)
growth_30_avg <- process_plate_reader_growth_curves(df = growth_30,
sample_ids = sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp = 30,
normalized_to_t0 = F,
long_version = F,
wrong_plate = F)
growth_34_avg <- process_plate_reader_growth_curves(df = growth_34,
sample_ids = sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp = 34,
normalized_to_t0 = F,
long_version = F,
wrong_plate = F)
# Here we get:
# - Long version
# - No normalization
# - Averaged across replicates
growth_22_avg_long_raw <- process_plate_reader_growth_curves(df = growth_22,
sample_ids = sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp = 22,
normalized_to_t0 = F,
long_version = T,
wrong_plate = F)
growth_26_avg_long_raw <- process_plate_reader_growth_curves(df = growth_26,
sample_ids = sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp = 26,
normalized_to_t0 = F,
long_version = T,
wrong_plate = F)
growth_30_avg_long_raw <- process_plate_reader_growth_curves(df = growth_30,
sample_ids = sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp = 30,
normalized_to_t0 = F,
long_version = T,
wrong_plate = F)
growth_34_avg_long_raw <- process_plate_reader_growth_curves(df = growth_34,
sample_ids = sample_ids,
replicates = list(c("A", "B", "C"), c("E", "F", "G")),
empty_rows = c("D", "H"),
fixed_temp = 34,
normalized_to_t0 = F,
long_version = T,
wrong_plate = F)
# Join results from this into a single long dataframe with all temperatures, to plot from
growth_long_full_raw <- rbind(rbind(rbind(growth_22_avg_long_raw, growth_26_avg_long_raw), growth_30_avg_long_raw), growth_34_avg_long_raw)
}
# In the first set of measurements, first two temperatures were in one incubator, next two in another one, should check the names and put them somewhere in the graph - similar for the second set, there is a mix of the 2 different incubators/PlateReaders/whatever they are
# They should be in the second sheet of each of these Excel files
# Be careful, I am not doing this from the original data but from the long version, so if I change anything it might get biased (more observations from one temperature than another or whatever)
if (which_try == "first_try") {
ggplot() +
geom_line(data = subset(growth_long_full_norm, Temp_set == 26), aes(x = Time, y = Temp_observed), col = "darkgreen", linewidth = 1) +
geom_line(data = subset(growth_long_full_norm, Temp_set == 30), aes(x = Time, y = Temp_observed), col = "blue", linewidth = 1) +
geom_line(data = subset(growth_long_full_norm, Temp_set == 34), aes(x = Time, y = Temp_observed), col = "purple", linewidth = 1) +
geom_line(data = subset(growth_long_full_norm, Temp_set == 37), aes(x = Time, y = Temp_observed), col = "orange", linewidth = 1) +
geom_hline(yintercept = 26, col = "black") +
geom_hline(yintercept = 30, col = "black") +
geom_hline(yintercept = 34, col = "black") +
geom_hline(yintercept = 37, col = "black") +
theme_light() +
xlab("Time (s)") +
ylab("Temperature") +
labs(title = "How well did the incubators maintain their assigned temperature?",
subtitle = try_for_plots)
} else
if (which_try == "second_try") {
ggplot() +
geom_line(data = subset(growth_long_full_norm, Temp_set == 22), aes(x = Time, y = Temp_observed), col = "orange", linewidth = 1) +
geom_line(data = subset(growth_long_full_norm, Temp_set == 26), aes(x = Time, y = Temp_observed), col = "darkgreen", linewidth = 1) +
geom_line(data = subset(growth_long_full_norm, Temp_set == 30), aes(x = Time, y = Temp_observed), col = "blue", linewidth = 1) +
geom_line(data = subset(growth_long_full_norm, Temp_set == 34), aes(x = Time, y = Temp_observed), col = "purple", linewidth = 1) +
geom_hline(yintercept = 22, col = "black") +
geom_hline(yintercept = 26, col = "black") +
geom_hline(yintercept = 30, col = "black") +
geom_hline(yintercept = 34, col = "black") +
theme_light() +
xlab("Time (s)") +
ylab("Temperature") +
labs(title = "How well did the incubators maintain their assigned temperature?",
subtitle = try_for_plots)
}
ggplot(data = subset(growth_long_full_raw, Time == 0),
aes(x = Strain, y = OD_raw, col = as.factor(Temp_set))) +
geom_point() +
theme_light() +
labs(title = "ODs at time = 0, for each strain at each temperature",
subtitle = try_for_plots,
col = "Temperature") +
ylab("OD") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
#t_26_just_data <- growth_26_avg %>%
#  dplyr::select(-c(Time, Temperature))
#t_30_just_data <- growth_30_avg %>%
#  dplyr::select(-c(Time, Temperature))
#t_34_just_data <- growth_34_avg %>%
#  dplyr::select(-c(Time, Temperature))
#
#
#hist(as.matrix(t_26_just_data))
#hist(as.matrix(t_30_just_data))
#hist(as.matrix(t_34_just_data))
plot_list <- list()
strains <- sort(unique(sample_ids$Sys.Name))
for (i in 1:length(strains)) {
strain <- strains[i]
strain_type <- sample_ids$Status[sample_ids$Sys.Name == strain][1]
gene_name <- sample_ids$Gene.name[sample_ids$Sys.Name == strain][1]
temp <- growth_long_full_raw %>%
dplyr::filter(Strain == strain)
if (strain_type == "Synthetase") {
plot_list[[i]] <- ggplot(data = temp, aes(x = Time, y = OD_raw, group = as.factor(Temp_set), col = as.factor(Temp_set))) +
geom_line(linewidth = 1) +
theme_light() +
xlab("Time (s)") +
ylab("OD 600") +
labs(title = glue("Growth curves for strain {strain} - {strain_type}"),
subtitle = glue("{gene_name}"),
col = "Temperature (ÂºC)") +
coord_cartesian(ylim = c(0, 1.25))
} else
if (strain_type == "Lethal") {
lethal_temp <- sample_ids$Lethal_temp[sample_ids$Sys.Name == strain][1]
plot_list[[i]] <- ggplot(data = temp, aes(x = Time, y = OD_raw, group = as.factor(Temp_set), col = as.factor(Temp_set))) +
geom_line(linewidth = 1) +
theme_light() +
xlab("Time (s)") +
ylab("OD 600") +
labs(title = glue("Growth curves for strain {strain} - {strain_type}"),
subtitle = glue("{lethal_temp}"),
col = "Temperature (ÂºC)") +
coord_cartesian(ylim = c(0, 1.25))
}
else
{
plot_list[[i]] <- ggplot(data = temp, aes(x = Time, y = OD_raw, group = as.factor(Temp_set), col = as.factor(Temp_set))) +
geom_line(linewidth = 1) +
theme_light() +
xlab("Time (s)") +
ylab("OD 600") +
labs(title = glue("Growth curves for strain {strain} - {strain_type}"),
col = "Temperature (ÂºC)") +
coord_cartesian(ylim = c(0, 1.25))
}
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file = paste(base_dir, "TSSC/Output/Plots/pilot/growth_curves/gcs_trna_synthetases_raw_", which_try, ".pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=3, ncol=3),
width = 15, height = 9
)
plot_list <- list()
temp <- sample_ids %>%
dplyr::arrange(Status)
strains <- unique(temp$Sys.Name)
for (i in 1:length(strains)) {
strain <- strains[i]
strain_type <- sample_ids$Status[sample_ids$Sys.Name == strain][1]
gene_name <- sample_ids$Gene.name[sample_ids$Sys.Name == strain][1]
temp <- growth_long_full_norm %>%
dplyr::filter(Strain == strain)
if (strain_type == "Synthetase") {
plot_list[[i]] <- ggplot(data = temp, aes(x = Time, y = OD_norm, group = as.factor(Temp_set), col = as.factor(Temp_set))) +
geom_line(linewidth = 1) +
theme_light() +
xlab("Time (s)") +
ylab("Ratio to OD at T0") +
labs(title = glue("Growth curves for strain {strain} - {strain_type}"),
subtitle = glue("{gene_name}"),
col = "Temperature (ÂºC)") +
coord_cartesian(ylim = c(0, 12.5))
} else
if (strain_type == "Lethal") {
lethal_temp <- sample_ids$Lethal_temp[sample_ids$Sys.Name == strain][1]
plot_list[[i]] <- ggplot(data = temp, aes(x = Time, y = OD_norm, group = as.factor(Temp_set), col = as.factor(Temp_set))) +
geom_line(linewidth = 1) +
theme_light() +
xlab("Time (s)") +
ylab("OD 600") +
labs(title = glue("Growth curves for strain {strain} - {strain_type}"),
subtitle = glue("{lethal_temp}"),
col = "Temperature (ÂºC)") +
coord_cartesian(ylim = c(0, 12.5))
}
else
{
plot_list[[i]] <- ggplot(data = temp, aes(x = Time, y = OD_norm, group = as.factor(Temp_set), col = as.factor(Temp_set))) +
geom_line(linewidth = 1) +
theme_light() +
xlab("Time (s)") +
ylab("Ratio to OD at T0") +
labs(title = glue("Growth curves for strain {strain} - {strain_type}"),
col = "Temperature (ÂºC)") +
coord_cartesian(ylim = c(0, 12.5))
}
}
## List of ggplot objects has to be turned to list of grobs for grid.arrange to work
my_grobs <- lapply(plot_list, ggplotGrob)
## Print to PDF
output_file = paste(base_dir, "TSSC/Output/Plots/pilot/growth_curves/gcs_trna_synthetases_norm_to_t0_", which_try, ".pdf", sep = "")
ggsave(
filename = output_file,
plot = marrangeGrob(my_grobs, nrow=3, ncol=3),
width = 15, height = 9
)
