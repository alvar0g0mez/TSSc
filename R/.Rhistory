dplyr::select(Plate384, Row384, Col384, Sys.Name, Std.Name, TS.allele, Lab.ID, Notes, SB.notes) %>%
mutate(Well_ID = paste(Plate384, Row384, Col384, sep="_"),
sick_when_sent = case_when(Well_ID %in% sick_strains_when_sent$Well_ID ~ "Yes",
TRUE ~ "No"),
no_growth_after_pinning = case_when(Well_ID %in% no_growth_after_pinning$Well_ID ~ "Yes",    # These are non-sick strains which didn't grow for Wenxi
TRUE ~ "No"),
Available = case_when((sick_when_sent == "No" & no_growth_after_pinning == "No") ~ "Yes",
TRUE ~ "No"),
Synthetase = case_when(Sys.Name %in% synthetases$Gene.secondaryIdentifier ~ "Yes",
TRUE ~ "No"))
# 2. Add a column with with well IDs in the "traditional" manner - for platetools
sample_layout <- sample_layout %>%
mutate(Well_ID_non_unique = case_when(nchar(as.character(Col384)) == 1 ~ paste(LETTERS[Row384], 0, Col384, sep=""),
TRUE ~ paste(LETTERS[Row384], Col384, sep="")))
# 3. Add a column from yeastmine with the gene definition
yeastmine <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/alliancemine_results_2024-11-20T11-19-04.tsv", sep=""))) %>%
dplyr::select(Gene.name, Gene.secondaryIdentifier) %>%
dplyr::rename(Sys.Name = Gene.secondaryIdentifier)
sample_layout <- left_join(sample_layout, yeastmine, by = "Sys.Name")
# 4. Save this dataframe
fwrite(sample_layout, paste(base_dir, "TSSC/Data/Boone_lab/sample_layout.csv", sep=""))
# Are there any other ts alleles that are related to tRNAs?
check <- sample_layout %>%
filter(grepl("trna", Gene.name, ignore.case = T))
View(check)
# Are there any other ts alleles that are related to tRNAs?
check <- sample_layout %>%
filter(grepl("trna", Gene.name, ignore.case = T) & Available == "Yes")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(data.table)
library(tidyr)
library(ggplot2)
# Set up environment
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/TSSc/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/TSSC/"
}
# Fluorescence data
raw_1 <- as.data.frame(fread(paste(base_dir, "Data/Boone_lab/Fluorescence/raw_1.csv", sep = "")))
raw_2 <- as.data.frame(fread(paste(base_dir, "Data/Boone_lab/Fluorescence/raw_2.csv", sep = "")))
raw_3 <- as.data.frame(fread(paste(base_dir, "Data/Boone_lab/Fluorescence/raw_3.csv", sep = "")))
## Put together replicates
full_fluorescence <- rbind(rbind(raw_1, raw_2), raw_3)
# tRNA synthetases data
synthetases <- as.data.frame(fread(paste(base_dir, "Data/synthetases/trna_synthetases.csv", sep="")))
# Rep 1, all timepoints - full range
ggplot(data = raw_1, aes(x = `het:hom_mNG:mScar_ratio`)) +
geom_histogram(binwidth = 1) +
theme_light() +
labs(title = "Histogram of final ratio - all timepoints",
subtitle = "Replicate 1")
# Rep 1, all timepoints - 0 to 15
ggplot(data = raw_1, aes(x = `het:hom_mNG:mScar_ratio`)) +
geom_histogram(binwidth = 0.1, col = "black", fill = "grey") +
theme_light() +
coord_cartesian(xlim = c(0, 15)) +
labs(title = "Histogram of final ratio - all timepoints",
subtitle = "Replicate 1")
# Rep 1, all timepoints, log2
ggplot(data = raw_1, aes(x = log2(`het:hom_mNG:mScar_ratio`))) +
geom_histogram(binwidth = 1) +
theme_light() +
coord_cartesian(xlim = c(-12, 12)) +
labs(title = "Histogram of final ratio - all timepoints",
subtitle = "Replicate 1")
# Rep 1, time = 0, log2
ggplot(data = subset(raw_1, TimeAt37 == 0), aes(x = log2(`het:hom_mNG:mScar_ratio`))) +
geom_histogram(binwidth = 1) +
theme_light() +
coord_cartesian(xlim = c(-12, 12),
ylim = c(0, 500)) +
labs(title = "Histogram of final ratio - 0h",
subtitle = "Replicate 1")
# Rep 1, time = 12, log2
ggplot(data = subset(raw_1, TimeAt37 == 12), aes(x = log2(`het:hom_mNG:mScar_ratio`))) +
geom_histogram(binwidth = 1) +
theme_light() +
coord_cartesian(xlim = c(-12, 12),
ylim = c(0, 500)) +
labs(title = "Histogram of final ratio - 12h",
subtitle = "Replicate 1")
# Final ratio, all timepoints
ggplot(data = raw_1, aes(x = as.factor(TimeAt37), y = log2(`het:hom_mNG:mScar_ratio`), group = TimeAt37)) +
geom_boxplot() +
theme_light() +
xlab("Time at 37ºC") +
ylab("log2(het:hom_mNG:mScar_ratio)") +
labs(title = "Boxplots for the final ratio at all timepoints",
subtitle = "Replicate 1")
# Heterozygous ratio, all timepoints
ggplot(data = subset(raw_1, Status == "Heterozygous"), aes(x = as.factor(TimeAt37), y = log2(`average_mNG:mScar_ratio`), group = TimeAt37)) +
geom_boxplot() +
theme_light() +
xlab("Time at 37ºC") +
ylab("log2(average_mNG:mScar_ratio)") +
labs(title = "Boxplots for the non-normalized ratio at all timepoints",
subtitle = "Replicate 1")
# Heterozygous mNG, all timepoints
ggplot(data = subset(raw_1, Status == "Heterozygous"), aes(x = as.factor(TimeAt37), y = log2(average_intensity_mNG), group = TimeAt37)) +
geom_boxplot() +
theme_light() +
xlab("Time at 37ºC") +
ylab("log2(mNG)") +
labs(title = "Boxplots for the mNG intensity",
subtitle = "Replicate 1")
# Heterozygous mScarlet, all timepoints
ggplot(data = subset(raw_1, Status == "Heterozygous"), aes(x = as.factor(TimeAt37), y = log2(average_intensity_mScar), group = TimeAt37)) +
geom_boxplot() +
theme_light() +
xlab("Time at 37ºC") +
ylab("log2(mScarlet)") +
labs(title = "Boxplots for the mScarlet intensity",
subtitle = "Replicate 1")
# Final ratio, all timepoints
ggplot(data = full_fluorescence, aes(x = as.factor(TimeAt37), y = log2(`het:hom_mNG:mScar_ratio`), group = TimeAt37)) +
geom_boxplot() +
theme_light() +
xlab("Time at 37ºC") +
ylab("log2(het:hom_mNG:mScar_ratio)") +
labs(title = "Boxplots for the final ratio at all timepoints",
subtitle = "All replicates")
# Heterozygous ratio, all timepoints
ggplot(data = subset(full_fluorescence, Status == "Heterozygous"), aes(x = as.factor(TimeAt37), y = log2(`average_mNG:mScar_ratio`), group = TimeAt37)) +
geom_boxplot() +
theme_light() +
xlab("Time at 37ºC") +
ylab("log2(average_mNG:mScar_ratio)") +
labs(title = "Boxplots for the non-normalized ratio at all timepoints",
subtitle = "All replicates")
# Heterozygous mNG, all timepoints
ggplot(data = subset(full_fluorescence, Status == "Heterozygous"), aes(x = as.factor(TimeAt37), y = log2(average_intensity_mNG), group = TimeAt37)) +
geom_boxplot() +
theme_light() +
xlab("Time at 37ºC") +
ylab("log2(mNG) intensity") +
labs(title = "Boxplots for homozygous mNG at all timepoints",
subtitle = "All replicates")
# Heterozygous mScarlet, all timepoints
ggplot(data = subset(full_fluorescence, Status == "Heterozygous"), aes(x = as.factor(TimeAt37), y = log2(average_intensity_mScar), group = TimeAt37)) +
geom_boxplot() +
theme_light() +
xlab("Time at 37ºC") +
ylab("log2(mScarlet intensity)") +
labs(title = "Boxplots for homozygous mScarlet at all timepoints",
subtitle = "All replicates")
# Homozygous ratio, all timepoints
ggplot(data = subset(full_fluorescence, Status == "Homozygous"), aes(x = as.factor(TimeAt37), y = log2(`average_mNG:mScar_ratio`), group = TimeAt37)) +
geom_boxplot() +
theme_light() +
xlab("Time at 37ºC") +
ylab("log2(average_mNG:mScar_ratio)") +
labs(title = "Boxplots for the homozygous ratio at all timepoints",
subtitle = "All replicates, homozygous WT strains only")
# Homozygous mNG, all timepoints
ggplot(data = subset(full_fluorescence, Status == "Homozygous"), aes(x = as.factor(TimeAt37), y = log2(average_intensity_mNG), group = TimeAt37)) +
geom_boxplot() +
theme_light() +
xlab("Time at 37ºC") +
ylab("log2(mNG) intensity") +
labs(title = "Boxplots for homozygous mNG at all timepoints",
subtitle = "All replicates, homozygous WT strains only")
# Homozygous mScarlet, all timepoints
ggplot(data = subset(full_fluorescence, Status == "Homozygous"), aes(x = as.factor(TimeAt37), y = log2(average_intensity_mScar), group = TimeAt37)) +
geom_boxplot() +
theme_light() +
xlab("Time at 37ºC") +
ylab("log2(mScarlet intensity)") +
labs(title = "Boxplots for homozygous mScarlet at all timepoints",
subtitle = "All replicates, homozygous WT strains only")
# Final ratio, 0h vs. 12h across all replicates
x <- full_fluorescence$`het:hom_mNG:mScar_ratio`[full_fluorescence$TimeAt37 == 0 & is.finite(full_fluorescence$`het:hom_mNG:mScar_ratio`)]
y <- full_fluorescence$`het:hom_mNG:mScar_ratio`[full_fluorescence$TimeAt37 == 12 & is.finite(full_fluorescence$`het:hom_mNG:mScar_ratio`)]
test <- wilcox.test(x, y)
test
median(x, na.rm = T) - median(y, na.rm = T)
# Total cell count, all timepoints
ggplot(data = full_fluorescence, aes(x = as.factor(TimeAt37), y = log2(total_cell_count), group = TimeAt37)) +
geom_boxplot() +
theme_light() +
xlab("Time at 37ºC") +
ylab("log2(Total cell count)") +
labs(title = "Boxplots for the total cell count at all timepoints",
subtitle = "All replicates")
# Undetectable cells mNG, all timepoints
ggplot(data = full_fluorescence, aes(x = as.factor(TimeAt37), y = log2(undetectable_cells_mNG), group = TimeAt37)) +
geom_boxplot() +
theme_light() +
xlab("Time at 37ºC") +
ylab("log2(Undetectable cells mNG)") +
labs(title = "Boxplots for undetectable cells mNG at all timepoints",
subtitle = "All replicates")
# Undetectable cells mScar, all timepoints
ggplot(data = full_fluorescence, aes(x = as.factor(TimeAt37), y = log2(undetectable_cells_mScar), group = TimeAt37)) +
geom_boxplot() +
theme_light() +
xlab("Time at 37ºC") +
ylab("log2(Undetectable cells mScar)") +
labs(title = "Boxplots for undetectable cells mScar at all timepoints",
subtitle = "All replicates")
# Final ratio vs. total cell count
ggplot(data = full_fluorescence, aes(x = log2(total_cell_count), y = log2(`het:hom_mNG:mScar_ratio`), col = TimeAt37)) +
geom_point() +
theme_light() +
coord_cartesian(ylim = c(-25, 25))
# Final ratio vs. undetectable cells mNG
ggplot(data = full_fluorescence, aes(x = log2(undetectable_cells_mNG), y = log2(`het:hom_mNG:mScar_ratio`), col = TimeAt37)) +
geom_point() +
theme_light()
# Final ratio vs. undetectable cells mScar
ggplot(data = full_fluorescence, aes(x = log2(undetectable_cells_mScar), y = log2(`het:hom_mNG:mScar_ratio`), col = TimeAt37)) +
geom_point() +
theme_light()
# Isolate fluorescence data for the synthetases and check for how many synthetases we have it
fluorescence_synthetases <- full_fluorescence %>%
filter(Gene %in% synthetases$Gene.symbol)
length(unique(fluorescence_synthetases$Gene))
# Take the average across replicates
test <- fluorescence_synthetases %>%
filter(`het:hom_mNG:mScar_ratio_status` == "mutant") %>%
group_by(Gene, Status, TimeAt37) %>%
summarise_at(vars(`het:hom_mNG:mScar_ratio`), list(average_ratio_across_replicates = mean))
# Get spaghetti plots
## Basic one
ggplot(data = test, aes(x = TimeAt37, y = average_ratio_across_replicates, col = Gene)) +
geom_line(linewidth = 1) +
theme_light() +
labs(title = "Normalized mNG/mScarlet for TS tRNA synthetase strains") +
xlab("Time at 37ºC") +
ylab("log2(het:hom_mNG:mScar_ratio)")
## Zoom in to see the ones at the bottom
ggplot(data = test, aes(x = TimeAt37, y = average_ratio_across_replicates, col = Gene)) +
geom_line(linewidth = 1) +
theme_light() +
coord_cartesian(ylim = c(0, 1.65)) +
labs(title = "Normalized mNG/mScarlet for TS tRNA synthetase strains",
subtitle = "Zoomed in") +
xlab("Time at 37ºC") +
ylab("log2(het:hom_mNG:mScar_ratio)")
# Get a subset of the synthetase dataset for these ones, for a slide
synths_temp <- synthetases %>%
filter(Gene.symbol %in% full_fluorescence$Gene) %>%
dplyr::select(Gene.name, Gene.symbol, Gene.secondaryIdentifier, mitochondrial, type, cofactor_or_enzyme)
fluorescence_temp <- full_fluorescence %>%
filter(Status == "Heterozygous")
strains <- unique(fluorescence_temp$Gene)
strains_with_right_pattern <- c()
for (gene in strains) {
temp <- fluorescence_temp %>%
filter(Gene == gene)
if (length(unique(temp$TimeAt37)) == 7) {
if ((mean(temp$`het:hom_mNG:mScar_ratio`[temp$TimeAt37 == 0], na.rm = T) >= mean(temp$`het:hom_mNG:mScar_ratio`[temp$TimeAt37 == 4], na.rm = T)) &
(mean(temp$`het:hom_mNG:mScar_ratio`[temp$TimeAt37 == 4], na.rm = T) >= mean(temp$`het:hom_mNG:mScar_ratio`[temp$TimeAt37 == 8], na.rm = T)) &
(mean(temp$`het:hom_mNG:mScar_ratio`[temp$TimeAt37 == 8], na.rm = T) >= mean(temp$`het:hom_mNG:mScar_ratio`[temp$TimeAt37 == 12], na.rm = T))) {
strains_with_right_pattern <- c(strains_with_right_pattern, unique(temp$Gene))
}
}
}
fluorescence_filtered <- full_fluorescence %>%
filter(Gene %in% strains_with_right_pattern)
# Final ratio, all timepoints
ggplot(data = fluorescence_filtered, aes(x = as.factor(TimeAt37), y = log2(`het:hom_mNG:mScar_ratio`), group = TimeAt37)) +
geom_boxplot() +
theme_light() +
xlab("Time at 37ºC") +
ylab("log2(het:hom_mNG:mScar_ratio)") +
labs(title = "Boxplots for the final ratio at all timepoints",
subtitle = "All replicates")
# Spaghetti plot with these selected strains - need to average across replicates first - NEED TO FIX THIS
fluorescence_filtered <- fluorescence_filtered %>%
group_by(Gene, Status, TimeAt37) %>%
summarise_at(vars(`het:hom_mNG:mScar_ratio`), list(average_ratio_across_replicates = mean))
ggplot(data = fluorescence_filtered, aes(x = TimeAt37, y = average_ratio_across_replicates, col = Gene)) +
geom_line(linewidth = 1) +
theme_light() +
labs(title = "Normalized mNG/mScarlet for selected strains") +
xlab("Time at 37ºC") +
ylab("log2(het:hom_mNG:mScar_ratio)")
View(full_fluorescence)
# Total cell count, all timepoints - group by homozygous or heterozygous
ggplot(data = full_fluorescence, aes(x = as.factor(TimeAt37), y = log2(total_cell_count), group = TimeAt37, fill = Status)) +
geom_boxplot() +
theme_light() +
xlab("Time at 37ºC") +
ylab("log2(Total cell count)") +
labs(title = "Boxplots for the total cell count at all timepoints",
subtitle = "All replicates")
# Total cell count, all timepoints - group by homozygous or heterozygous
ggplot(data = full_fluorescence, aes(x = as.factor(TimeAt37), y = log2(total_cell_count), group = TimeAt37, fill = as.factor(Status))) +
geom_boxplot() +
theme_light() +
xlab("Time at 37ºC") +
ylab("log2(Total cell count)") +
labs(title = "Boxplots for the total cell count at all timepoints",
subtitle = "All replicates")
# Total cell count, all timepoints - group by homozygous or heterozygous
ggplot(data = full_fluorescence, aes(x = as.factor(TimeAt37), y = log2(total_cell_count), group = TimeAt37, group = as.factor(Status), fill = as.factor(Status))) +
geom_boxplot() +
theme_light() +
xlab("Time at 37ºC") +
ylab("log2(Total cell count)") +
labs(title = "Boxplots for the total cell count at all timepoints",
subtitle = "All replicates")
# Total cell count, all timepoints - group by homozygous or heterozygous
ggplot(data = full_fluorescence, aes(x = as.factor(TimeAt37), y = log2(total_cell_count), group = as.factor(Status), fill = as.factor(Status))) +
geom_boxplot() +
theme_light() +
xlab("Time at 37ºC") +
ylab("log2(Total cell count)") +
labs(title = "Boxplots for the total cell count at all timepoints",
subtitle = "All replicates")
# Total cell count, all timepoints - group by homozygous or heterozygous
ggplot(data = full_fluorescence, aes(x = as.factor(TimeAt37), y = log2(total_cell_count), fill = as.factor(Status))) +
geom_boxplot() +
theme_light() +
xlab("Time at 37ºC") +
ylab("log2(Total cell count)") +
labs(title = "Boxplots for the total cell count at all timepoints",
subtitle = "All replicates")
# Total cell count, all timepoints - group by homozygous or heterozygous
ggplot(data = full_fluorescence, aes(x = as.factor(TimeAt37), y = log2(total_cell_count), fill = as.factor(Status))) +
geom_boxplot() +
theme_light() +
xlab("Time at 37ºC") +
ylab("log2(Total cell count)") +
labs(title = "Boxplots for the total cell count at all timepoints",
subtitle = "All replicates",
fill = "Strain type")
knitr::opts_chunk$set(echo = TRUE)
library(xlsx)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggrepel)
library(stringr)
library(glue)
library(viridis)
library(platetools)
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Synthetases dataframe
synthetases <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/trna_synthetases.csv", sep="")))
# Agar growth data
growth_agar <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Boone_lab/Growth/Mine/Processed_by_them/growth_agar.tsv", sep="")))
# Master tRNA dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
# Amino acid information dataset
amino_acids <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Other/GtRNAdb/amino_acids.csv", sep="")))
# Layout of samples in the 384-well plates we got from the Boone lab
sample_layout <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Boone_lab/sample_layout.csv", sep="")))
# Grab the tRNA-synthetases that are in the library
trna_synths_in_library <- synthetases[synthetases$Gene.secondaryIdentifier %in% growth_agar$Sys.Name,]
trna_synths_in_library <- trna_synths_in_library[order(trna_synths_in_library$Gene.name),]
# Check, out of the tRNA genes that couldn't be KOd in the tRNA KO library, how many correspond to which amino acids - what defines this? I EXPLORE THIS FURTHER IN 1.11. IN THE MAIN TRNA .RMD FILE
sort(table(master_dataset$Isotype_from_anticodon[master_dataset$KOd == "No"]))
# For each 384-well plate I need to come up with a separate dataframe, with only the column with the appropriate well IDs, and another column I want to color the wells by
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(Strain_type = case_when(Synthetase == "Yes" & !grepl("exclude", SB.notes, ignore.case = T) ~ "Synthetase",
grepl("exclude", SB.notes, ignore.case = T) ~ "Exclude this well",
#grepl("Wild type", Notes, ignore.case = T) ~ "BY4741",
#grepl("control added by Fang", Notes, ignore.case = T) ~ "BY4741 + p13623",
TRUE ~ "Other")) %>%
dplyr::select(Strain_type, Well_ID_non_unique)
raw_map(data = temp$Strain_type,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA synthetases TS alleles")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6)) +
labs(fill = "Strain type")
ggsave(paste(base_dir, "TSSC/Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
growth_agar <- growth_agar %>%
mutate(possible_selection = case_when(Plate384 == 4 & (Row384 == which(letters == "f")|Row384 == which(letters == "g")) ~ TRUE,
TRUE ~ FALSE))
ggplot(data = growth_agar, aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(possible_selection))) +
geom_point() +
geom_abline() +
labs(col = "Ratio 26ºC/22ºC") +
theme_light() +
xlab("AUC at 22ºC") +
ylab("AUC at 26ºC")
# We have 9 tRNA synthetase KOs, 1 WT, and we can add let's say 3 WTs+plasmid = 13 strains
strains_for_pilot <- sample_layout %>%
filter(Sys.Name %in% synthetases$Gene.secondaryIdentifier | grepl("Wild type", Notes, ignore.case = T) | grepl("control added by Fang", Notes, ignore.case = T),
Available == "Yes",
!grepl("exclude", SB.notes, ignore.case = T)) %>%
dplyr::select(-c(SB.notes))
# Actually let me make sure I only have 4 rows for the controls, one coming from each plate
strains_for_pilot_1 <- strains_for_pilot %>%
filter(!grepl("control added", Notes, ignore.case = T))
strains_for_pilot_2 <- strains_for_pilot %>%
filter(grepl("control added", Notes, ignore.case = T)) %>%
distinct(Plate384, .keep_all = T)
strains_for_pilot_final <- rbind(strains_for_pilot_1, strains_for_pilot_2)
# Are there any other ts alleles that are related to tRNAs?
check <- sample_layout %>%
filter(grepl("trna", Gene.name, ignore.case = T) & Available == "Yes")
# Add 3 more strains at random, just to make it 16, because 96 is a multiple of 16
rownames(strains_for_pilot_final) <- NULL
# Remove last column before sending it to Wenxi, I don't think it's useful at all and it could be confusing
strains_for_pilot_final <- strains_for_pilot_final %>%
dplyr::select(-Well_ID_non_unique)
write.xlsx(x = strains_for_pilot_final,
file = paste(base_dir, "TSSC/Data/Pilot/setup/strains_for_pilot.xlsx", sep=""),
row.names = F)
View(strains_for_pilot_final)
strains_for_pilot_final <- strains_for_pilot_final[1:12,]
View(sample_layout)
# Grab 4 random strains
random_strains <- sample_layout %>%
filter(Available =="Yes")
bool <- sample(4, nrow(random_strains), )
bool <- sample(4, nrow(random_strains))
bool <- sample(nrow(random_strains), 4)
random_strains <- random_strains[bool, ]
strains_for_pilot_final <- rbind(strains_for_pilot_final, random_strains)
View(random_strains)
random_strains <- random_strains %>%
dplyr::select(-c(SB.notes, Well_ID_non_unique))
strains_for_pilot_final <- rbind(strains_for_pilot_final, random_strains)
View(sample_layout)
sample_layout <- sample_layout %>%
dplyr::mutate(selected = case_when(Lab.ID %in% strains_for_pilot_final$Lab.ID ~ "TRUE",
TRUE ~ "FALSE"))
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(Strain_type = case_when(Synthetase == "Yes" & !grepl("exclude", SB.notes, ignore.case = T) ~ "Synthetase",
grepl("exclude", SB.notes, ignore.case = T) ~ "Exclude this well",
#grepl("Wild type", Notes, ignore.case = T) ~ "BY4741",
#grepl("control added by Fang", Notes, ignore.case = T) ~ "BY4741 + p13623",
TRUE ~ "Other")) %>%
dplyr::select(Strain_type, Well_ID_non_unique)
raw_map(data = temp$selected,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA synthetases TS alleles")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6)) +
labs(fill = "Selected for pilot")
ggsave(paste(base_dir, "TSSC/Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
knitr::opts_chunk$set(echo = TRUE)
library(xlsx)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggrepel)
library(stringr)
library(glue)
library(viridis)
library(platetools)
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Synthetases dataframe
synthetases <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/trna_synthetases.csv", sep="")))
# Agar growth data
growth_agar <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Boone_lab/Growth/Mine/Processed_by_them/growth_agar.tsv", sep="")))
# Master tRNA dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
# Amino acid information dataset
amino_acids <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Other/GtRNAdb/amino_acids.csv", sep="")))
# Layout of samples in the 384-well plates we got from the Boone lab
sample_layout <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Boone_lab/sample_layout.csv", sep="")))
# Grab the tRNA-synthetases that are in the library
trna_synths_in_library <- synthetases[synthetases$Gene.secondaryIdentifier %in% growth_agar$Sys.Name,]
trna_synths_in_library <- trna_synths_in_library[order(trna_synths_in_library$Gene.name),]
# Check, out of the tRNA genes that couldn't be KOd in the tRNA KO library, how many correspond to which amino acids - what defines this? I EXPLORE THIS FURTHER IN 1.11. IN THE MAIN TRNA .RMD FILE
sort(table(master_dataset$Isotype_from_anticodon[master_dataset$KOd == "No"]))
sample_layout <- sample_layout %>%
dplyr::mutate(selected = case_when(Lab.ID %in% strains_for_pilot_final$Lab.ID ~ "TRUE",
TRUE ~ "FALSE"))
# For each 384-well plate I need to come up with a separate dataframe, with only the column with the appropriate well IDs, and another column I want to color the wells by
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(Strain_type = case_when(Synthetase == "Yes" & !grepl("exclude", SB.notes, ignore.case = T) ~ "Synthetase",
grepl("exclude", SB.notes, ignore.case = T) ~ "Exclude this well",
#grepl("Wild type", Notes, ignore.case = T) ~ "BY4741",
#grepl("control added by Fang", Notes, ignore.case = T) ~ "BY4741 + p13623",
TRUE ~ "Other")) %>%
dplyr::select(Strain_type, Well_ID_non_unique)
raw_map(data = temp$selected,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA synthetases TS alleles")) +
theme_dark() +
scale_fill_viridis_d() +
theme(axis.text=element_text(size=6)) +
labs(fill = "Selected for pilot")
ggsave(paste(base_dir, "TSSC/Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
