ggplot(data = growth_agar, aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(Synthetase))) +
geom_point() +
geom_abline() +
labs(col = "Ratio 26ºC/22ºC") +
theme_light() +
xlab("AUC at 22ºC") +
ylab("AUC at 26ºC")
ggplot(data = growth_agar, aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(Synthetase))) +
geom_point() +
geom_abline() +
labs(col = "Ratio 26ºC/22ºC") +
theme_light() +
xlab("AUC at 22ºC") +
ylab("AUC at 26ºC") +
geom_text_repel(data = subset(growth_agar, Synthetase == "Yes"), aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(Synthetase), label = Sys.Name))
96/4
sum(growth_agar$Synthetase == "Yes")
View(growth_agar)
library(xlsx)
sick_strains_when_sent <- as.data.frame(read.xlsx(paste(base_dir, "Data/Sick_strains/20250131_TSV8-coordinates_very_sick_strains.xlsx", sep="")))
sick_strains_when_sent <- as.data.frame(read.xlsx(paste(base_dir, "Data/Sick_strains/20250131_TSV8-coordinates_very_sick_strains.xlsx", sep=""), 2))
View(sick_strains_when_sent)
no_growth_after_pinning <- as.data.frame(read.xlsx(paste(base_dir, "Data/Sick_strains/20250131_TSV8-coordinates_very_sick_strains.xlsx", sep=""), 3))
View(no_growth_after_pinning)
View(problematic_rows)
96*3
96*4
384*4
sick_strains_when_sent <- as.data.frame(read.xlsx(paste(base_dir, "Data/Sick_strains/20250131_TSV8-coordinates_very_sick_strains.xlsx", sep=""), 2))
sick_strains_when_sent <- sick_strains_when_sent %>%
filter(actually_healthy_after_pinning == "No") %>%
mutate(Well_ID = paste(plate, row, col, sep="_"))
class(sick_strains_when_sent)
class(sick_strains_when_sent[,1])
class(sick_strains_when_sent$row)
sick_strains_when_sent <- sick_strains_when_sent %>%
filter(actually_healthy_after_pinning == "No") %>%
mutate(Well_ID = paste(plate, row, col, sep="_"))
sick_strains_when_sent <- sick_strains_when_sent %>%
mutate(Well_ID = paste(plate, row, col, sep="_"))
sick_strains_when_sent <- sick_strains_when_sent %>%
filter(actually_healthy_after_pinning == "No") %>%
mutate(Well_ID = paste(plate, row, column, sep="_"))
no_growth_after_pinning <- no_growth_after_pinning %>%
mutate(Well_ID = paste(plate, row, column, sep="_"))
growth_agar <- as.data.frame(fread(paste(base_dir, "Data/Growth/Mine/Processed_by_them/growth_agar.tsv", sep="")))
sick_strains_when_sent <- as.data.frame(read.xlsx(paste(base_dir, "Data/Sick_strains/20250131_TSV8-coordinates_very_sick_strains.xlsx", sep=""), 2))
no_growth_after_pinning <- as.data.frame(read.xlsx(paste(base_dir, "Data/Sick_strains/20250131_TSV8-coordinates_very_sick_strains.xlsx", sep=""), 3))
# Growth agar is just as I got it from them
# Sick strains I think it also comes from them, the strains that had barely grown when they sent them
# The last ones are the ones that were not supposed to be sick, but which didn't grow after Wenxi pinned them
# 1. Put all this information together into a single dataframe
sick_strains_when_sent <- sick_strains_when_sent %>%
filter(actually_healthy_after_pinning == "No") %>%
mutate(Well_ID = paste(plate, row, column, sep="_"))
no_growth_after_pinning <- no_growth_after_pinning %>%
mutate(Well_ID = paste(plate, row, column, sep="_"))
sample_layout <- growth_agar %>%
dplyr::select(Plate384, Row384, Col384, Sys.Name, Std.Name, TS.allele, Lab.ID, Notes) %>%
mutate(Well_ID = paste(Plate384, Row384, Col384, sep="_"),
sick_when_sent = case_when(Well_ID %in% sick_strains_when_sent$Well_ID ~ "Yes",
TRUE ~ "No"),
no_growth_after_pinning = case_when(Well_ID %in% no_growth_after_pinning$Well_ID ~ "Yes",
TRUE ~ "No"),
Available = case_when((sick_when_sent == "No" & no_growth_after_pinning == "No") ~ "Yes",
TRUE ~ "No"))
View(sample_layout)
growth_agar <- as.data.frame(fread(paste(base_dir, "Data/Growth/Mine/Processed_by_them/growth_agar.tsv", sep="")))
sick_strains_when_sent <- as.data.frame(read.xlsx(paste(base_dir, "Data/Sick_strains/20250131_TSV8-coordinates_very_sick_strains.xlsx", sep=""), 2))
no_growth_after_pinning <- as.data.frame(read.xlsx(paste(base_dir, "Data/Sick_strains/20250131_TSV8-coordinates_very_sick_strains.xlsx", sep=""), 3))
synthetases <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/trna_synthetases.csv"))
# Growth agar is just as I got it from them
# Sick strains I think it also comes from them, the strains that had barely grown when they sent them
# The last ones are the ones that were not supposed to be sick, but which didn't grow after Wenxi pinned them
# Synthetases - this dataframe is from the tRNA_KOs project, but I want to add a column here saying which TS alleles are for a tRNA synthetase
# 1. Put all this information together into a single dataframe
sick_strains_when_sent <- sick_strains_when_sent %>%
filter(actually_healthy_after_pinning == "No") %>%
mutate(Well_ID = paste(plate, row, column, sep="_"))
no_growth_after_pinning <- no_growth_after_pinning %>%
mutate(Well_ID = paste(plate, row, column, sep="_"))
sample_layout <- growth_agar %>%
dplyr::select(Plate384, Row384, Col384, Sys.Name, Std.Name, TS.allele, Lab.ID, Notes) %>%
mutate(Well_ID = paste(Plate384, Row384, Col384, sep="_"),
sick_when_sent = case_when(Well_ID %in% sick_strains_when_sent$Well_ID ~ "Yes",
TRUE ~ "No"),
no_growth_after_pinning = case_when(Well_ID %in% no_growth_after_pinning$Well_ID ~ "Yes",
TRUE ~ "No"),
Available = case_when((sick_when_sent == "No" & no_growth_after_pinning == "No") ~ "Yes",
TRUE ~ "No"),
Synthetase = case_when(Sys.Name %in% synthetases$Gene.secondaryIdentifier ~ "Yes",
TRUE ~ "No"))
sum(sample_layout$Available == "Yes" & sample_layout$Synthetase == "Yes")
# Delete this, just a quick check
temp <- sample_layout %>%
filter(Available == "Yes" & Synthetase == "Yes")
View(temp)
96/4
# Save this dataframe
fwrite(sample_layout, paste(base_dir, "Data/Boone_lab/sample_layout.csv"))
# Save this dataframe
fwrite(sample_layout, paste(base_dir, "Data/Boone_lab/sample_layout.csv", sep=""))
df <- data.frame(vals = rnorm(384),
well = num_to_well(1:384, plate = 384))
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/tRNA_KOs/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/tRNA_KOs/"
}
# Libraries
library(dplyr)
library(tidyr)
library(xlsx)
install.packages("platetools")
##################################################################################
# Come up with images of the 384-well plates coloring by strains of interest
library(platetools)
df <- data.frame(vals = rnorm(384),
well = num_to_well(1:384, plate = 384))
View(df)
sample_layout <- as.data.frame(fread(paste(base_dir, "Data/Boone_lab/sample_layout.csv")))
library(data.table)
sample_layout <- as.data.frame(fread(paste(base_dir, "Data/Boone_lab/sample_layout.csv")))
sample_layout <- as.data.frame(fread(paste(base_dir, "Data/Boone_lab/sample_layout.csv", sep="")))
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/TSSc/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/TSSC/"
}
sample_layout <- as.data.frame(fread(paste(base_dir, "Data/Boone_lab/sample_layout.csv", sep="")))
View(sample_layout)
letters(2)
letters[2]
LETTERS[Row384]
LETTERS[sample_layout$Row384]
# 2. Add a column with with well IDs in the "traditional" manner - for platetools
sample_layout <- sample_layout %>%
mutate(Well_ID_non_unique = case_when(nchar(as.character(Col384)) == 1 ~ paste(LETTERS[Row384], 0, Col384, sep=""),
TRUE ~ paste(LETTERS[Row384], Col384, sep="")))
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(values = as.numeric(Synthetase & Available)) %>%
dplyr::select(values, Well_ID_non_unique)
raw_map(data = temp$values,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i}")) +
theme_dark() +
scale_fill_viridis()
}
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(values = as.numeric(Synthetase == "Yes" & Available == "Yes")) %>%
dplyr::select(values, Well_ID_non_unique)
raw_map(data = temp$values,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i}")) +
theme_dark() +
scale_fill_viridis()
}
library(ggplot2)
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(values = as.numeric(Synthetase == "Yes" & Available == "Yes")) %>%
dplyr::select(values, Well_ID_non_unique)
raw_map(data = temp$values,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i}")) +
theme_dark() +
scale_fill_viridis()
}
library(glue)
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(values = as.numeric(Synthetase == "Yes" & Available == "Yes")) %>%
dplyr::select(values, Well_ID_non_unique)
raw_map(data = temp$values,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i}")) +
theme_dark() +
scale_fill_viridis()
}
library(viridis)
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(values = as.numeric(Synthetase == "Yes" & Available == "Yes")) %>%
dplyr::select(values, Well_ID_non_unique)
raw_map(data = temp$values,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i}")) +
theme_dark() +
scale_fill_viridis()
}
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(values = as.numeric(Synthetase == "Yes" & Available == "Yes")) %>%
dplyr::select(values, Well_ID_non_unique)
p <- raw_map(data = temp$values,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i}")) +
theme_dark() +
scale_fill_viridis()
print(p)
}
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(values = as.numeric(Synthetase == "Yes" & Available == "Yes")) %>%
dplyr::select(values, Well_ID_non_unique)
raw_map(data = temp$values,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i}")) +
theme_dark() +
scale_fill_viridis()
ggsave(paste(base_dir, "Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(values = as.numeric(Synthetase == "Yes" & Available == "Yes")) %>%
dplyr::select(values, Well_ID_non_unique)
raw_map(data = temp$values,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i}")) +
theme_dark() +
scale_fill_viridis() +
theme(axis.text=element_text(size=5))
ggsave(paste(base_dir, "Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(values = as.numeric(Synthetase == "Yes" & Available == "Yes")) %>%
dplyr::select(values, Well_ID_non_unique)
raw_map(data = temp$values,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i}")) +
theme_dark() +
scale_fill_viridis() +
theme(axis.text=element_text(size=7))
ggsave(paste(base_dir, "Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
raw_map(data = temp$values,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i}")) +
theme_dark() +
scale_fill_viridis() +
theme(axis.text=element_text(size=6))
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(values = as.numeric(Synthetase == "Yes" & Available == "Yes")) %>%
dplyr::select(values, Well_ID_non_unique)
raw_map(data = temp$values,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i}")) +
theme_dark() +
scale_fill_viridis() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(values = as.numeric(Synthetase == "Yes" & Available == "Yes")) %>%
dplyr::select(values, Well_ID_non_unique)
raw_map(data = temp$values,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA synthetases TS alleles")) +
theme_dark() +
scale_fill_viridis() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
knitr::opts_chunk$set(echo = TRUE)
# Synthetases dataframe
synthetases <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/trna_synthetases.csv", sep="")))
library(xlsx)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggrepel)
library(stringr)
# Set up directory
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Synthetases dataframe
synthetases <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/trna_synthetases.csv", sep="")))
# Agar growth data
growth_agar <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Growth/Mine/Processed_by_them/growth_agar.tsv", sep="")))
# Synthetases dataframe
synthetases <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/trna_synthetases.csv", sep="")))
# Agar growth data
growth_agar <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Boone_lab/Growth/Mine/Processed_by_them/growth_agar.tsv", sep="")))
# Master tRNA dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
# Amino acid information dataset
amino_acids <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Other/GtRNAdb/amino_acids.csv", sep="")))
View(synthetases)
# Grab the tRNA-synthetases that are in the library
trna_synths_in_library <- synthetases[synthetases$Gene.secondaryIdentifier %in% growth_agar$Sys.Name,]
trna_synths_in_library <- trna_synths_in_library[order(trna_synths_in_library$Gene.name),]
View(trna_synths_in_library)
# Check, out of the tRNA genes that couldn't be KOd in the tRNA KO library, how many correspond to which amino acids - what defines this? Explore in next chunk
sort(table(master_dataset$Isotype_from_anticodon[master_dataset$KOd == "No"]))
# Plots by anticodon
master_by_anticodon <- master_dataset %>%
distinct(Anticodon, .keep_all = T)
## Just the percentage of KOd genes per anticodon
ggplot(data = master_by_anticodon, aes(x = Anticodon, y = Perc_KOd_genes_per_anticodon)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(master_by_anticodon, Perc_KOd_genes_per_anticodon < 0.7), aes(x = Anticodon, y = Perc_KOd_genes_per_anticodon, label = Anticodon)) +
theme(axis.text.x = element_blank()) +
labs(title = "% of tRNA-genes with each anticodon that were KOd") +
ylab("% of genes KOd")
# Plots by amino acid - for some reason distinct() is not working???
master_by_amino_acid <- master_dataset[!duplicated(master_dataset$Isotype_from_anticodon),]
## Just the percentage of KOd genes per amino acid
ggplot(data = master_by_amino_acid, aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid, col = Number_of_tRNAs_loading_this_aa)) +
geom_point() +
theme_light() +
geom_text_repel(data = subset(master_by_amino_acid, Perc_KOd_genes_per_amino_acid < 0.8), aes(x = Isotype_from_anticodon, y = Perc_KOd_genes_per_amino_acid, label = Isotype_from_anticodon)) +
theme(axis.text.x = element_blank()) +
xlab("Amino acid") +
ylab("% of genes KOd") +
labs(title = "% of tRNA-genes carrying each amino acid that were KOd",
col = "Number of tRNAs\nloading this aa")
# How many tRNA genes are there for each amino acid?
ggplot(data = master_by_amino_acid, aes(x = Isotype_from_anticodon, y = Number_of_tRNAs_loading_this_aa)) +
geom_point() +
theme_light() +
theme(axis.text.x = element_blank()) +
labs(title = "Number of tRNA genes carrying each amino acid") +
xlab("Amino acid") +
ylab("Number of genes") +
geom_text_repel(data = subset(master_by_amino_acid, Number_of_tRNAs_loading_this_aa < 6 | Number_of_tRNAs_loading_this_aa > 20), aes(x = Isotype_from_anticodon, y = Number_of_tRNAs_loading_this_aa, label = Isotype_from_anticodon))
gc()
knitr::opts_chunk$set(echo = TRUE)
library(xlsx)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggrepel)
library(stringr)
library(glue)
library(viridis)
library(platetools)
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Synthetases dataframe
synthetases <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/trna_synthetases.csv", sep="")))
# Agar growth data
growth_agar <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Boone_lab/Growth/Mine/Processed_by_them/growth_agar.tsv", sep="")))
# Master tRNA dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
# Amino acid information dataset
amino_acids <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Other/GtRNAdb/amino_acids.csv", sep="")))
# Layout of samples in the 384-well plates we got from the Boone lab
sample_layout <- as.data.frame(fread(paste(base_dir, "Data/Boone_lab/sample_layout.csv", sep="")))
# Layout of samples in the 384-well plates we got from the Boone lab
sample_layout <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Boone_lab/sample_layout.csv", sep="")))
# Grab the tRNA-synthetases that are in the library
trna_synths_in_library <- synthetases[synthetases$Gene.secondaryIdentifier %in% growth_agar$Sys.Name,]
trna_synths_in_library <- trna_synths_in_library[order(trna_synths_in_library$Gene.name),]
# Check, out of the tRNA genes that couldn't be KOd in the tRNA KO library, how many correspond to which amino acids - what defines this? Explore in next chunk
sort(table(master_dataset$Isotype_from_anticodon[master_dataset$KOd == "No"]))
# Remove unnecessary variables
rm(temp)
# For each 384-well plate I need to come up with a separate dataframe, with only the column with the appropriate well IDs, and another column I want to color the wells by
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(values = as.numeric(Synthetase == "Yes" & Available == "Yes")) %>%
dplyr::select(values, Well_ID_non_unique)
raw_map(data = temp$values,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA synthetases TS alleles")) +
theme_dark() +
scale_fill_viridis() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "TSSC/Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
View(sample_layout)
# 2. Add a column with with well IDs in the "traditional" manner - for platetools
sample_layout <- sample_layout %>%
mutate(Well_ID_non_unique = case_when(nchar(as.character(Col384)) == 1 ~ paste(LETTERS[Row384], 0, Col384, sep=""),
TRUE ~ paste(LETTERS[Row384], Col384, sep="")))
# 3. Save this dataframe
fwrite(sample_layout, paste(base_dir, "Data/Boone_lab/sample_layout.csv", sep=""))
# Set up
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/TSSc/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/TSSC/"
}
# 3. Save this dataframe
fwrite(sample_layout, paste(base_dir, "Data/Boone_lab/sample_layout.csv", sep=""))
knitr::opts_chunk$set(echo = TRUE)
library(xlsx)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggrepel)
library(stringr)
library(glue)
library(viridis)
library(platetools)
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/"
}
# Synthetases dataframe
synthetases <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/trna_synthetases.csv", sep="")))
# Agar growth data
growth_agar <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Boone_lab/Growth/Mine/Processed_by_them/growth_agar.tsv", sep="")))
# Master tRNA dataset
master_dataset <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Other/GtRNAdb/master_tRNA_dataset.csv", sep="")))
# Amino acid information dataset
amino_acids <- as.data.frame(fread(paste(base_dir, "tRNA_KOs/Data/Other/GtRNAdb/amino_acids.csv", sep="")))
# Layout of samples in the 384-well plates we got from the Boone lab
sample_layout <- as.data.frame(fread(paste(base_dir, "TSSC/Data/Boone_lab/sample_layout.csv", sep="")))
# Grab the tRNA-synthetases that are in the library
trna_synths_in_library <- synthetases[synthetases$Gene.secondaryIdentifier %in% growth_agar$Sys.Name,]
trna_synths_in_library <- trna_synths_in_library[order(trna_synths_in_library$Gene.name),]
# Check, out of the tRNA genes that couldn't be KOd in the tRNA KO library, how many correspond to which amino acids - what defines this? Explore in next chunk
sort(table(master_dataset$Isotype_from_anticodon[master_dataset$KOd == "No"]))
# For each 384-well plate I need to come up with a separate dataframe, with only the column with the appropriate well IDs, and another column I want to color the wells by
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(values = as.numeric(Synthetase == "Yes" & Available == "Yes")) %>%
dplyr::select(values, Well_ID_non_unique)
raw_map(data = temp$values,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA synthetases TS alleles")) +
theme_dark() +
scale_fill_viridis() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "TSSC/Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
# For each 384-well plate I need to come up with a separate dataframe, with only the column with the appropriate well IDs, and another column I want to color the wells by
for (i in 1:4) {
temp <- sample_layout %>%
filter(Plate384 == i) %>%
mutate(values = as.numeric(Synthetase == "Yes" & Available == "Yes")) %>%
dplyr::select(values, Well_ID_non_unique)
raw_map(data = temp$values,
well = temp$Well_ID_non_unique,
plate = 384) +
ggtitle(glue("Plate {i} - tRNA synthetases TS alleles")) +
theme_dark() +
scale_fill_viridis() +
theme(axis.text=element_text(size=6))
ggsave(paste(base_dir, "TSSC/Output/Plots/sample_layout/synthetases_plate_", i, ".png", sep=""))
}
LETTERS["A"]
number("a")
numbers("a")
numbers["a"]
View(growth_agar)
growth_agar <- growth_agar %>%
mutate(possible_selection = case_when(Plate384 == 4 & (Row384 == which(letters == "f")|Row384 == which(letters == "g")) ~ TRUE,
TRUE ~ FALSE))
ggplot(data = growth_agar, aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(possible_selection))) +
geom_point() +
geom_abline() +
labs(col = "Ratio 26ºC/22ºC") +
theme_light() +
xlab("AUC at 22ºC") +
ylab("AUC at 26ºC")
