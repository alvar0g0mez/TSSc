group_by(Plate384.ID) %>%
mutate(Rep_2_AUC_26 = mean(AUCs)) %>%
select(-c(AUCs, plate384, row384, col384)) %>%
distinct(Plate384.ID, .keep_all = T) %>%
left_join(raw_agar_temp, by = c("Unique.ID", "temperature", "replicate"))
View(AUCs_rep_1_22)
View(AUCs_rep_1_26)
AUCs_rep_1_22 <- AUCs_temp %>%
filter(replicate == 1 & temperature == 22) %>%
left_join(raw_agar_temp_2, by = c("Unique.ID", "temperature", "replicate")) %>%
mutate(Plate384.ID = paste(plate384, row384, col384, sep = "_")) %>%
group_by(Plate384.ID) %>%
mutate(Rep_1_AUC_22 = mean(AUCs)) %>%
select(-c(AUCs, plate384, row384, col384)) %>%
distinct(Plate384.ID, .keep_all = T) %>%
left_join(raw_agar_temp, by = c("Unique.ID", "temperature", "replicate"))
AUCs_rep_2_22 <- AUCs_temp %>%
filter(replicate == 2 & temperature == 22) %>%
left_join(raw_agar_temp_2, by = c("Unique.ID", "temperature", "replicate")) %>%
mutate(Plate384.ID = paste(plate384, row384, col384, sep = "_")) %>%
group_by(Plate384.ID) %>%
mutate(Rep_2_AUC_22 = mean(AUCs)) %>%
select(-c(AUCs, plate384, row384, col384)) %>%
distinct(Plate384.ID, .keep_all = T)
AUCs_rep_1_26 <- AUCs_temp %>%
filter(replicate == 1 & temperature == 26) %>%
left_join(raw_agar_temp_2, by = c("Unique.ID", "temperature", "replicate")) %>%
mutate(Plate384.ID = paste(plate384, row384, col384, sep = "_")) %>%
group_by(Plate384.ID) %>%
mutate(Rep_1_AUC_26 = mean(AUCs)) %>%
select(-c(AUCs, plate384, row384, col384)) %>%
distinct(Plate384.ID, .keep_all = T)
AUCs_rep_2_26 <- AUCs_temp %>%
filter(replicate == 2 & temperature == 26) %>%
left_join(raw_agar_temp_2, by = c("Unique.ID", "temperature", "replicate")) %>%
mutate(Plate384.ID = paste(plate384, row384, col384, sep = "_")) %>%
group_by(Plate384.ID) %>%
mutate(Rep_2_AUC_26 = mean(AUCs)) %>%
select(-c(AUCs, plate384, row384, col384)) %>%
distinct(Plate384.ID, .keep_all = T)
## Join these separate datasets
final_AUCs <- left_join(AUCs_rep_1_22, AUCs_rep_1_26, by = c("Unique.ID", "temperature", "replicate", "Plate384.ID"))
final_AUCs <- left_join(final_AUCs, AUCs_rep_2_22, by = c("Unique.ID", "temperature", "replicate", "Plate384.ID"))
final_AUCs <- left_join(final_AUCs, AUCs_rep_2_26, by = c("Unique.ID", "temperature", "replicate", "Plate384.ID"))
View(final_AUCs)
## Join these separate datasets
final_AUCs <- left_join(AUCs_rep_1_26, AUCs_rep_2_22, by = c("Unique.ID", "temperature", "replicate", "Plate384.ID"))
View(AUCs_rep_2_22)
## Join these separate datasets
final_AUCs <- left_join(AUCs_rep_1_26, AUCs_rep_2_22, by = c("Plate384.ID"))
AUCs_rep_2_22 <- AUCs_temp %>%
filter(replicate == 2 & temperature == 22) %>%
left_join(raw_agar_temp_2, by = c("Unique.ID", "temperature", "replicate")) %>%
mutate(Plate384.ID = paste(plate384, row384, col384, sep = "_")) %>%
group_by(Plate384.ID) %>%
mutate(Rep_2_AUC_22 = mean(AUCs)) %>%
select(-c(AUCs, plate384, row384, col384)) %>%
distinct(Plate384.ID, .keep_all = T) %>%
select(Plate384.ID, Rep_2_AUC_22)
AUCs_rep_1_26 <- AUCs_temp %>%
filter(replicate == 1 & temperature == 26) %>%
left_join(raw_agar_temp_2, by = c("Unique.ID", "temperature", "replicate")) %>%
mutate(Plate384.ID = paste(plate384, row384, col384, sep = "_")) %>%
group_by(Plate384.ID) %>%
mutate(Rep_1_AUC_26 = mean(AUCs)) %>%
select(-c(AUCs, plate384, row384, col384)) %>%
distinct(Plate384.ID, .keep_all = T) %>%
select(Plate384.ID, Rep_1_AUC_26)
AUCs_rep_2_26 <- AUCs_temp %>%
filter(replicate == 2 & temperature == 26) %>%
left_join(raw_agar_temp_2, by = c("Unique.ID", "temperature", "replicate")) %>%
mutate(Plate384.ID = paste(plate384, row384, col384, sep = "_")) %>%
group_by(Plate384.ID) %>%
mutate(Rep_2_AUC_26 = mean(AUCs)) %>%
select(-c(AUCs, plate384, row384, col384)) %>%
distinct(Plate384.ID, .keep_all = T) %>%
select(Plate384.ID, Rep_2_AUC_26)
## Join these separate datasets
final_AUCs <- left_join(AUCs_rep_1_26, AUCs_rep_2_22, by = c("Plate384.ID"))
final_AUCs <- left_join(final_AUCs, AUCs_rep_2_26, by = c("Plate384.ID"))
final_AUCs <- left_join(AUCs_rep_1_22, final_AUCs, by = c("Plate384.ID"))
## Separate by replicates, rename columns
## In this process I create an ID for the 384-well plate so that I can collapse by it
AUCs_rep_1_22 <- AUCs_temp %>%
filter(replicate == 1 & temperature == 22) %>%
left_join(raw_agar_temp_2, by = c("Unique.ID", "temperature", "replicate")) %>%
mutate(Plate384.ID = paste(plate384, row384, col384, sep = "_")) %>%
group_by(Plate384.ID) %>%
mutate(Rep_1_AUC_22 = mean(AUCs)) %>%
select(-c(AUCs, plate384, row384, col384)) %>%
distinct(Plate384.ID, .keep_all = T) %>%
left_join(raw_agar_temp, by = c("Unique.ID", "temperature", "replicate")) %>%
relocate(Rep_1_AUC_22, .after = last_col())
final_AUCs <- left_join(AUCs_rep_1_26, AUCs_rep_2_22, by = c("Plate384.ID"))
final_AUCs <- left_join(final_AUCs, AUCs_rep_2_26, by = c("Plate384.ID"))
final_AUCs <- left_join(AUCs_rep_1_22, final_AUCs, by = c("Plate384.ID"))
## Get some final columns to have the same information as in the original one
final_AUCs <- final_AUCs %>%
mutate(Avg_AUC_22 = mean(Rep_1_AUC_22, Rep_2_AUC_22),
Avg_AUC_26 = mean(Rep_1_AUC_26, Rep_2_AUC_26))
ggplot(data = final_AUCs, aes(x = Avg_AUC_22, y = Avg_AUC_26, col = plate384)) +
geom_point()
ggplot(data = final_AUCs, aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(plate384))) +
geom_point()
ggplot(data = final_AUCs, aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(plate384))) +
geom_point() +
theme_light() +
labs(col = "384-well plate")
ggplot(data = final_AUCs, aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(plate384))) +
geom_point() +
geom_abline() +
theme_light() +
labs(col = "384-well plate")
levels(as.factor(final_AUCs$plate1536))
ggplot(data = final_AUCs, aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(plate1536))) +
geom_point() +
geom_abline() +
theme_light() +
labs(col = "1536-well plate")
levels(as.factor(raw_agar$plate1536))
levels(as.factor(final_AUCs$replicate))
## Get some final columns to have the same information as in the original one
final_AUCs <- final_AUCs %>%
select(-replicate) %>%
mutate(Avg_AUC_22 = mean(Rep_1_AUC_22, Rep_2_AUC_22),
Avg_AUC_26 = mean(Rep_1_AUC_26, Rep_2_AUC_26))
knitr::opts_chunk$set(echo = TRUE)
library(xlsx)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggrepel)
library(stringr)
working_from = "charite"
if (working_from == "home") {
base_dir = "/home/alvaro/MyStuff/TSSc/"
} else
if (working_from == "charite") {
base_dir = "C:/MyStuff/TSSC/"
}
growth_agar <- as.data.frame(fread(paste(base_dir, "Data/Growth/My versions/Processed_by_them/growth_agar.tsv", sep="")))
growth_liquid <- as.data.frame(fread(paste(base_dir, "Data/Growth/My versions/Processed_by_them/growth_liquid.tsv", sep="")))
growth_agar <- as.data.frame(fread(paste(base_dir, "Data/Growth/Mine/Processed_by_them/growth_agar.tsv", sep="")))
growth_liquid <- as.data.frame(fread(paste(base_dir, "Data/Growth/Mine/Processed_by_them/growth_liquid.tsv", sep="")))
# Check rows annotated to be excluded in "SB.notes" column - in agar dataset
levels(as.factor(growth_agar$SB.notes))
bool_vect_exclude <- grepl("exclude", growth_agar$SB.notes, ignore.case = T)
bool_vect_exclude_empty <- grepl("empty", growth_agar$SB.notes)
sum(bool_vect_exclude)                                                  # 20 rows to be excluded
sum(bool_vect_exclude_empty)                                            # Out of them, 3 is because they are empty
# Check control strain - in agar dataset
bool_vect_control_strain <- grepl("control", growth_agar$SB.notes)
sum(bool_vect_control_strain)                                           # Only 1 row of control - makes sense since replicates are in columns
# Check other Notes column - in agar dataset
#table(as.factor(growth_agar$Notes))
# All those that say "Repeat at ..."                  --> also "exclude" in the SB.notes
# 1 "failed construction"                             --> also "exclude"
# 3 "ignore colony - Li isn't sure what it is"        --> also "exclude"
# 8 "Li's control BY4741 + p13623"                    --> also "exclude", not sure why but okay?
# "P01-C12: apc11-22_Y11147" and "P01-C12: apc11-22_Y11147", 3rd try --> same IDs! Tag them manually as repeats of the same?
# Many individual ones with structure: P01-D12: cdc36-16_Y08308, all other columns in order, not sure what this means
# Wild type control, BY4741
# Y1239 + p13623 control added by Fang                --> still not sure why this is the control strain but okay. Is it the strain they started from to add the different ts alleles?
# Remove unnecessary variables
rm(bool_vect_control_strain, bool_vect_exclude, bool_vect_exclude_empty)
# Check that the levels of the Notes column are the same between datasets
length(levels(as.factor(growth_agar$Notes))) ==  length(levels(as.factor(growth_liquid$Notes)))                                     # Same number of levels
sum(levels(as.factor(growth_agar$Notes)) == levels(as.factor(growth_liquid$Notes)))/length(levels(as.factor(growth_agar$Notes)))    # Levels are exactly the same
# Check that the notes are exactly the same in the liquid and agar data for every row
liquid_temp <- growth_liquid %>%
mutate(ID = paste(Sys.Name, Std.Name, TS.allele, Lab.ID, sep = "_")) %>%
filter(Dilution == "1/10" & ID != "___") %>%
select(Sys.Name, Std.Name, TS.allele, Lab.ID, Notes, SB.notes, ID) %>%
rename(Notes_liquid = Notes,
SB.notes_liquid = SB.notes)
agar_temp <- growth_agar %>%
mutate(ID = paste(Sys.Name, Std.Name, TS.allele, Lab.ID, sep = "_")) %>%
filter(ID != "___") %>%
select(Sys.Name, Std.Name, TS.allele, Lab.ID, Notes, SB.notes, ID) %>%
rename(Notes_agar = Notes,
SB.notes_agar = SB.notes)
temp <- full_join(liquid_temp, agar_temp, by = c("ID"))                         # This is where the many-to-many relationship happens
sum(temp$Notes_liquid == temp$Notes_agar)
sum(temp$SB.notes_liquid == temp$SB.notes_agar)
## Pretty sure that notes are exactly the same between datasets - there are just some problematic rows because their IDs are repeated within each of the datasets
count_liquid_ID_reps <- c()
for (i in 1:nrow(liquid_temp)) {
ID_liquid <- liquid_temp$ID[i]
count_liquid_ID_reps <- c(count_liquid_ID_reps, sum(agar_temp$ID == ID_liquid))
}
problematic_rows_liquid <- liquid_temp[count_liquid_ID_reps != 1,]
count_agar_ID_reps <- c()
for (i in 1:nrow(agar_temp)) {
ID_agar <- agar_temp$ID[i]
count_agar_ID_reps <- c(count_agar_ID_reps, sum(liquid_temp$ID == ID_agar))
}
problematic_rows_agar <- agar_temp[count_agar_ID_reps != 1,]
## Check that these 2 dataframes are exactly equal to each other
ncol(problematic_rows_agar)*nrow(problematic_rows_agar) == (ncol(problematic_rows_liquid)*nrow(problematic_rows_liquid))    # Check same dimensions
sum(problematic_rows_agar == problematic_rows_liquid)/(ncol(problematic_rows_agar)*nrow(problematic_rows_agar))              # Check all position equal
## Sumarize all of this in a single dataframe and delete all the other stuff
problematic_rows <- problematic_rows_agar
# Remove unnecesary variables
rm(problematic_rows_agar, problematic_rows_liquid, agar_temp, liquid_temp, i, count_agar_ID_reps, count_liquid_ID_reps, ID_agar, ID_liquid, temp)
# Exclude rows to be excluded
growth_agar <- growth_agar[!(grepl("exclude", growth_agar$SB.notes, ignore.case = T)),]
growth_liquid <- growth_liquid[!(grepl("exclude", growth_liquid$SB.notes, ignore.case = T)),]
# Separate liquid into 2 datasets - for the 2 different dilutions
growth_liquid_1_10 <- growth_liquid %>% filter(Dilution == "1/10")
growth_liquid_1_100 <- growth_liquid %>% filter(Dilution == "1/100")
growth_liquid_full <- growth_liquid
rm(growth_liquid)
# Overlayed histograms for the 2 temperatures
ggplot(data = growth_agar) +
geom_histogram(aes(x = Avg_AUC_22, fill = "22ºC"), alpha = 0.4, position="identity") +
geom_histogram(aes(x = Avg_AUC_26, fill = "26ºC"), alpha = 0.4, position="identity") +
theme_light() +
ylab("Count") +
xlab("Average AUC across biological replicates") +
scale_fill_manual(name = "Temperature",
breaks = c("22ºC", "26ºC"),
values = c("22ºC"="lightblue", "26ºC"="orange"))
# Get a histogram of the difference
ggplot(data = growth_agar, aes(x = Avg_AUC_26 - Avg_AUC_22)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
ylab("Count") +
xlab("Diff. in average AUC (26ºC - 22ºC)")
# Get a scatter plot of Avg_AUC_22 vs. Avg_AUC_26 (same info as the histogram, but I think this one is more informative)
## Get the ratio between the 2 to color by it
growth_agar <- growth_agar %>%
mutate(Ratio_26_to_22 = as.factor(case_when(Avg_AUC_26/Avg_AUC_22 < 0.8 ~ "Below_0.8",
TRUE ~ "Above_0.8")))
## Get the plot
ggplot(data = growth_agar, aes(x = Avg_AUC_22, y = Avg_AUC_26)) +
geom_point() +
geom_abline() +
theme_light() +
labs(col = "Ratio 26ºC/22ºC") +
labs(title = "With average AUCs across replicates") +
xlab("AUC at 22ºC") +
ylab("AUC at 26ºC")
# Get the same scatter plot but using the AUCs normalized based on the plate average - I assume this kind of corrects for batch effects? Or that is their idea?
## Get the ratio
growth_agar <- growth_agar %>%
mutate(Ratio_26_to_22_norm_by_plate = as.factor(case_when(Relative_AUC_to_plate_mean_26/Relative_AUC_to_plate_mean_22 < 0.8 ~ "Below_0.8",
TRUE ~ "Above_0.8")))
## Get the plot
ggplot(data = growth_agar, aes(x = Relative_AUC_to_plate_mean_22, y = Relative_AUC_to_plate_mean_26)) +
geom_point() +
geom_abline() +
labs(col = "Ratio 26ºC/22ºC") +
theme_light() +
labs(title = "With (average) AUCs normalized to plate mean") +
xlab("AUC at 22ºC") +
ylab("AUC at 26ºC")
# Get the same scatter plot but using the AUCs normalized based on the WTs in each plate
## Get the ratio
growth_agar <- growth_agar %>%
mutate(Ratio_26_to_22_norm_by_control = as.factor(case_when(Relative_AUC_to_control_mean_26/Relative_AUC_to_control_mean_22 < 0.8 ~ "Below_0.8",
TRUE ~ "Above_0.8")))
## Get the plot
ggplot(data = growth_agar, aes(x = Relative_AUC_to_control_mean_22, y = Relative_AUC_to_control_mean_26)) +
geom_point() +
geom_abline() +
labs(col = "Ratio 26ºC/22ºC") +
theme_light() +
labs(title = "With (average) AUCs normalized to plate mean") +
xlab("AUC at 22ºC") +
ylab("AUC at 26ºC")
# Same plot but color by plate just to be sure there isn't a huge effect of that - there is :(
ggplot(data = growth_agar, aes(x = Relative_AUC_to_control_mean_22, y = Relative_AUC_to_control_mean_26, col = as.factor(Plate384))) +
geom_point() +
geom_abline() +
labs(col = "Plate") +
labs(title = "With (average) AUCs normalized to control mean") +
theme_light() +
xlab("AUC at 22ºC") +
ylab("AUC at 26ºC")
# Oh no, all the ones that seem to grow better between 22ºC are from a certain 384-well plate - come up with plate_column and plate_row variables that I can plot based on
growth_agar <- growth_agar %>%
mutate(Plate_Column = paste(Plate384, Col384, sep="_"),
Plate_Row = paste(Plate384, Row384, sep="_"))
# Plot based on Plate_Column
ggplot(data = growth_agar, aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(Plate_Column))) +
geom_point() +
geom_abline() +
labs(col = "Ratio 26ºC/22ºC") +
theme_light() +
xlab("AUC at 22ºC") +
ylab("AUC at 26ºC") +
geom_text_repel(data = subset(growth_agar, Ratio_26_to_22 == "Below_0.8"), aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(Plate_Column), label = Plate_Column)) +
theme(legend.position = "none")
# Plot based on Plate_Row
ggplot(data = growth_agar, aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(Plate_Row))) +
geom_point() +
geom_abline() +
labs(col = "Ratio 26ºC/22ºC") +
theme_light() +
xlab("AUC at 22ºC") +
ylab("AUC at 26ºC") +
geom_text_repel(data = subset(growth_agar, Ratio_26_to_22 == "Below_0.8"), aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(Plate_Row), label = Plate_Column)) +
theme(legend.position = "none")
# Overlayed histograms for the 2 temperatures
ggplot(data = growth_liquid_1_10) +
geom_histogram(aes(x = Avg_AUC_22, fill = "22ºC"), alpha = 0.4, position="identity") +
geom_histogram(aes(x = Avg_AUC_26, fill = "26ºC"), alpha = 0.4, position="identity") +
theme_light() +
ylab("Count") +
xlab("Average AUC across biological replicates") +
scale_fill_manual(name = "Temperature",
breaks = c("22ºC", "26ºC"),
values = c("22ºC"="lightblue", "26ºC"="orange"))
# Overlayed histogram colored by Platenum
ggplot(data = growth_liquid_1_10) +
geom_histogram(aes(x = Avg_AUC_22, fill = Platenum, group = Platenum), alpha = 0.4, position="identity") +
geom_histogram(aes(x = Avg_AUC_26, fill = Platenum, group = Platenum), alpha = 0.4, position="identity") +
theme_light() +
ylab("Count") +
xlab("Average AUC across biological replicates")
# Get a histogram of the difference
ggplot(data = growth_liquid_1_10, aes(x = Avg_AUC_26 - Avg_AUC_22)) +
geom_histogram(col = "black", fill = "grey") +
theme_light() +
ylab("Count") +
xlab("Diff. in average AUC (26ºC - 22ºC)")
# Get a scatter plot of Avg_AUC_22 vs. Avg_AUC_26 (same info as the histogram, but I think this one is more informative)
## Get the ratio between the 2 to color by it
growth_liquid_1_10 <- growth_liquid_1_10 %>%
mutate(Ratio_26_to_22 = as.factor(case_when(Avg_AUC_26/Avg_AUC_22 < 0.8 ~ "Below_0.8",
TRUE ~ "Above_0.8")))
## Get the plot
ggplot(data = growth_liquid_1_10, aes(x = Avg_AUC_22, y = Avg_AUC_26)) +
geom_point() +
geom_abline() +
theme_light() +
labs(col = "Ratio 26ºC/22ºC") +
labs(title = "With average AUCs across replicates") +
xlab("AUC at 22ºC") +
ylab("AUC at 26ºC")
# Get the same scatter plot but using the AUCs normalized based on the plate average - I assume this kind of corrects for batch effects? Or that is their idea?
## Get the ratio
growth_liquid_1_10 <- growth_liquid_1_10 %>%
mutate(Ratio_26_to_22_norm_by_plate = as.factor(case_when(Relative_AUC_to_plate_mean_26/Relative_AUC_to_plate_mean_22 < 0.8 ~ "Below_0.8",
TRUE ~ "Above_0.8")))
## Get the plot
ggplot(data = growth_liquid_1_10, aes(x = Relative_AUC_to_plate_mean_22, y = Relative_AUC_to_plate_mean_26)) +
geom_point() +
geom_abline() +
labs(col = "Ratio 26ºC/22ºC") +
theme_light() +
labs(title = "With (average) AUCs normalized to plate mean") +
xlab("AUC at 22ºC") +
ylab("AUC at 26ºC")
# Color by Platenum (whatever that is) just to be sure there isn't a huge effect of that - there is :(
ggplot(data = growth_liquid_1_10, aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(Platenum))) +
geom_point() +
geom_abline() +
labs(col = "Plate") +
labs(title = "With average AUCs across replicates") +
theme_light() +
xlab("AUC at 22ºC") +
ylab("AUC at 26ºC")
## Get the plot
ggplot(data = growth_liquid_1_10, aes(x = Relative_AUC_to_plate_mean_22, y = Relative_AUC_to_plate_mean_26, col = as.factor(Platenum))) +
geom_point() +
geom_abline() +
labs(col = "Ratio 26ºC/22ºC") +
theme_light() +
labs(title = "With (average) AUCs normalized to plate mean") +
xlab("AUC at 22ºC") +
ylab("AUC at 26ºC")
# Based on their growth curves
weird_strains <- growth_agar %>% filter(Ratio_26_to_22 == "Below_0.8")
sort(unique(weird_strains$Row384))
sort(unique(weird_strains$Col384))
# Based on the article from Li et al., 2011
li_1 <- fread("C:/MyStuff/TSSC/Data/From articles/Li_et_al_2011/Li_et_al_S1.csv")
li_1 <- li_1 %>%
rename(TS.allele = ts.allele) %>%
filter(sick_temp_lower == 26 | sick_temp_upper == 26 | lethal_temp_lower == 26 | lethal_temp_upper == 26)
# Check how many of the weird ones based on growth data are among those sick at 22ºC in the article - well fuck me
sum(weird_strains$TS.allele %in% li_1$TS.allele)
# I actually also want to color this by the strains that have a TS allele for a tRNA synthetase, let me do that real quick
synthetases <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/trna_synthetases.csv"))
View(growth_agar)
growth_agar <- growth_agar %>%
mutate(Synthetase = case_when(Sys.name %in% synthetases$Gene.secondaryIdentifier ~ "Yes",
TRUE ~ "No"))
growth_agar <- growth_agar %>%
mutate(Synthetase = case_when(Sys.Name %in% synthetases$Gene.secondaryIdentifier ~ "Yes",
TRUE ~ "No"))
ggplot(data = growth_agar, aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(Synthetase))) +
geom_point() +
geom_abline() +
labs(col = "Ratio 26ºC/22ºC") +
theme_light() +
xlab("AUC at 22ºC") +
ylab("AUC at 26ºC") +
geom_text_repel(data = subset(growth_agar, Ratio_26_to_22 == "Below_0.8"), aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(Plate_Row), label = Plate_Column)) +
theme(legend.position = "none")
ggplot(data = growth_agar, aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(Synthetase))) +
geom_point() +
geom_abline() +
labs(col = "Ratio 26ºC/22ºC") +
theme_light() +
xlab("AUC at 22ºC") +
ylab("AUC at 26ºC") +
geom_text_repel(data = subset(growth_agar, Ratio_26_to_22 == "Below_0.8"), aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(Plate_Row), label = Plate_Column))
ggplot(data = growth_agar, aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(Synthetase))) +
geom_point() +
geom_abline() +
labs(col = "Ratio 26ºC/22ºC") +
theme_light() +
xlab("AUC at 22ºC") +
ylab("AUC at 26ºC")
ggplot(data = growth_agar, aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(Synthetase))) +
geom_point() +
geom_abline() +
labs(col = "Ratio 26ºC/22ºC") +
theme_light() +
xlab("AUC at 22ºC") +
ylab("AUC at 26ºC") +
geom_text_repel(data = subset(growth_agar, Synthetase == "Yes"), aes(x = Avg_AUC_22, y = Avg_AUC_26, col = as.factor(Synthetase), label = Sys.Name))
96/4
sum(growth_agar$Synthetase == "Yes")
View(growth_agar)
library(xlsx)
sick_strains_when_sent <- as.data.frame(read.xlsx(paste(base_dir, "Data/Sick_strains/20250131_TSV8-coordinates_very_sick_strains.xlsx", sep="")))
sick_strains_when_sent <- as.data.frame(read.xlsx(paste(base_dir, "Data/Sick_strains/20250131_TSV8-coordinates_very_sick_strains.xlsx", sep=""), 2))
View(sick_strains_when_sent)
no_growth_after_pinning <- as.data.frame(read.xlsx(paste(base_dir, "Data/Sick_strains/20250131_TSV8-coordinates_very_sick_strains.xlsx", sep=""), 3))
View(no_growth_after_pinning)
View(problematic_rows)
96*3
96*4
384*4
sick_strains_when_sent <- as.data.frame(read.xlsx(paste(base_dir, "Data/Sick_strains/20250131_TSV8-coordinates_very_sick_strains.xlsx", sep=""), 2))
sick_strains_when_sent <- sick_strains_when_sent %>%
filter(actually_healthy_after_pinning == "No") %>%
mutate(Well_ID = paste(plate, row, col, sep="_"))
class(sick_strains_when_sent)
class(sick_strains_when_sent[,1])
class(sick_strains_when_sent$row)
sick_strains_when_sent <- sick_strains_when_sent %>%
filter(actually_healthy_after_pinning == "No") %>%
mutate(Well_ID = paste(plate, row, col, sep="_"))
sick_strains_when_sent <- sick_strains_when_sent %>%
mutate(Well_ID = paste(plate, row, col, sep="_"))
sick_strains_when_sent <- sick_strains_when_sent %>%
filter(actually_healthy_after_pinning == "No") %>%
mutate(Well_ID = paste(plate, row, column, sep="_"))
no_growth_after_pinning <- no_growth_after_pinning %>%
mutate(Well_ID = paste(plate, row, column, sep="_"))
growth_agar <- as.data.frame(fread(paste(base_dir, "Data/Growth/Mine/Processed_by_them/growth_agar.tsv", sep="")))
sick_strains_when_sent <- as.data.frame(read.xlsx(paste(base_dir, "Data/Sick_strains/20250131_TSV8-coordinates_very_sick_strains.xlsx", sep=""), 2))
no_growth_after_pinning <- as.data.frame(read.xlsx(paste(base_dir, "Data/Sick_strains/20250131_TSV8-coordinates_very_sick_strains.xlsx", sep=""), 3))
# Growth agar is just as I got it from them
# Sick strains I think it also comes from them, the strains that had barely grown when they sent them
# The last ones are the ones that were not supposed to be sick, but which didn't grow after Wenxi pinned them
# 1. Put all this information together into a single dataframe
sick_strains_when_sent <- sick_strains_when_sent %>%
filter(actually_healthy_after_pinning == "No") %>%
mutate(Well_ID = paste(plate, row, column, sep="_"))
no_growth_after_pinning <- no_growth_after_pinning %>%
mutate(Well_ID = paste(plate, row, column, sep="_"))
sample_layout <- growth_agar %>%
dplyr::select(Plate384, Row384, Col384, Sys.Name, Std.Name, TS.allele, Lab.ID, Notes) %>%
mutate(Well_ID = paste(Plate384, Row384, Col384, sep="_"),
sick_when_sent = case_when(Well_ID %in% sick_strains_when_sent$Well_ID ~ "Yes",
TRUE ~ "No"),
no_growth_after_pinning = case_when(Well_ID %in% no_growth_after_pinning$Well_ID ~ "Yes",
TRUE ~ "No"),
Available = case_when((sick_when_sent == "No" & no_growth_after_pinning == "No") ~ "Yes",
TRUE ~ "No"))
View(sample_layout)
growth_agar <- as.data.frame(fread(paste(base_dir, "Data/Growth/Mine/Processed_by_them/growth_agar.tsv", sep="")))
sick_strains_when_sent <- as.data.frame(read.xlsx(paste(base_dir, "Data/Sick_strains/20250131_TSV8-coordinates_very_sick_strains.xlsx", sep=""), 2))
no_growth_after_pinning <- as.data.frame(read.xlsx(paste(base_dir, "Data/Sick_strains/20250131_TSV8-coordinates_very_sick_strains.xlsx", sep=""), 3))
synthetases <- as.data.frame(fread("C:/MyStuff/tRNA_KOs/Data/trna_synthetases.csv"))
# Growth agar is just as I got it from them
# Sick strains I think it also comes from them, the strains that had barely grown when they sent them
# The last ones are the ones that were not supposed to be sick, but which didn't grow after Wenxi pinned them
# Synthetases - this dataframe is from the tRNA_KOs project, but I want to add a column here saying which TS alleles are for a tRNA synthetase
# 1. Put all this information together into a single dataframe
sick_strains_when_sent <- sick_strains_when_sent %>%
filter(actually_healthy_after_pinning == "No") %>%
mutate(Well_ID = paste(plate, row, column, sep="_"))
no_growth_after_pinning <- no_growth_after_pinning %>%
mutate(Well_ID = paste(plate, row, column, sep="_"))
sample_layout <- growth_agar %>%
dplyr::select(Plate384, Row384, Col384, Sys.Name, Std.Name, TS.allele, Lab.ID, Notes) %>%
mutate(Well_ID = paste(Plate384, Row384, Col384, sep="_"),
sick_when_sent = case_when(Well_ID %in% sick_strains_when_sent$Well_ID ~ "Yes",
TRUE ~ "No"),
no_growth_after_pinning = case_when(Well_ID %in% no_growth_after_pinning$Well_ID ~ "Yes",
TRUE ~ "No"),
Available = case_when((sick_when_sent == "No" & no_growth_after_pinning == "No") ~ "Yes",
TRUE ~ "No"),
Synthetase = case_when(Sys.Name %in% synthetases$Gene.secondaryIdentifier ~ "Yes",
TRUE ~ "No"))
sum(sample_layout$Available == "Yes" & sample_layout$Synthetase == "Yes")
# Delete this, just a quick check
temp <- sample_layout %>%
filter(Available == "Yes" & Synthetase == "Yes")
View(temp)
96/4
# Save this dataframe
fwrite(sample_layout, paste(base_dir, "Data/Boone_lab/sample_layout.csv"))
# Save this dataframe
fwrite(sample_layout, paste(base_dir, "Data/Boone_lab/sample_layout.csv", sep=""))
