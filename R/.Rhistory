Row = rep(c("A", "B", "C"), 12)
rep(c("A", "B", "C"), 12)
c(rep("A", 12), rep("B", 12), rep("C", 12))
col_name <- "x"
df[[col_name]]
add_well_IDs <- function(df,
column_numbers,
row_letters) {
df <- df %>%
dplyr::mutate(Well_ID = case_when(nchar(as.character(df[[column_numbers]])) == 2 ~ paste(df[[row_letters]], df[[column_numbers]], sep=""),
nchar(as.character(df[[column_numbers]])) == 1 ~ paste(df[[row_letters]], 0, df[[column_numbers]], sep="")))
return(df)
}
strains_for_proteomics_randomized_1 <- slice(strains_for_proteomics, rep(1:nrow(strains_for_proteomics), 3))                            # Get triplicates of the rows
strains_for_proteomics_randomized_1 <- strains_for_proteomics_randomized_1[sample(nrow(strains_for_proteomics_randomized_1)),] %>%      # Randomize row order
dplyr::mutate(Column = rep(seq(from = 1, to = 12, by = 1), 3),                                                                        # Assign columns
Row = c(rep("A", 12), rep("B", 12), rep("C", 12)))
View(strains_for_proteomics_randomized_1)
add_well_IDs <- function(df,
column_numbers_col,
row_letters_col) {
df <- df %>%
dplyr::mutate(Well_ID = case_when(nchar(as.character(df[[column_numbers_col]])) == 2 ~ paste(df[[row_letters_col]], df[[column_numbers_col]], sep=""),
nchar(as.character(df[[column_numbers_col]])) == 1 ~ paste(df[[row_letters_col]], 0, df[[column_numbers_col]], sep="")))
return(df)
}
test <- add_well_IDs(df = strains_for_proteomics_randomized_1,
column_numbers_col = "Column",
row_letters_col = "Row")
View(test)
# Grab the strains we want to use for the proteomics experiment: the tRNA synthetase ts strains, and 2 of the replicates of the control strain
strains_for_proteomics <- sample_ids %>%
dplyr::filter(Status == "Synthetase"|Sys.Name == "Control_1"|Sys.Name == "Control_2")
# Get 2 versions of this dataframe: one for the first 3 rows (to be harvested at ~20h), another one for the last 3 rows (to be harvested at ~48h)
# Each of these is first triplicated (since each row in the dataframe represents a strain, and we'll have 3 replicates of each), then each of the dataframes is randomized separately, so the sample layout will not be the same across the first 3 rows and across the last 3 - I hope this is feasible with the Rotor or Pixl or whatever it is?? If I give it the location of each of them in the old plate?? So that we can randomize the samples, which I think is good practice, but obviously so that Wenxi doesn't have to do it manually
# Anyway, after randomizing the rows in each dataframe, I replicate this three times
strains_for_proteomics_randomized_1 <- slice(strains_for_proteomics, rep(1:nrow(strains_for_proteomics), 3))                            # Get triplicates of the rows
strains_for_proteomics_randomized_1 <- strains_for_proteomics_randomized_1[sample(nrow(strains_for_proteomics_randomized_1)),] %>%      # Randomize row order
dplyr::mutate(Column = rep(seq(from = 1, to = 12, by = 1), 3),                                                                        # Assign columns
Row = c(rep("A", 12), rep("B", 12), rep("C", 12))) %>%                                                                  # Assign rows
add_well_IDs(df = strains_for_proteomics_randomized_1,                                                                                # Add a column with well IDs
column_numbers_col = "Column",
row_letters_col = "Row")
# Grab the strains we want to use for the proteomics experiment: the tRNA synthetase ts strains, and 2 of the replicates of the control strain
strains_for_proteomics <- sample_ids %>%
dplyr::filter(Status == "Synthetase"|Sys.Name == "Control_1"|Sys.Name == "Control_2")
# Get 2 versions of this dataframe: one for the first 3 rows (to be harvested at ~20h), another one for the last 3 rows (to be harvested at ~48h)
# Each of these is first triplicated (since each row in the dataframe represents a strain, and we'll have 3 replicates of each), then each of the dataframes is randomized separately, so the sample layout will not be the same across the first 3 rows and across the last 3 - I hope this is feasible with the Rotor or Pixl or whatever it is?? If I give it the location of each of them in the old plate?? So that we can randomize the samples, which I think is good practice, but obviously so that Wenxi doesn't have to do it manually
# Anyway, after randomizing the rows in each dataframe, I replicate this three times
strains_for_proteomics_randomized_1 <- slice(strains_for_proteomics, rep(1:nrow(strains_for_proteomics), 3))                            # Get triplicates of the rows
strains_for_proteomics_randomized_1 <- strains_for_proteomics_randomized_1[sample(nrow(strains_for_proteomics_randomized_1)),] %>%      # Randomize row order
dplyr::mutate(Column = rep(seq(from = 1, to = 12, by = 1), 3),                                                                        # Assign columns
Row = c(rep("A", 12), rep("B", 12), rep("C", 12))) %>%                                                                  # Assign rows
add_well_IDs(column_numbers_col = "Column",
row_letters_col = "Row")
strains_for_proteomics_randomized_2 <- slice(strains_for_proteomics, rep(1:nrow(strains_for_proteomics), 3))                            # Get triplicates of the rows
strains_for_proteomics_randomized_2 <- strains_for_proteomics_randomized_2[sample(nrow(strains_for_proteomics_randomized_2)),] %>%      # Randomize row order
dplyr::mutate(Column = rep(seq(from = 1, to = 12, by = 1), 3),                                                                        # Assign columns
Row = c(rep("E", 12), rep("F", 12), rep("G", 12))) %>%                                                                  # Assign rows
add_well_IDs(column_numbers_col = "Column",
row_letters_col = "Row")
# Join the 2 so we get the whole layout for the plate
strains_for_proteomics_final <- rbind(strains_for_proteomics_randomized_1, strains_for_proteomics_randomized_2)
View(strains_for_proteomics_final)
View(growth_long_full_raw)
temperatures <- unique(growth_long_full_raw$Temp_set)
strains <- sort(unique(strains_for_proteomics$Sys.Name))
out_df <- data.frame(strains)
# Iterate over temperatures
for (i in 1:length(temperatures)) {
temperature <- temperatures[i]
avg_ods_this_temp_20 <- c()
avg_ods_this_temp_48 <- c()
# For each temperature, iterates over strains, and get the average OD for each of them (at this temperature - at 20h and 48h)
for (j in 1:length(strains)) {
strain <- strains[j]
temp_20 <- growth_long_full_raw %>%
dplyr::filter(Strain == strain & Temp_set == temperature & Time = 20)
temperatures <- unique(growth_long_full_raw$Temp_set)
strains <- sort(unique(strains_for_proteomics$Sys.Name))
out_df <- data.frame(strains)
# Iterate over temperatures
for (i in 1:length(temperatures)) {
temperature <- temperatures[i]
avg_ods_this_temp_20 <- c()
avg_ods_this_temp_48 <- c()
# For each temperature, iterates over strains, and get the average OD for each of them (at this temperature - at 20h and 48h)
for (j in 1:length(strains)) {
strain <- strains[j]
temp_20 <- growth_long_full_raw %>%
dplyr::filter(Strain == strain & Temp_set == temperature & Time == 20)
temp_48 <- growth_long_full_raw %>%
dplyr::filter(Strain == strain & Temp_set == temperature & Time == 48)
avg_ods_this_temp_20 <- c(avg_ods_this_temp_20, mean(temp_20$OD_raw))
avg_ods_this_temp_48 <- c(avg_ods_this_temp_48, mean(temp_48$OD_raw))
}
# Add the vectors containing the collected average ODs at 20h and 48h at this temperature to the output dataframe
out_df[[paste("OD_at_", temperature, "_20h", sep="")]] <- avg_ods_this_temp_20
out_df[[paste("OD_at_", temperature, "_20h", sep="")]] <- avg_ods_this_temp_48
}
View(out_df)
temperature = 30
avg_ods_this_temp_20 <- c()
avg_ods_this_temp_48 <- c()
j = 1
temp_20 <- growth_long_full_raw %>%
dplyr::filter(Strain == strain & Temp_set == temperature & Time == 20)
View(growth_long_full_raw)
temperatures <- unique(growth_long_full_raw$Temp_set)
strains <- sort(unique(strains_for_proteomics$Sys.Name))
out_df <- data.frame(strains)
# Iterate over temperatures
for (i in 1:length(temperatures)) {
temperature <- temperatures[i]
avg_ods_this_temp_20 <- c()
avg_ods_this_temp_48 <- c()
# For each temperature, iterates over strains, and get the average OD for each of them (at this temperature - at 20h and 48h)
for (j in 1:length(strains)) {
strain <- strains[j]
temp_20 <- growth_long_full_raw %>%
dplyr::filter(Strain == strain & Temp_set == temperature & Time > 19.5 & Time < 20.5)     # Time is not always exactly 20h
temp_48 <- growth_long_full_raw %>%
dplyr::filter(Strain == strain & Temp_set == temperature & Time > 47.5 & Time < 48.5)     # Time is not always exactly 48h
avg_ods_this_temp_20 <- c(avg_ods_this_temp_20, mean(temp_20$OD_raw))
avg_ods_this_temp_48 <- c(avg_ods_this_temp_48, mean(temp_48$OD_raw))
}
# Add the vectors containing the collected average ODs at 20h and 48h at this temperature to the output dataframe
out_df[[paste("OD_at_", temperature, "_20h", sep="")]] <- avg_ods_this_temp_20
out_df[[paste("OD_at_", temperature, "_20h", sep="")]] <- avg_ods_this_temp_48
}
temperatures <- unique(growth_long_full_raw$Temp_set)
strains <- sort(unique(strains_for_proteomics$Sys.Name))
out_df <- data.frame(strains)
# Iterate over temperatures
for (i in 1:length(temperatures)) {
temperature <- temperatures[i]
avg_ods_this_temp_20 <- c()
avg_ods_this_temp_48 <- c()
# For each temperature, iterates over strains, and get the average OD for each of them (at this temperature - at 20h and 48h)
for (j in 1:length(strains)) {
strain <- strains[j]
temp_20 <- growth_long_full_raw %>%
dplyr::filter(Strain == strain & Temp_set == temperature & Time > 19.5 & Time < 20.5)     # Time is not always exactly 20h
temp_48 <- growth_long_full_raw %>%
dplyr::filter(Strain == strain & Temp_set == temperature & Time > 47.5 & Time < 48.5)     # Time is not always exactly 48h
avg_ods_this_temp_20 <- c(avg_ods_this_temp_20, mean(temp_20$OD_raw))
avg_ods_this_temp_48 <- c(avg_ods_this_temp_48, mean(temp_48$OD_raw))
}
# Add the vectors containing the collected average ODs at 20h and 48h at this temperature to the output dataframe
out_df[[paste("OD_at_", temperature, "_20h", sep="")]] <- avg_ods_this_temp_20
out_df[[paste("OD_at_", temperature, "_48h", sep="")]] <- avg_ods_this_temp_48
}
View(strains_for_proteomics)
temperatures <- unique(growth_long_full_raw$Temp_set)
strains <- strains_for_proteomics$Sys.Name
# Iterate over temperatures
for (i in 1:length(temperatures)) {
temperature <- temperatures[i]
avg_ods_this_temp_20 <- c()
avg_ods_this_temp_48 <- c()
# For each temperature, iterates over strains, and get the average OD for each of them (at this temperature - at 20h and 48h)
for (j in 1:length(strains)) {
strain <- strains[j]
temp_20 <- growth_long_full_raw %>%
dplyr::filter(Strain == strain & Temp_set == temperature & Time > 19.5 & Time < 20.5)     # Time is not always exactly 20h
temp_48 <- growth_long_full_raw %>%
dplyr::filter(Strain == strain & Temp_set == temperature & Time > 47.5 & Time < 48.5)     # Time is not always exactly 48h
avg_ods_this_temp_20 <- c(avg_ods_this_temp_20, mean(temp_20$OD_raw))
avg_ods_this_temp_48 <- c(avg_ods_this_temp_48, mean(temp_48$OD_raw))
}
# Add the vectors containing the collected average ODs at 20h and 48h at this temperature to the output dataframe
strains_for_proteomics[[paste("OD_at_", temperature, "_20h", sep="")]] <- avg_ods_this_temp_20
strains_for_proteomics[[paste("OD_at_", temperature, "_48h", sep="")]] <- avg_ods_this_temp_48
}
# Add two columns which summarize whether this strain is viable (OD > 0.2) at 48h - at 30ºC and 34ºC
strains_for_proteomics <- strains_for_proteomics %>%
dplyr::mutate(Viable_at_30 = case_when(OD_at_30_48h > 0.2 ~ "Yes",
TRUE ~ "No"),
Viable_at_34 = case_when(OD_at_34_48h > 0.2 ~ "Yes",
TRUE ~ "No"))
strains_for_proteomics_randomized_1 <- slice(strains_for_proteomics, rep(1:nrow(strains_for_proteomics), 3))                            # Get triplicates of the rows
strains_for_proteomics_randomized_1 <- strains_for_proteomics_randomized_1[sample(nrow(strains_for_proteomics_randomized_1)),] %>%      # Randomize row order
dplyr::mutate(Column = rep(seq(from = 1, to = 12, by = 1), 3),                                                                        # Assign columns
Row = c(rep("A", 12), rep("B", 12), rep("C", 12))) %>%                                                                  # Assign rows
add_well_IDs(column_numbers_col = "Column",
row_letters_col = "Row")
strains_for_proteomics_randomized_2 <- slice(strains_for_proteomics, rep(1:nrow(strains_for_proteomics), 3))                            # Get triplicates of the rows
strains_for_proteomics_randomized_2 <- strains_for_proteomics_randomized_2[sample(nrow(strains_for_proteomics_randomized_2)),] %>%      # Randomize row order
dplyr::mutate(Column = rep(seq(from = 1, to = 12, by = 1), 3),                                                                        # Assign columns
Row = c(rep("E", 12), rep("F", 12), rep("G", 12))) %>%                                                                  # Assign rows
add_well_IDs(column_numbers_col = "Column",
row_letters_col = "Row")
# Join the 2 so we get the whole layout for the plate
strains_for_proteomics_final <- rbind(strains_for_proteomics_randomized_1, strains_for_proteomics_randomized_2)
View(strains_for_proteomics_final)
raw_map(data = strains_for_proteomics_final$Sys.Name,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
ggtitle("Sample layout for proteomics experiment") +
theme_dark() +
theme(axis.text=element_text(size=6)) +
labs(fill = "Strain")
raw_map(data = strains_for_proteomics_final$Sys.Name,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
ggtitle("Sample layout for proteomics experiment") +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(1, 'cm'),          # change legend key size
legend.key.height = unit(1, 'cm'),        # change legend key height
legend.key.width = unit(1, 'cm')) +       # change legend key width)
labs(fill = "Strain")
raw_map(data = strains_for_proteomics_final$Sys.Name,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
ggtitle("Sample layout for proteomics experiment") +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(fill = "Strain")
# Color by strain type
raw_map(data = strains_for_proteomics_final$Status,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
ggtitle("Sample layout for proteomics experiment") +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(fill = "Strain")
# Color by viable at 34ºC
raw_map(data = strains_for_proteomics_final$Viable_at_34,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
ggtitle("Sample layout for proteomics experiment") +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(fill = "Strain")
# Color by viable at 34ºC
raw_map(data = strains_for_proteomics_final$Viable_at_34,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
#ggtitle() +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(title = "Sample layout for proteomics experiment",
fill = "Viable at 34ºC")
# Color by strain
raw_map(data = strains_for_proteomics_final$Sys.Name,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
ggtitle("Sample layout for proteomics experiment") +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(fill = "Strain")
# Color by strain type
raw_map(data = strains_for_proteomics_final$Status,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(title = "Sample layout for proteomics experiment",
fill = "Strain type")
# Color by viable at 30ºC
raw_map(data = strains_for_proteomics_final$Viable_at_34,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(title = "Sample layout for proteomics experiment",
fill = "Viable at 30ºC")
# Color by viable at 34ºC
raw_map(data = strains_for_proteomics_final$Viable_at_34,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(title = "Sample layout for proteomics experiment",
fill = "Viable at 34ºC")
# Color by strain
raw_map(data = strains_for_proteomics_final$Sys.Name,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
ggtitle("Sample layout for proteomics experiment") +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(fill = "Strain")
# Color by strain type
raw_map(data = strains_for_proteomics_final$Status,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(title = "Sample layout for proteomics experiment",
fill = "Strain type")
# Color by viable at 30ºC
raw_map(data = strains_for_proteomics_final$Viable_at_30,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(title = "Sample layout for proteomics experiment",
fill = "Viable at 30ºC")
# Color by viable at 34ºC
raw_map(data = strains_for_proteomics_final$Viable_at_34,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(title = "Sample layout for proteomics experiment",
fill = "Viable at 34ºC")
View(strains_for_proteomics_final)
temp <- strains_for_proteomics_final %>% dplyr::select(GC96, Well_ID)
View(temp)
View(strains_for_proteomics)
# Sample IDs (metadata to match sample names)
sample_ids <- read.xlsx(file = paste(base_dir, "TSSC/Data/pilot/pre_test_growth_curves/strains_for_pilot.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::mutate(Sample.ID = paste(Sys.Name, "_1", sep=""))
# Turn rows of the 384 well plates from numbers to letters, and create a column with the well IDs combining the two
sample_ids$Row384 <- sapply(sample_ids$Row384, function(i) letters[i])
View(sample_ids)
# Turn rows of the 384 well plates from numbers to letters, and create a column with the well IDs combining the two
sample_ids$Row384 <- sapply(sample_ids$Row384, function(i) LETTERS[i])
# Sample IDs (metadata to match sample names)
sample_ids <- read.xlsx(file = paste(base_dir, "TSSC/Data/pilot/pre_test_growth_curves/strains_for_pilot.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::mutate(Sample.ID = paste(Sys.Name, "_1", sep=""))
# Turn rows of the 384 well plates from numbers to letters, and create a column with the well IDs combining the two
sample_ids$Row384 <- sapply(sample_ids$Row384, function(i) LETTERS[i])
sample_ids <- sample_ids %>%
dplyr::mutate(Well_ID_384 = add_well_IDs(column_numbers_col = Col384,
row_letters_col = Row384))
sample_ids <- add_well_IDs(df = sample_ids,
column_numbers_col = Col384,
row_letters_col = Row384))
sample_ids <- add_well_IDs(df = sample_ids,
column_numbers_col = Col384,
row_letters_col = Row384)
# Sample IDs (metadata to match sample names)
sample_ids <- read.xlsx(file = paste(base_dir, "TSSC/Data/pilot/pre_test_growth_curves/strains_for_pilot.xlsx", sep=""), sheetIndex = 1) %>%
dplyr::mutate(Sample.ID = paste(Sys.Name, "_1", sep=""))
# Turn rows of the 384 well plates from numbers to letters, and create a column with the well IDs combining the two
sample_ids$Row384 <- sapply(sample_ids$Row384, function(i) LETTERS[i])
sample_ids <- add_well_IDs(df = sample_ids,
column_numbers_col = "Col384",
row_letters_col = "Row384")
colnames(sample_ids)[colnames(sample_ids) == "Well_ID"] <- "Well_ID_384"
# Grab the strains we want to use for the proteomics experiment: the tRNA synthetase ts strains, and 2 of the replicates of the control strain
strains_for_proteomics <- sample_ids %>%
dplyr::filter(Status == "Synthetase"|Sys.Name == "Control_1"|Sys.Name == "Control_2")
# Add columns with the average OD of each strain at each temperature
temperatures <- unique(growth_long_full_raw$Temp_set)
strains <- strains_for_proteomics$Sys.Name
# Iterate over temperatures
for (i in 1:length(temperatures)) {
temperature <- temperatures[i]
avg_ods_this_temp_20 <- c()
avg_ods_this_temp_48 <- c()
# For each temperature, iterates over strains, and get the average OD for each of them (at this temperature - at 20h and 48h)
for (j in 1:length(strains)) {
strain <- strains[j]
temp_20 <- growth_long_full_raw %>%
dplyr::filter(Strain == strain & Temp_set == temperature & Time > 19.5 & Time < 20.5)     # Time is not always exactly 20h
temp_48 <- growth_long_full_raw %>%
dplyr::filter(Strain == strain & Temp_set == temperature & Time > 47.5 & Time < 48.5)     # Time is not always exactly 48h
avg_ods_this_temp_20 <- c(avg_ods_this_temp_20, mean(temp_20$OD_raw))
avg_ods_this_temp_48 <- c(avg_ods_this_temp_48, mean(temp_48$OD_raw))
}
# Add the vectors containing the collected average ODs at 20h and 48h at this temperature to the output dataframe
strains_for_proteomics[[paste("OD_at_", temperature, "_20h", sep="")]] <- avg_ods_this_temp_20
strains_for_proteomics[[paste("OD_at_", temperature, "_48h", sep="")]] <- avg_ods_this_temp_48
}
# Add two columns which summarize whether this strain is viable (OD > 0.2) at 48h - at 30ºC and 34ºC
strains_for_proteomics <- strains_for_proteomics %>%
dplyr::mutate(Viable_at_30 = case_when(OD_at_30_48h > 0.2 ~ "Yes",
TRUE ~ "No"),
Viable_at_34 = case_when(OD_at_34_48h > 0.2 ~ "Yes",
TRUE ~ "No"))
# Get 2 versions of this dataframe: one for the first 3 rows (to be harvested at ~20h), another one for the last 3 rows (to be harvested at ~48h)
# Each of these is first triplicated (since each row in the dataframe represents a strain, and we'll have 3 replicates of each), then each of the dataframes is randomized separately, so the sample layout will not be the same across the first 3 rows and across the last 3 - I hope this is feasible with the Rotor or Pixl or whatever it is?? If I give it the location of each of them in the old plate?? So that we can randomize the samples, which I think is good practice, but obviously so that Wenxi doesn't have to do it manually
# Anyway, after randomizing the rows in each dataframe, I replicate this three times
strains_for_proteomics_randomized_1 <- slice(strains_for_proteomics, rep(1:nrow(strains_for_proteomics), 3))                            # Get triplicates of the rows
strains_for_proteomics_randomized_1 <- strains_for_proteomics_randomized_1[sample(nrow(strains_for_proteomics_randomized_1)),] %>%      # Randomize row order
dplyr::mutate(Column = rep(seq(from = 1, to = 12, by = 1), 3),                                                                        # Assign columns
Row = c(rep("A", 12), rep("B", 12), rep("C", 12))) %>%                                                                  # Assign rows
add_well_IDs(column_numbers_col = "Column",
row_letters_col = "Row")
strains_for_proteomics_randomized_2 <- slice(strains_for_proteomics, rep(1:nrow(strains_for_proteomics), 3))                            # Get triplicates of the rows
strains_for_proteomics_randomized_2 <- strains_for_proteomics_randomized_2[sample(nrow(strains_for_proteomics_randomized_2)),] %>%      # Randomize row order
dplyr::mutate(Column = rep(seq(from = 1, to = 12, by = 1), 3),                                                                        # Assign columns
Row = c(rep("E", 12), rep("F", 12), rep("G", 12))) %>%                                                                  # Assign rows
add_well_IDs(column_numbers_col = "Column",
row_letters_col = "Row")
# Join the 2 so we get the whole layout for the plate
strains_for_proteomics_final <- rbind(strains_for_proteomics_randomized_1, strains_for_proteomics_randomized_2)
# Color by strain
raw_map(data = strains_for_proteomics_final$Sys.Name,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
ggtitle("Sample layout for proteomics experiment") +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(fill = "Strain")
# Color by strain type
raw_map(data = strains_for_proteomics_final$Status,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(title = "Sample layout for proteomics experiment",
fill = "Strain type")
# Color by viable at 30ºC
raw_map(data = strains_for_proteomics_final$Viable_at_30,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(title = "Sample layout for proteomics experiment",
fill = "Viable at 30ºC")
# Color by viable at 34ºC
raw_map(data = strains_for_proteomics_final$Viable_at_34,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width)
labs(title = "Sample layout for proteomics experiment",
fill = "Viable at 34ºC")
temp <- strains_for_proteomics_final %>% dplyr::select(Well_ID_384, Well_ID) %>% dplyr::rename(Well_ID_96 = Well_ID)
View(temp)
# Color by strain
raw_map(data = strains_for_proteomics_final$Sys.Name,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
ggtitle("Sample layout for proteomics experiment") +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm'),         # change legend key width
legend.text = element_text(size = 6),       # Make legend labels smaller
legend.title = element_text(size = 7)) +    # Optional: title smaller too) +
labs(fill = "Strain")
raw_map(data = strains_for_proteomics_final$Sys.Name,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
ggtitle("Sample layout for proteomics experiment") +
theme_dark() +
theme(axis.text = element_text(size = 6),
legend.key.size = unit(0.5, 'cm'),
legend.key.height = unit(0.5, 'cm'),
legend.key.width = unit(0.5, 'cm'),
legend.text = element_text(size = 6),
legend.title = element_text(size = 7),
legend.position = "right") +
guides(fill = guide_legend(ncol = 2)) +
labs(fill = "Strain")
# Color by strain
raw_map(data = strains_for_proteomics_final$Sys.Name,
well = strains_for_proteomics_final$Well_ID,
plate = 96) +
ggtitle("Sample layout for proteomics experiment") +
theme_dark() +
theme(axis.text=element_text(size=6),
legend.key.size = unit(0.5, 'cm'),          # change legend key size
legend.key.height = unit(0.5, 'cm'),        # change legend key height
legend.key.width = unit(0.5, 'cm')) +       # change legend key width
guides(fill = guide_legend(ncol = 2)) +
labs(fill = "Strain")
